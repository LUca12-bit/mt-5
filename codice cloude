/**
 * EA Studio Portfolio Expert Advisor
 *
 * Exported from Expert Advisor Studio
 * MQL base code updated on 2025-06-09
 * Website https://eas.forexsb.com
 *
 * Copyright 2025, Forex Software Ltd.
 *
 * This Portfolio Expert works in MetaTrader 5 hedging accounts.
 * It opens separate positions for each strategy.
 * Every position has an unique magic number, which corresponds to the index of the strategy.
 *
 * Risk Disclosure
 *
 * Futures and forex trading contains substantial risk and is not for every investor.
 * An investor could potentially lose all or more than the initial investment.
 * Risk capital is money that can be lost without jeopardizing onesâ€™ financial security or life style.
 * Only risk capital should be used for trading and only those with sufficient risk capital should consider trading.
 */

#property copyright "Forex Software Ltd."
#property version   "4.3"
#property strict

static input double Entry_Amount       =    0.01; // Entry lots
static input int    Base_Magic_Number  =     100; // Base Magic Number

static input string Entry_prot__ = "------"; // --- Entry Protections ---
static input int    Max_Spread   =        0; // Max spread (points)
static input int    Max_OpenPos  =        0; // Max open positions (current expert)
static input double Max_OpenLots =     0.00; // Max open lots (current expert)

static input string Daily_prot__ = "------"; // --- Daily Protections ---
static input int    MaxDailyLoss =        0; // Maximum daily loss (currency)
static input double Max_Daily_DD =     0.00; // Maximum daily drawdown %
static input int    Daily_Reset  =        0; // Daily reset hour (terminal time)

static input string Account_prot = "------"; // --- Account Protections ---
static input int    Min_Equity   =        0; // Minimum equity (currency)
static input double MaxEquity_DD =     0.00; // Maximum equity drawdown %
static input int    Max_Equity   =        0; // Maximum equity (currency)

static input string _NewsFilter_ = "------"; // --- News Filter ---
enum NewsFilterPriority
  {
   NewsFilter_Disabled,     // News filter disabled
   NewsFilter_HighOnly,     // High news filter
   NewsFilter_HighAndMedium // Medium and High news filter
  };
static input NewsFilterPriority News_Priority = NewsFilter_Disabled;       // News priority
static input string News_Currencies   = "USD,EUR"; // News currencies
static input int    News_BeforeMedium =  2; // Before Medium news (minutes)
static input int    News_AfterMedium  =  2; // After Medium news (minutes)
static input int    News_BeforeHigh   =  2; // Before High news (minutes)
static input int    News_AfterHigh    =  5; // After High news (minutes)
static input int    News_ViewCount    = 10; // News records to show

static input string __Stats_____ = "------"; // --- Stats ---
static input bool   Pos_Stat     =     true; // Position stats
static input bool   Robot_Stats  =     true; // Trading stats

#define TRADE_RETRY_COUNT 4
#define TRADE_RETRY_WAIT  100
#define OP_FLAT           -1
#define OP_BUY            ORDER_TYPE_BUY
#define OP_SELL           ORDER_TYPE_SELL

string robotTagline  = "A Portfolio Expert from Expert Advisor Studio";

// Session time is set in seconds from 00:00
const int  sessionSundayOpen          =     0; // 00:00
const int  sessionSundayClose         = 86400; // 24:00
const int  sessionMondayThursdayOpen  =     0; // 00:00
const int  sessionMondayThursdayClose = 86400; // 24:00
const int  sessionFridayOpen          =     0; // 00:00
const int  sessionFridayClose         = 86400; // 24:00
const bool sessionIgnoreSunday        = true;
const bool sessionCloseAtSessionClose = false;
const bool sessionCloseAtFridayClose  = true;

const int    strategiesCount = 296;
const double sigma           = 0.000001;
const int    requiredBars    = 100;

datetime lastStatsUpdate = 0;
datetime barTime;
double   stopLevel;
double   pip;
bool     setProtectionSeparately = false;
int      indHandlers[296][12][2];

int    maxRectangles = 0;
int    maxLabels     = 0;
int    posStatCount  = 0;
double posStatLots   = 0;
double posStatProfit = 0;

string accountProtectionMessage = "";
string entryProtectionMessage   = "";

struct NewsRecord
  {
   datetime time;
   string   priority;
   string   currency;
   string   title;
  };

NewsRecord newsRecords[];
string   newsCurrencies[];
datetime lastNewsUpdate = 0;
string   loadNewsError  = "";
bool     isNewsFeedOk   = true;

string   accMaxEquityGlobalVarName       = "accMaxEquity123456789";
string   accMaxDailyBalanceGlobalVarName = "accMaxDailyBalance123456789";
string   accMaxDailyEquityGlobalVarName  = "accMaxDailyEquity123456789";
string   accEntrySuspendGlobalVarName    = "accEntrySuspend123456789";
double   equityDrawdownPercent           = 0;
datetime dailyDrawdownLastReset          = 0;
double   dailyLoss                       = 0;
double   dailyDrawdown                   = 0;

ENUM_ORDER_TYPE_FILLING orderFillingType = ORDER_FILLING_FOK;

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
enum OrderScope
  {
   ORDER_SCOPE_UNDEFINED,
   ORDER_SCOPE_ENTRY,
   ORDER_SCOPE_EXIT
  };
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
enum OrderDirection
  {
   ORDER_DIRECTION_NONE,
   ORDER_DIRECTION_BUY,
   ORDER_DIRECTION_SELL,
   ORDER_DIRECTION_BOTH
  };
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
struct Position
  {
   int    Type;
   ulong  Ticket;
   int    MagicNumber;
   double Lots;
   double Price;
   double StopLoss;
   double TakeProfit;
  };
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
struct Signal
  {
   int            MagicNumber;
   OrderScope     Scope;
   OrderDirection Direction;
   int            StopLossPips;
   int            TakeProfitPips;
   bool           IsTrailingStop;
   bool           OppositeReverse;
  };
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int OnInit()
  {
   Comment("");
   DeleteObjects();

   barTime   = Time(0);
   stopLevel = (int) SymbolInfoInteger(_Symbol, SYMBOL_TRADE_STOPS_LEVEL);
   pip       = GetPipValue();

   accountProtectionMessage = "";
   entryProtectionMessage   = "";

   InitIndicatorHandlers();

   ParseNewsCurrenciesText();
   lastNewsUpdate = TimeCurrent();
   if(!MQLInfoInteger(MQL_TESTER))
      LoadNews();

   OnTick();
   ChartRedraw(0);

   return INIT_SUCCEEDED;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   DeleteObjects();

   if(accountProtectionMessage != "")
      Comment(accountProtectionMessage);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnTick(void)
  {
   if(!MQLInfoInteger(MQL_TESTER))
     {
      UpdateAccountProtection();
      CheckAccountProtection();

      const datetime time = TimeCurrent();
      if(time > lastStatsUpdate + 3)
        {
         lastStatsUpdate = time;
         if(Max_OpenPos > sigma || Max_OpenLots > sigma)
            SetPosStats();

         UpdateStats();
        }

      if(time > lastNewsUpdate + 6*60*60 || !isNewsFeedOk)
        {
         lastNewsUpdate = time;
         LoadNews();
        }
     }

   if(IsForceSessionClose())
     {
      CloseAllPositions();
      return;
     }

   const datetime time = Time(0);
   if(time > barTime)
     {
      barTime = time;
      OnBar();
     }
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnBar(void)
  {
   if(IsOutOfSession())
      return;

   if(Max_OpenPos || Max_OpenLots)
      SetPosStats();

   Signal signalList[];
   SetSignals(signalList);
   int signalsCount = ArraySize(signalList);

   for (int i = 0; i < signalsCount; i += 1)
      ManageSignal(signalList[i]);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void ManageSignal(Signal &signal)
  {
   Position position = CreatePosition(signal.MagicNumber);

   if(position.Type != OP_FLAT && signal.Scope == ORDER_SCOPE_EXIT)
     {
      if((signal.Direction == ORDER_DIRECTION_BOTH) ||
         (position.Type == OP_BUY  && signal.Direction == ORDER_DIRECTION_SELL) ||
         (position.Type == OP_SELL && signal.Direction == ORDER_DIRECTION_BUY ) )
        {
         ClosePosition(position);
         return;
        }

      if(signal.IsTrailingStop)
        {
         double trailingStop = GetTrailingStopPrice(position, signal.StopLossPips);
         ManageTrailingStop(position, trailingStop);
        }
     }

   if(position.Type != OP_FLAT && signal.OppositeReverse)
     {
      if((position.Type == OP_BUY  && signal.Direction == ORDER_DIRECTION_SELL) ||
         (position.Type == OP_SELL && signal.Direction == ORDER_DIRECTION_BUY ))
        {
         ClosePosition(position);
         ManageSignal(signal);
         return;
        }
     }

   if((position.Type == OP_FLAT && signal.Scope == ORDER_SCOPE_ENTRY) &&
      (signal.Direction == ORDER_DIRECTION_BUY ||
       signal.Direction == ORDER_DIRECTION_SELL))
            OpenPosition(signal);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int CountPositions(void)
  {
   const int minMagic = GetMagicNumber(0);
   const int maxMagic = GetMagicNumber(strategiesCount);
   const int posTotal = PositionsTotal();
   int count = 0;

   for(int posIndex = posTotal - 1; posIndex >= 0; posIndex--)
     {
      const ulong ticket = PositionGetTicket(posIndex);
      if(PositionSelectByTicket(ticket) && PositionGetString(POSITION_SYMBOL) == _Symbol)
        {
         const long magicNumber = PositionGetInteger(POSITION_MAGIC);
         if(magicNumber >= minMagic && magicNumber <= maxMagic)
            count += 1;
        }
     }

   return count;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Position CreatePosition(const int magicNumber)
  {
   Position position;
   position.MagicNumber = magicNumber;
   position.Type        = OP_FLAT;
   position.Ticket      = 0;
   position.Lots        = 0;
   position.Price       = 0;
   position.StopLoss    = 0;
   position.TakeProfit  = 0;

   const int posTotal = PositionsTotal();
   for (int posIndex = 0; posIndex < posTotal; posIndex += 1)
     {
      const ulong ticket = PositionGetTicket(posIndex);
      if(PositionSelectByTicket(ticket) &&
         PositionGetString(POSITION_SYMBOL) == _Symbol &&
         PositionGetInteger(POSITION_MAGIC) == magicNumber)
        {
         position.Type       = (int) PositionGetInteger(POSITION_TYPE);
         position.Ticket     = ticket;
         position.Lots       = NormalizeDouble( PositionGetDouble(POSITION_VOLUME),           2);
         position.Price      = NormalizeDouble( PositionGetDouble(POSITION_PRICE_OPEN), _Digits);
         position.StopLoss   = NormalizeDouble( PositionGetDouble(POSITION_SL),         _Digits);
         position.TakeProfit = NormalizeDouble( PositionGetDouble(POSITION_TP),         _Digits);
         break;
        }
     }

   return position;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal CreateEntrySignal(int strategyIndex, bool canOpenLong,    bool canOpenShort,
                         int stopLossPips,  int  takeProfitPips, bool isTrailingStop,
                         bool oppositeReverse = false)
  {
   Signal signal;

   signal.MagicNumber     = GetMagicNumber(strategyIndex);
   signal.Scope           = ORDER_SCOPE_ENTRY;
   signal.StopLossPips    = stopLossPips;
   signal.TakeProfitPips  = takeProfitPips;
   signal.IsTrailingStop  = isTrailingStop;
   signal.OppositeReverse = oppositeReverse;
   signal.Direction       = canOpenLong && canOpenShort ? ORDER_DIRECTION_BOTH
                                         : canOpenLong  ? ORDER_DIRECTION_BUY
                                         : canOpenShort ? ORDER_DIRECTION_SELL
                                                        : ORDER_DIRECTION_NONE;

   return signal;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal CreateExitSignal(int strategyIndex, bool canCloseLong,   bool canCloseShorts,
                        int stopLossPips,  int  takeProfitPips, bool isTrailingStop)
  {
   Signal signal;

   signal.MagicNumber     = GetMagicNumber(strategyIndex);
   signal.Scope           = ORDER_SCOPE_EXIT;
   signal.StopLossPips    = stopLossPips;
   signal.TakeProfitPips  = takeProfitPips;
   signal.IsTrailingStop  = isTrailingStop;
   signal.OppositeReverse = false;
   signal.Direction       = canCloseLong && canCloseShorts ? ORDER_DIRECTION_BOTH
                                          : canCloseLong   ? ORDER_DIRECTION_SELL
                                          : canCloseShorts ? ORDER_DIRECTION_BUY
                                                           : ORDER_DIRECTION_NONE;

   return signal;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OpenPosition(Signal &signal)
  {
   entryProtectionMessage = "";
   const int spread = (int)((Ask() - Bid()) / _Point);
   if(Max_OpenPos > sigma && posStatCount >= Max_OpenPos)
      entryProtectionMessage += StringFormat("Protection: Max open positions: %d, current: %d\n",
                                             Max_OpenPos, posStatCount);
   if(Max_OpenLots > sigma && posStatLots > Max_OpenLots - sigma)
      entryProtectionMessage += StringFormat("Protection: Max open lots: %.2f, current: %.2f\n",
                                             Max_OpenLots, posStatLots);
   if(Max_Spread > sigma && spread > Max_Spread)
      entryProtectionMessage += StringFormat("Protection: Max spread: %d, current: %d\n",
                                             Max_Spread, spread);
   if(MaxDailyLoss > sigma && dailyLoss >= MaxDailyLoss)
      entryProtectionMessage += StringFormat("Protection: Max daily loss: %d, current: %.2f\n",
                                             MaxDailyLoss, dailyLoss);
   if(Max_Daily_DD > sigma && dailyDrawdown >= Max_Daily_DD)
      entryProtectionMessage += StringFormat("Protection: Max daily drawdown: %.2f%%, current: %.2f%%\n",
                                             Max_Daily_DD, dailyDrawdown);
   if(GlobalVariableGet(accEntrySuspendGlobalVarName) > sigma)
      entryProtectionMessage += StringFormat("New entries are suspended until the Daily reset hour: %d",
                                             Daily_Reset);

   const int newsIndex = NewsFilterActive();
   if(newsIndex > -1)
     {
      const NewsRecord newsRecord = newsRecords[newsIndex];
      const datetime timeShift = (datetime) MathRound((TimeLocal() - TimeGMT()) / 3600.0) * 3600;
      const string   priority  = newsRecord.priority == "high" ? "[high]" : "[med]";
      entryProtectionMessage  += StringFormat("News filter: %s %s %s %s\n",
                                              priority,
                                              TimeToString(newsRecord.time + timeShift,
                                                           TIME_DATE | TIME_MINUTES),
                                              newsRecord.currency,
                                              newsRecord.title);
     }

   if(entryProtectionMessage != "")
     {
      entryProtectionMessage = TimeToString(TimeCurrent()) + " " +
                               "An entry order was canceled:\n" +
                               entryProtectionMessage;
      return;
     }

   const int    command    = OrderDirectionToCommand(signal.Direction);
   const double stopLoss   = GetStopLossPrice(command, signal.StopLossPips);
   const double takeProfit = GetTakeProfitPrice(command, signal.TakeProfitPips);
   const double posLots    = Entry_Amount;

   if(ManageOrderSend(command, posLots, stopLoss, takeProfit, 0, signal.MagicNumber))
     {
      posStatCount += 1;
      posStatLots  += posLots;
     }
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void ClosePosition(Position &position)
  {
   const int command = position.Type == OP_BUY ? OP_SELL : OP_BUY;

   if(ManageOrderSend(command, position.Lots, 0, 0, position.Ticket, position.MagicNumber))
     {
      posStatCount -= 1;
      posStatLots  -= position.Lots;
     }
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void CloseAllPositions(void)
  {
   for (int i = 0; i < strategiesCount; i += 1)
     {
      const int magicNumber = GetMagicNumber(i);
      Position position = CreatePosition(magicNumber);

      if(position.Type == OP_BUY || position.Type == OP_SELL)
         ClosePosition(position);
     }
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool ManageOrderSend(int command, double lots, double stopLoss, double takeProfit, ulong ticket, int magicNumber)
  {
   for(int attempt = 0; attempt < TRADE_RETRY_COUNT; attempt++)
     {
      if(IsTradeContextFree())
        {
         MqlTradeRequest request;
         MqlTradeResult  result;
         ZeroMemory(request);
         ZeroMemory(result);

         request.action       = TRADE_ACTION_DEAL;
         request.symbol       = _Symbol;
         request.volume       = lots;
         request.type         = command == OP_BUY ? ORDER_TYPE_BUY : ORDER_TYPE_SELL;
         request.price        = command == OP_BUY ? Ask() : Bid();
         request.type_filling = orderFillingType;
         request.deviation    = 10;
         request.sl           = stopLoss;
         request.tp           = takeProfit;
         request.magic        = magicNumber;
         request.position     = ticket;
         request.comment      = IntegerToString(magicNumber);

         bool isOrderCheck = CheckOrder(request);
         bool isOrderSend  = false;

         if(isOrderCheck)
           {
            ResetLastError();
            isOrderSend = OrderSend(request, result);
           }

         if(isOrderCheck && isOrderSend && result.retcode == TRADE_RETCODE_DONE)
            return true;
        }

      Sleep(TRADE_RETRY_WAIT);
      Print("Order Send retry: " + IntegerToString(attempt + 2));
     }
   return false;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void ModifyPosition(double stopLoss, double takeProfit, ulong ticket, int magicNumber)
  {
   for (int attempt = 0; attempt < TRADE_RETRY_COUNT; attempt++)
     {
      if( IsTradeContextFree() )
        {
         MqlTradeRequest request;
         MqlTradeResult  result;
         ZeroMemory(request);
         ZeroMemory(result);

         request.action   = TRADE_ACTION_SLTP;
         request.symbol   = _Symbol;
         request.sl       = stopLoss;
         request.tp       = takeProfit;
         request.magic    = magicNumber;
         request.position = ticket;
         request.comment  = IntegerToString(magicNumber);

         bool isOrderCheck = CheckOrder(request);
         bool isOrderSend  = false;

         if(isOrderCheck)
           {
            ResetLastError();
            isOrderSend = OrderSend(request, result);
           }

         if(isOrderCheck && isOrderSend && result.retcode == TRADE_RETCODE_DONE)
            return;
        }

      Sleep(TRADE_RETRY_WAIT);
      Print("Order Send retry: " + IntegerToString(attempt + 2));
     }
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool CheckOrder(MqlTradeRequest &request)
  {
   MqlTradeCheckResult check;
   ZeroMemory(check);
   ResetLastError();

   if(OrderCheck(request, check))
      return true;

   Print("Error with OrderCheck: " + check.comment);

   if(check.retcode == TRADE_RETCODE_INVALID_FILL)
     {
      switch (orderFillingType)
        {
         case ORDER_FILLING_FOK:
            Print("Filling mode changed to: ORDER_FILLING_IOC");
            orderFillingType = ORDER_FILLING_IOC;
            break;
         case ORDER_FILLING_IOC:
            Print("Filling mode changed to: ORDER_FILLING_RETURN");
            orderFillingType = ORDER_FILLING_RETURN;
            break;
         case ORDER_FILLING_RETURN:
            Print("Filling mode changed to: ORDER_FILLING_FOK");
            orderFillingType = ORDER_FILLING_FOK;
            break;
        }

      request.type_filling = orderFillingType;

      return CheckOrder(request);
     }

   return false;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double GetStopLossPrice(const int command, const int stopLossPips)
  {
   if(stopLossPips == 0)
      return 0;

   const double delta    = MathMax(pip * stopLossPips, _Point * stopLevel);
   const double stopLoss = command == OP_BUY ? Bid() - delta : Ask() + delta;

   return NormalizeDouble(stopLoss, _Digits);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double GetTakeProfitPrice(const int command, const int takeProfitPips)
  {
   if(takeProfitPips == 0)
      return 0;

   const double delta      = MathMax(pip * takeProfitPips, _Point * stopLevel);
   const double takeProfit = command == OP_BUY ? Bid() + delta : Ask() - delta;

   return NormalizeDouble(takeProfit, _Digits);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double GetTrailingStopPrice(Position &position, const int stopLoss)
  {
   const double bid             = Bid();
   const double ask             = Ask();
   const double spread          = ask - bid;
   const double stopLevelPoints = _Point * stopLevel;
   const double stopLossPoints  = pip * stopLoss;

   if(position.Type == OP_BUY)
     {
      const double newStopLoss = High(1) - stopLossPoints;
      if(position.StopLoss <= newStopLoss - pip)
         return newStopLoss < bid
                  ? newStopLoss >= bid - stopLevelPoints
                     ? bid - stopLevelPoints
                     : newStopLoss
                  : bid;
     }

   if(position.Type == OP_SELL)
     {
      const double newStopLoss = Low(1) + spread + stopLossPoints;
      if(position.StopLoss >= newStopLoss + pip)
         return newStopLoss > ask
                  ? newStopLoss <= ask + stopLevelPoints
                     ? ask + stopLevelPoints
                     : newStopLoss
                  : ask;
     }

   return position.StopLoss;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void ManageTrailingStop(Position &position, const double trailingStop)
  {
   if((position.Type == OP_BUY  && MathAbs(trailingStop - Bid()) < _Point) ||
      (position.Type == OP_SELL && MathAbs(trailingStop - Ask()) < _Point))
     {
      ClosePosition(position);
      return;
     }

   if(MathAbs(trailingStop - position.StopLoss) > _Point)
     {
      position.StopLoss = NormalizeDouble(trailingStop, _Digits);
      ModifyPosition(position.StopLoss, position.TakeProfit, position.Ticket, position.MagicNumber);
     }
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double Bid(void)
  {
   return SymbolInfoDouble(_Symbol, SYMBOL_BID);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double Ask(void)
  {
   return SymbolInfoDouble(_Symbol, SYMBOL_ASK);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
datetime Time(const int bar)
  {
   datetime buffer[];
   ArrayResize(buffer, 1);
   return CopyTime(_Symbol, _Period, bar, 1, buffer) == 1 ? buffer[0] : 0;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double Open(const int bar)
  {
   double buffer[];
   ArrayResize(buffer, 1);
   return CopyOpen(_Symbol, _Period, bar, 1, buffer) == 1 ? buffer[0] : 0;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double High(const int bar)
  {
   double buffer[];
   ArrayResize(buffer, 1);
   return CopyHigh(_Symbol, _Period, bar, 1, buffer) == 1 ? buffer[0] : 0;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double Low(const int bar)
  {
   double buffer[];
   ArrayResize(buffer, 1);
   return CopyLow(_Symbol, _Period, bar, 1, buffer) == 1 ? buffer[0] : 0;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double Close(const int bar)
  {
   double buffer[];
   ArrayResize(buffer, 1);
   return CopyClose(_Symbol, _Period, bar, 1, buffer) == 1 ? buffer[0] : 0;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double GetPipValue(void)
  {
   return _Digits == 4 || _Digits == 5 ? 0.0001
        : _Digits == 2 || _Digits == 3 ? 0.01
                        : _Digits == 1 ? 0.1 : 1;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool IsTradeAllowed(void)
  {
   return (bool) MQLInfoInteger(MQL_TRADE_ALLOWED);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void RefreshRates(void)
  {
   // A stub function to make it compatible with MQL4
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int DayOfWeek(void)
  {
   MqlDateTime mqlTime;
   TimeToStruct(Time(0), mqlTime);
   return mqlTime.day_of_week;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool IsTradeContextFree(void)
  {
   if(IsTradeAllowed())
      return true;

   const uint startWait = GetTickCount();
   Print("Trade context is busy! Waiting...");

   while(true)
     {
      if(IsStopped())
         return false;

      const uint diff = GetTickCount() - startWait;
      if(diff > 30 * 1000)
        {
         Print("The waiting limit exceeded!");
         return false;
        }

      if(IsTradeAllowed())
        {
         RefreshRates();
         return true;
        }

      Sleep(TRADE_RETRY_WAIT);
     }

   return true;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool IsOutOfSession(void)
  {
   const int dayOfWeek    = DayOfWeek();
   const int periodStart  = int(Time(0) % 86400);
   const int periodLength = PeriodSeconds(_Period);
   const int periodFix    = periodStart + (sessionCloseAtSessionClose ? periodLength : 0);
   const int friBarFix    = periodStart + (sessionCloseAtFridayClose ||
                                           sessionCloseAtSessionClose ? periodLength : 0);

   return dayOfWeek == 0 && sessionIgnoreSunday ? true
        : dayOfWeek == 0 ? periodStart < sessionSundayOpen ||
                           periodFix   > sessionSundayClose
        : dayOfWeek  < 5 ? periodStart < sessionMondayThursdayOpen ||
                           periodFix   > sessionMondayThursdayClose
                         : periodStart < sessionFridayOpen ||
                           friBarFix   > sessionFridayClose;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool IsForceSessionClose(void)
  {
   if(!sessionCloseAtFridayClose && !sessionCloseAtSessionClose)
      return false;

   const int dayOfWeek = DayOfWeek();
   const int periodEnd = int(Time(0) % 86400) + PeriodSeconds(_Period);

   return dayOfWeek == 0 && sessionCloseAtSessionClose ? periodEnd > sessionSundayClose
        : dayOfWeek  < 5 && sessionCloseAtSessionClose ? periodEnd > sessionMondayThursdayClose
        : dayOfWeek == 5 ? periodEnd > sessionFridayClose : false;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void UpdateAccountProtection(void)
  {
   const double equity = AccountInfoDouble(ACCOUNT_EQUITY);

   double maxEquity = GlobalVariableGet(accMaxEquityGlobalVarName);
   if(equity > maxEquity)
     {
      maxEquity = equity;
      GlobalVariableSet(accMaxEquityGlobalVarName, maxEquity);
     }

   equityDrawdownPercent = 100 * (maxEquity - equity) / maxEquity;

   if(equity > GlobalVariableGet(accMaxDailyEquityGlobalVarName))
      GlobalVariableSet(accMaxDailyEquityGlobalVarName, equity);

   const double balance = AccountInfoDouble(ACCOUNT_BALANCE);
   if(balance > GlobalVariableGet(accMaxDailyBalanceGlobalVarName))
      GlobalVariableSet(accMaxDailyBalanceGlobalVarName, balance);

   double maxDailyBalance = GlobalVariableGet(accMaxDailyBalanceGlobalVarName);
   double maxDailyEquity  = GlobalVariableGet(accMaxDailyEquityGlobalVarName);

   const datetime currentTime = TimeCurrent();
   MqlDateTime dateTime;
   TimeToStruct(currentTime, dateTime);
   if(dateTime.hour == Daily_Reset && currentTime - dailyDrawdownLastReset > 60 * 60)
     {
      dailyDrawdownLastReset = currentTime;
      GlobalVariableSet(accMaxDailyEquityGlobalVarName,  equity);
      GlobalVariableSet(accMaxDailyBalanceGlobalVarName, balance);
      GlobalVariableSet(accEntrySuspendGlobalVarName,    0);
      maxDailyBalance = balance;
      maxDailyEquity  = equity;
      entryProtectionMessage = "";
     }

   dailyLoss     = equity >= maxDailyBalance ? 0 : maxDailyBalance - equity;
   dailyDrawdown = 100 * (maxDailyEquity - equity) / maxDailyEquity;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void CheckAccountProtection(void)
  {
   const double accountEquity = AccountInfoDouble(ACCOUNT_EQUITY);

   if(Min_Equity > sigma && accountEquity <= Min_Equity)
     {
      ActivateProtection(StringFormat("Minimum equity protection activated. Equity: %.2f", accountEquity));
      return;
     }

   if(Max_Equity > sigma && accountEquity >= Max_Equity)
     {
      ActivateProtection(StringFormat("Maximum equity protection activated. Equity: %.2f", accountEquity));
      return;
     }

   if(MaxEquity_DD > sigma && equityDrawdownPercent >= MaxEquity_DD)
     {
      ActivateProtection(StringFormat("Max Equity DD protection activated! Equity DD: %.2f%%", equityDrawdownPercent));
      return;
     }

   if(MaxDailyLoss > sigma && dailyLoss >= MaxDailyLoss)
     {
      entryProtectionMessage = StringFormat("Max daily loss protection activated! Daily loss: %.2f\n", dailyLoss);
      GlobalVariableSet(accEntrySuspendGlobalVarName, 1);
      CloseAllPositions();
      return;
     }

   if(Max_Daily_DD > sigma && dailyDrawdown >= Max_Daily_DD)
     {
      entryProtectionMessage = StringFormat("Max daily drawdown protection activated! Daily DD: %.2f%%\n", dailyDrawdown);
      GlobalVariableSet(accEntrySuspendGlobalVarName, 1);
      CloseAllPositions();
      return;
     }
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void ActivateProtection(const string message)
  {
   CloseAllPositions();
   DeleteObjects();

   accountProtectionMessage  = StringFormat("\n%s\nBase Magic number: %d\n", robotTagline, Base_Magic_Number);
   accountProtectionMessage += message + "\n";
   accountProtectionMessage += "The current positions were closed." + "\n";
   accountProtectionMessage += "The Portfolio Expert was turned off.";
   Comment(accountProtectionMessage);
   Print(accountProtectionMessage);

   Sleep(20 * 1000);
   ExpertRemove();
   OnDeinit(0);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void SetPosStats(void)
  {
   posStatCount  = 0;
   posStatLots   = 0;
   posStatProfit = 0;

   for(int i = PositionsTotal() - 1; i >= 0; i -= 1)
     {
      const ulong ticket = PositionGetTicket(i);
      if(ticket == 0 || !PositionSelectByTicket(ticket))
         continue;

      const string posSymbol = PositionGetString (POSITION_SYMBOL);
      const long   posMagic  = PositionGetInteger(POSITION_MAGIC);
      if(posSymbol != _Symbol || !IsOwnDeal(posMagic))
         continue;

      posStatCount  += 1;
      posStatLots   += PositionGetDouble(POSITION_VOLUME);
      posStatProfit += PositionGetDouble(POSITION_PROFIT) +
                       PositionGetDouble(POSITION_SWAP);
     }
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void UpdateStats(void)
  {
   string statsInfo = StringFormat("\n%s\nBase Magic number: %d\n", robotTagline, Base_Magic_Number);

   if(entryProtectionMessage != "")
      statsInfo += "\n" + entryProtectionMessage;
   if(Pos_Stat)
      statsInfo += GetPositionStats() + "\n";
   if(Robot_Stats)
      statsInfo += GetRobotStats() + "\n";
   if(Max_Spread   > sigma || Max_OpenPos > sigma || Max_OpenLots > sigma || MaxDailyLoss > sigma ||
      Max_Daily_DD > sigma || Min_Equity  > sigma || Max_Equity   > sigma || MaxEquity_DD > sigma)
      statsInfo += GetProtectionInfo();
   if(News_Priority != NewsFilter_Disabled)
      statsInfo += GetNewsText() + "\n";

   RenderStats(statsInfo);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
string GetProtectionInfo(void)
  {
   string protectionInfo = "\n            ..:: Active Protections ::..\n";

   if(Max_Spread > sigma)
      protectionInfo += StringFormat("Max spread: %d, current: %d\n",
                                     Max_Spread, (int)MathRound((Ask() - Bid()) / _Point));
   if(Max_OpenPos > sigma)
      protectionInfo += StringFormat("Max open positions: %d, current: %d\n",
                                     Max_OpenPos, posStatCount);
   if(Max_OpenLots > sigma)
      protectionInfo += StringFormat("Max open lots: %.2f, current: %.2f\n",
                                     Max_OpenLots, posStatLots);
   if(MaxDailyLoss > sigma)
      protectionInfo += StringFormat("Max daily loss: %d, current: %.2f\n",
                                     MaxDailyLoss, dailyLoss);
   if(Max_Daily_DD > sigma)
      protectionInfo += StringFormat("Max daily drawdown: %.2f%%, current: %.2f%%\n",
                                     Max_Daily_DD, dailyDrawdown);
   if(Min_Equity > sigma)
      protectionInfo += StringFormat("Min equity: %d, current: %.2f\n",
                                     Min_Equity, AccountInfoDouble(ACCOUNT_EQUITY));
   if(MaxEquity_DD > sigma)
      protectionInfo += StringFormat("Max equity drawdown: %.2f%%, current: %.2f%%\n",
                                     MaxEquity_DD, equityDrawdownPercent);
   if(Max_Equity > sigma)
      protectionInfo += StringFormat("Max equity: %d, current: %.2f\n",
                                     Max_Equity, AccountInfoDouble(ACCOUNT_EQUITY));

   return protectionInfo;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
string GetPositionStats(void)
  {
   return "\n            ..:: Positions Stats ::..\n" +
          (posStatCount > 0 ? StringFormat("Positions: %d, Lots: %.2f, Profit %.2f",
                                           posStatCount, posStatLots, posStatProfit)
                            : "Positions: no open position");
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
string GetRobotStats(void)
  {
   return "\n            ..:: Trading Stats ::..\n" +
          "  1-day: " + GetRobotStatsDays(1) + "\n" +
          "  7-day: " + GetRobotStatsDays(7) + "\n" +
          "30-day: "  + GetRobotStatsDays(30);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
string GetRobotStatsDays(const int days)
  {
   double grossProfit     = 0;
   double grossLoss       = 0;
   int    histDealsCnt    = 0;
   double histDealsProfit = 0;

   const datetime timeCurrent = TimeCurrent();
   const datetime timeStart   = timeCurrent - days * PeriodSeconds(PERIOD_D1);
   HistorySelect(timeStart, timeCurrent);
   const int deals = HistoryDealsTotal();

   for(int i = 0; i < deals; i += 1)
     {
      const ulong ticket = HistoryDealGetTicket(i);
      if(ticket == 0)
         continue;
      if(HistoryDealGetString(ticket, DEAL_SYMBOL) != _Symbol)
         continue;

      // When we close a position manually it gets dealMagic = 0
      const long dealMagic = HistoryDealGetInteger(ticket, DEAL_MAGIC);
      if(dealMagic > 0 && !IsOwnDeal(dealMagic))
         continue;

      const long dealType = HistoryDealGetInteger(ticket, DEAL_TYPE);
      if(dealType != DEAL_TYPE_BUY && dealType != DEAL_TYPE_SELL)
         continue;
      const long dealEntry = HistoryDealGetInteger(ticket, DEAL_ENTRY);
      if(dealEntry != DEAL_ENTRY_OUT)
         continue;

      const double profit = HistoryDealGetDouble(ticket, DEAL_PROFIT) +
                            HistoryDealGetDouble(ticket, DEAL_SWAP)   +
                            HistoryDealGetDouble(ticket, DEAL_COMMISSION);

      histDealsProfit += profit;
      histDealsCnt    += 1;

      if(profit > sigma)
         grossProfit += profit;
      if(profit < -sigma)
         grossLoss -= profit;
     }

   const double profitFactor = grossLoss > sigma ? grossProfit / grossLoss : grossProfit;

   return StringFormat("Trades: %d, Profit: %.2f, Profit factor: %.2f",
                       histDealsCnt, histDealsProfit, profitFactor);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
string GetNewsInfo(void)
  {
   return "";
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void RenderStats(const string text)
  {
   string lines[];
   const int linesCount = StringSplit(text, '\n', lines);

   uint lineWidth, lineHeight;
   TextGetSize(robotTagline, lineWidth, lineHeight);

   if(maxRectangles == 0)
      RectLabelCreate(0, "Stats_background", 0, 0, 30, lineWidth,
                      linesCount * lineHeight, GetChartBackColor(0));

   const color foreColor = GetChartForeColor(0);
   for(int i = 0; i < linesCount; i += 1)
     {
      if(lines[i] == "")
         lines[i] = " ";
      string labelName = "label" + IntegerToString(i);
      if(i < maxLabels)
         LabelUpdate(0, labelName, lines[i]);
      else
         LabelCreate(0, labelName, 0, 10, 20 + i * lineHeight,
                     CORNER_LEFT_UPPER, lines[i], "Arial", 10, foreColor);

      uint lnWidth, lnHeight;
      TextGetSize(lines[i], lnWidth, lnHeight);
      if(lnWidth > lineWidth)
         lineWidth = lnWidth;
     }
   ObjectSetInteger(0, "Stats_background", OBJPROP_XSIZE,
                    (int) MathRound(lineWidth * 0.90));
   ObjectSetInteger(0, "Stats_background", OBJPROP_YSIZE,
                    linesCount * lineHeight);
   for(int i = linesCount; i < maxLabels; i += 1)
      LabelUpdate(0, "label" + IntegerToString(i), " ");
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void RectLabelCreate(
   const long             chartId    = 0,                 // chart's ID
   const string           name       = "RectLabel",       // label name
   const int              sub_window = 0,                 // sub-window index
   const int              x          = 0,                 // X coordinate
   const int              y          = 0,                 // Y coordinate
   const int              width      = 50,                // width
   const int              height     = 18,                // height
   const color            back_clr   = clrBlack,          // background color
   const ENUM_BORDER_TYPE border     = BORDER_SUNKEN,     // border type
   const ENUM_BASE_CORNER corner     = CORNER_LEFT_UPPER, // chart corner for anchoring
   const color            clr        = clrBlack,          // flat border color (Flat)
   const ENUM_LINE_STYLE  style      = STYLE_SOLID,       // flat border style
   const int              line_width = 0,                 // flat border width
   const bool             back       = false,             // in the background
   const bool             selection  = false,             // highlight to move
   const bool             hidden     = true,              // hidden in the object list
   const long             z_order    = 0)                 // priority for mouse click
  {
   if(!ObjectCreate(chartId, name, OBJ_RECTANGLE_LABEL, sub_window, 0, 0)) return;
   maxRectangles += 1;
   ObjectSetInteger(chartId, name, OBJPROP_XDISTANCE,   x);
   ObjectSetInteger(chartId, name, OBJPROP_YDISTANCE,   y);
   ObjectSetInteger(chartId, name, OBJPROP_XSIZE,       width);
   ObjectSetInteger(chartId, name, OBJPROP_YSIZE,       height);
   ObjectSetInteger(chartId, name, OBJPROP_BGCOLOR,     back_clr);
   ObjectSetInteger(chartId, name, OBJPROP_BORDER_TYPE, border);
   ObjectSetInteger(chartId, name, OBJPROP_CORNER,      corner);
   ObjectSetInteger(chartId, name, OBJPROP_COLOR,       clr);
   ObjectSetInteger(chartId, name, OBJPROP_STYLE,       style);
   ObjectSetInteger(chartId, name, OBJPROP_WIDTH,       line_width);
   ObjectSetInteger(chartId, name, OBJPROP_BACK,        back);
   ObjectSetInteger(chartId, name, OBJPROP_SELECTABLE,  selection);
   ObjectSetInteger(chartId, name, OBJPROP_SELECTED,    selection);
   ObjectSetInteger(chartId, name, OBJPROP_HIDDEN,      hidden);
   ObjectSetInteger(chartId, name, OBJPROP_ZORDER,      z_order);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void LabelCreate(
   const long              chartId=0,                // chart's ID
   const string            name="Label",             // label name
   const int               sub_window=0,             // sub-window index
   const int               x=0,                      // X coordinate
   const int               y=0,                      // Y coordinate
   const ENUM_BASE_CORNER  corner=CORNER_LEFT_UPPER, // chart corner for anchoring
   const string            text="Label",             // text
   const string            font="Arial",             // font
   const int               font_size=10,             // font size
   const color             clr=clrYellow,            // color
   const double            angle=0.0,                // text slope
   const ENUM_ANCHOR_POINT anchor=ANCHOR_LEFT_UPPER, // anchor type
   const bool              back=false,               // in the background
   const bool              selection=false,          // highlight to move
   const bool              hidden=true,              // hidden in the object list
   const long              z_order=0)                // priority for mouse click
  {
   if(!ObjectCreate(chartId, name, OBJ_LABEL, sub_window, 0 , 0)) return;
   maxLabels += 1;
   ObjectSetInteger(chartId, name, OBJPROP_XDISTANCE,  x);
   ObjectSetInteger(chartId, name, OBJPROP_YDISTANCE,  y);
   ObjectSetInteger(chartId, name, OBJPROP_CORNER,     corner);
   ObjectSetString( chartId, name, OBJPROP_TEXT,       text);
   ObjectSetString( chartId, name, OBJPROP_FONT,       font);
   ObjectSetString( chartId, name, OBJPROP_TOOLTIP,    "\n");
   ObjectSetInteger(chartId, name, OBJPROP_FONTSIZE,   font_size);
   ObjectSetDouble( chartId, name, OBJPROP_ANGLE,      angle);
   ObjectSetInteger(chartId, name, OBJPROP_ANCHOR,     anchor);
   ObjectSetInteger(chartId, name, OBJPROP_COLOR,      clr);
   ObjectSetInteger(chartId, name, OBJPROP_BACK,       back);
   ObjectSetInteger(chartId, name, OBJPROP_SELECTABLE, selection);
   ObjectSetInteger(chartId, name, OBJPROP_SELECTED,   selection);
   ObjectSetInteger(chartId, name, OBJPROP_HIDDEN,     hidden);
   ObjectSetInteger(chartId, name, OBJPROP_ZORDER,     z_order);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void LabelUpdate(int chartId, string name, string text)
  {
   ObjectSetString(chartId, name, OBJPROP_TEXT, text);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
color GetChartForeColor(const long chartId=0)
  {
   long foreColor = clrWhite;
   ChartGetInteger(chartId, CHART_COLOR_FOREGROUND, 0, foreColor);
   return (color) foreColor;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
color GetChartBackColor(const long chartId=0)
  {
   long backColor = clrBlack;
   ChartGetInteger(chartId, CHART_COLOR_BACKGROUND, 0, backColor);
   return (color) backColor;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void DeleteObjects(void)
  {
   if(ObjectFind(0, "Stats_background") == 0)
      ObjectDelete(0, "Stats_background");
   maxLabels = MathMax(maxLabels, 100);
   for(int i = 0; i < maxLabels; i++)
     {
      const string objName = "label" + IntegerToString(i);
      if(ObjectFind(0, objName) == 0)
         ObjectDelete(0, objName);
     }
   maxRectangles = 0;
   maxLabels     = 0;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void InitGlobalVariables(void)
  {
   if(MQLInfoInteger(MQL_TESTER)) return;

   const string accountNumberText = (string)AccountInfoInteger(ACCOUNT_LOGIN);

   accMaxEquityGlobalVarName       = "Max_Equity_"         + accountNumberText;
   accMaxDailyBalanceGlobalVarName = "Max_Daily_Balance_"  + accountNumberText;
   accMaxDailyEquityGlobalVarName  = "Max_Daily_Equity_"   + accountNumberText;
   accEntrySuspendGlobalVarName    = "Is_Entry_Suspended_" + accountNumberText;

   if(!GlobalVariableCheck(accMaxEquityGlobalVarName))
      GlobalVariableSet(accMaxEquityGlobalVarName, AccountInfoDouble(ACCOUNT_EQUITY));
   if(!GlobalVariableCheck(accMaxDailyBalanceGlobalVarName))
      GlobalVariableSet(accMaxDailyBalanceGlobalVarName, AccountInfoDouble(ACCOUNT_BALANCE));
   if(!GlobalVariableCheck(accMaxDailyEquityGlobalVarName))
      GlobalVariableSet(accMaxDailyEquityGlobalVarName, AccountInfoDouble(ACCOUNT_EQUITY));
   if(!GlobalVariableCheck(accEntrySuspendGlobalVarName))
      GlobalVariableSet(accEntrySuspendGlobalVarName, 0);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void LoadNews(void)
  {
   loadNewsError = "";
   string error = "";
   const string newsContent = GetNewsContent(error);
   if(error != "")
     {
      loadNewsError = error;
      return;
     }

   if(newsContent == "")
     {
      loadNewsError = StringFormat("Cannot load news. Last error code: %d", GetLastError());
      return;
     }

   ParseNewsContent(newsContent, error);

   if(error != "")
      loadNewsError = error;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void ParseNewsContent(const string newsContent, string &error)
  {
   string lines[];
   const int linesLen = StringSplit(newsContent, '\n', lines);

   if(linesLen == -1)
     {
      error = "Cannot parse the news feed";
      return;
     }

   ArrayResize(newsRecords, linesLen);

   for(int i = 0; i < linesLen; i += 1)
     {
      string fields[];
      const int fieldsLen = StringSplit(lines[i], ';', fields);

      if(fieldsLen != 4)
        {
         error = "Cannot parse the news feed records";
         return;
        }

      NewsRecord record;
      record.time     = (datetime) StringToInteger(fields[0]);
      record.priority = fields[1];
      record.currency = fields[2];
      record.title    = fields[3];

      newsRecords[i] = record;
     }
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
string GetNewsContent(string &error)
  {
   const string url = "https://forexsb.com/updates/news-feed.txt";

   char   reqBody[], resData[];
   string headers;

   ResetLastError();

   const int resCode  = WebRequest("GET", url, "", 10000, reqBody, resData, headers);
   const int resError = GetLastError();

   isNewsFeedOk = false;
   if(resError == ERR_FUNCTION_NOT_ALLOWED)
     {
      error = "News Filter cannot access the news server.\n" +
              "Follow these steps to fix it:\n"
              " - open the \"Tool\" -> \"Options\" panel\n" +
              " - go to the \"Expert Advisors\" tab\n" +
              " - enable the \"Allow WebRequest for the listed URL:\" option.\n" +
              " - add \"https://forexsb.com\" in a field below.";
      return "";
     }

   if(resError != ERR_SUCCESS)
     {
      error = StringFormat("News Filter connection error! Error code: %d", resError);
      return "";
     }

   if(resCode != 200)
     {
      error = StringFormat("Response code: %d", resCode);
      return "";
     }

   isNewsFeedOk = true;
   return CharArrayToString(resData, 0, ArraySize(resData), CP_UTF8);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
string GetNewsText(void)
  {
   string newsText = "\n            ..:: Upcoming News ::..\n";
   if(loadNewsError != "") return newsText + loadNewsError;

   const datetime timeNow   = TimeGMT();
   const datetime timeShift = (datetime) MathRound((TimeLocal() - timeNow) / 3600.0) * 3600;
   const int      newsCount = ArraySize(newsRecords);

   for(int i = 0, count = 0; i < newsCount && count < News_ViewCount; i += 1)
     {
      const NewsRecord newsRecord = newsRecords[i];

      if(newsRecord.time < timeNow - News_AfterHigh * 60 ||
         !NewsIsAcceptedCurrency(newsRecord) ||
         !NewsIsAcceptedPriority(newsRecord))
         continue;

      const string newLine  = count > 0 ? "\n" : "";
      const string newsTime = TimeToString(newsRecord.time + timeShift, TIME_DATE | TIME_MINUTES);
      const string priority = newsRecord.priority == "high" ? "[high]" : "[med]";
      const string text     = StringFormat("%s%s %s %s %s", newLine, priority, newsTime,
                                           newsRecord.currency, newsRecord.title);
      StringAdd(newsText, text);
      count += 1;
     }

   return newsText;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool NewsIsAcceptedCurrency(const NewsRecord &newsRecord)
  {
   for(int i = 0; i < ArraySize(newsCurrencies); i += 1)
      if(newsCurrencies[i] == newsRecord.currency)
         return true;

   return false;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool NewsIsAcceptedPriority(const NewsRecord &newsRecord)
  {
   return (News_Priority == NewsFilter_HighAndMedium) ||
          (News_Priority == NewsFilter_HighOnly && newsRecord.priority == "high");
  }
//+------------------------------------------------------------------+
//| Gets the index of an active news or -1                           |
//+------------------------------------------------------------------+
int NewsFilterActive(void)
  {
   if(News_Priority == NewsFilter_Disabled)
      return -1;

   const datetime timeUtc = TimeGMT();
   const int      newsLen = ArraySize(newsRecords);
   for(int i = 0; i < newsLen; i++)
     {
      const NewsRecord news = newsRecords[i];
      if(!NewsIsAcceptedCurrency(news) || !NewsIsAcceptedPriority(news))
         continue;

      if(news.priority == "high" &&
         news.time - News_BeforeHigh * 60 - 15 <= timeUtc &&
         news.time + News_AfterHigh  * 60 - 15 >= timeUtc)
         return i;

      if(news.priority == "medium" &&
         news.time - News_BeforeMedium * 60 - 15 <= timeUtc &&
         news.time + News_AfterMedium  * 60 - 15 >= timeUtc)
         return i;
     }

   return -1;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void ParseNewsCurrenciesText(void)
  {
   string parts[], parsed[];
   const int partsLen = StringSplit(News_Currencies, ',', parts);
   ArrayResize(parsed, partsLen);
   int len = 0;
   for(int i = 0; i < partsLen; i += 1)
     {
      string part = parts[i];
      StringReplace(part, " ", "");
      if(StringLen(part) > 0)
        {
         parsed[i] = part;
         len += 1;
        }
     }

   ArrayResize(newsCurrencies, len);
   for(int i = 0; i < len; i += 1)
      newsCurrencies[i] = parsed[i];
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int GetMagicNumber(const int strategyIndex)
  {
   return 1000 * Base_Magic_Number + strategyIndex;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool IsOwnDeal(const long dealMagic)
  {
   const long minMagicNumber = GetMagicNumber(0);
   const long maxMagicNumber = GetMagicNumber(strategiesCount);
   return dealMagic >= minMagicNumber && dealMagic < maxMagicNumber;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int OrderDirectionToCommand(OrderDirection dir)
  {
   return dir == ORDER_DIRECTION_BUY  ? OP_BUY
        : dir == ORDER_DIRECTION_SELL ? OP_SELL
                                      : OP_FLAT;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void InitIndicatorHandlers(void)
  {
   TesterHideIndicators(true);
   // Bears Power (24), Level: 0.0000
   indHandlers[0][0][0] = iBearsPower(NULL, 0, 24);
   // Moving Average (Simple, Close, 46, 0)
   indHandlers[0][1][0] = iMA(NULL, 0, 46, 0, MODE_SMA, PRICE_CLOSE);
   // MACD Signal (Close, 25, 50, 13)
   indHandlers[0][2][0] = iMACD(NULL, 0, 25, 50, 13, PRICE_CLOSE);
   // MACD Signal (Close, 13, 49, 8)
   indHandlers[0][3][0] = iMACD(NULL, 0, 13, 49, 8, PRICE_CLOSE);
   // Candle Color (18, 1)
   indHandlers[0][4][0] = -1;
   // Stochastic Signal (5, 4, 3)
   indHandlers[0][5][0] = iStochastic(NULL, 0, 5, 4, 3, MODE_SMA, STO_LOWHIGH);
   // Alligator (Smoothed, Median, 36, 20, 20, 6, 6, 1)
   indHandlers[1][0][0] = iAlligator(NULL, 0, 36, 20, 20, 6, 6, 1, MODE_SMMA, PRICE_MEDIAN);
   // Stochastic (4, 4, 4), Level: 48.0
   indHandlers[1][1][0] = iStochastic(NULL, 0, 4, 4, 4, MODE_SMA, 0);
   // Moving Average (Simple, Close, 45, 0)
   indHandlers[1][2][0] = iMA(NULL, 0, 45, 0, MODE_SMA, PRICE_CLOSE);
   // Bulls Power (2), Level: -69.2000
   indHandlers[1][3][0] = iBullsPower(NULL, 0, 2);
   // Moving Average of Oscillator (Close, 10, 35, 12), Level: 0.0000
   indHandlers[2][0][0] = iOsMA(NULL, 0, 10, 35, 12, PRICE_CLOSE);
   // Candle Color (24, 3)
   indHandlers[2][1][0] = -1;
   // MACD (Close, 24, 36, 9)
   indHandlers[2][2][0] = iMACD(NULL, 0, 24, 36, 9, PRICE_CLOSE);
   // ADX (27)
   indHandlers[2][3][0] = iADX(NULL, 0, 27);
   // Moving Average of Oscillator (Close, 10, 35, 12), Level: 0.0000
   indHandlers[3][0][0] = iOsMA(NULL, 0, 10, 35, 12, PRICE_CLOSE);
   // Candle Color (24, 3)
   indHandlers[3][1][0] = -1;
   // MACD (Close, 24, 36, 9)
   indHandlers[3][2][0] = iMACD(NULL, 0, 24, 36, 9, PRICE_CLOSE);
   // Stochastic Signal (5, 4, 3)
   indHandlers[3][3][0] = iStochastic(NULL, 0, 5, 4, 3, MODE_SMA, STO_LOWHIGH);
   // MACD Signal (Close, 18, 31, 6)
   indHandlers[4][0][0] = iMACD(NULL, 0, 18, 31, 6, PRICE_CLOSE);
   // Moving Average (Simple, Close, 4, 0)
   indHandlers[4][1][0] = iMA(NULL, 0, 4, 0, MODE_SMA, PRICE_CLOSE);
   // DeMarker (11)
   indHandlers[4][2][0] = iDeMarker(NULL, 0, 11);
   // Awesome Oscillator
   indHandlers[4][3][0] = iAO(NULL, 0);
   // Moving Averages Crossover (Simple, Simple, 16, 50)
   indHandlers[5][0][0] = iMA(NULL, 0, 16, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 16, 50)
   indHandlers[5][0][1] = iMA(NULL, 0, 50, 0, MODE_SMA, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 12)
   indHandlers[5][1][0] = iCCI(NULL, 0, 12, PRICE_TYPICAL);
   // Moving Average (Simple, Close, 1, 0)
   indHandlers[5][2][0] = iMA(NULL, 0, 1, 0, MODE_SMA, PRICE_CLOSE);
   // Bears Power (15), Level: -33.9000
   indHandlers[5][3][0] = iBearsPower(NULL, 0, 15);
   // Stochastic Signal (12, 7, 9)
   indHandlers[5][4][0] = iStochastic(NULL, 0, 12, 7, 9, MODE_SMA, STO_LOWHIGH);
   // Alligator (Smoothed, Median, 33, 16, 16, 9, 9, 4)
   indHandlers[6][0][0] = iAlligator(NULL, 0, 33, 16, 16, 9, 9, 4, MODE_SMMA, PRICE_MEDIAN);
   // RSI (Close, 4), Level: 75
   indHandlers[6][1][0] = iRSI(NULL, 0, 4, PRICE_CLOSE);
   // Moving Average of Oscillator (Close, 17, 21, 12), Level: 0.0000
   indHandlers[6][2][0] = iOsMA(NULL, 0, 17, 21, 12, PRICE_CLOSE);
   // Bears Power (35), Level: 0.0000
   indHandlers[6][3][0] = iBearsPower(NULL, 0, 35);
   // MACD (Close, 15, 28, 9)
   indHandlers[6][4][0] = iMACD(NULL, 0, 15, 28, 9, PRICE_CLOSE);
   // RSI (Close, 12), Level: 44
   indHandlers[7][0][0] = iRSI(NULL, 0, 12, PRICE_CLOSE);
   // Envelopes (Close, Simple, 11, 0.65)
   indHandlers[7][1][0] = iEnvelopes(NULL, 0, 11, 0, MODE_SMA, PRICE_CLOSE, 0.65);
   // Bears Power (35), Level: 0.0000
   indHandlers[7][2][0] = iBearsPower(NULL, 0, 35);
   // Average True Range (43)
   indHandlers[7][3][0] = iATR(NULL, 0, 43);
   // Stochastic Signal (10, 8, 5)
   indHandlers[8][0][0] = iStochastic(NULL, 0, 10, 8, 5, MODE_SMA, STO_LOWHIGH);
   // MACD (Close, 19, 33, 9)
   indHandlers[8][1][0] = iMACD(NULL, 0, 19, 33, 9, PRICE_CLOSE);
   // Accelerator Oscillator, Level: -1.5000
   indHandlers[8][2][0] = iAC(NULL, 0);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[8][3][0] = iAC(NULL, 0);
   // Average True Range (43)
   indHandlers[8][4][0] = iATR(NULL, 0, 43);
   // Momentum (Close, 21)
   indHandlers[8][5][0] = iMomentum(NULL, 0, 21, PRICE_CLOSE);
   // Directional Indicators (18)
   indHandlers[8][6][0] = iADX(NULL, 0, 18);
   // Moving Averages Crossover (Simple, Simple, 12, 21)
   indHandlers[9][0][0] = iMA(NULL, 0, 12, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 12, 21)
   indHandlers[9][0][1] = iMA(NULL, 0, 21, 0, MODE_SMA, PRICE_CLOSE);
   // Bulls Power (48), Level: 0.0000
   indHandlers[9][1][0] = iBullsPower(NULL, 0, 48);
   // Bulls Power (9), Level: 0.0000
   indHandlers[9][2][0] = iBullsPower(NULL, 0, 9);
   // Commodity Channel Index (Typical, 35)
   indHandlers[9][3][0] = iCCI(NULL, 0, 35, PRICE_TYPICAL);
   // Alligator (Smoothed, Median, 32, 15, 15, 5, 5, 4)
   indHandlers[10][0][0] = iAlligator(NULL, 0, 32, 15, 15, 5, 5, 4, MODE_SMMA, PRICE_MEDIAN);
   // Stochastic Signal (15, 13, 5)
   indHandlers[10][1][0] = iStochastic(NULL, 0, 15, 13, 5, MODE_SMA, STO_LOWHIGH);
   // Candle Color (31, 3)
   indHandlers[10][2][0] = -1;
   // ADX (12)
   indHandlers[10][3][0] = iADX(NULL, 0, 12);
   // Moving Average (Simple, Close, 21, 0)
   indHandlers[10][4][0] = iMA(NULL, 0, 21, 0, MODE_SMA, PRICE_CLOSE);
   // Candle Color (13, 4)
   indHandlers[11][0][0] = -1;
   // Williams' Percent Range (24), Level: -23.0
   indHandlers[11][1][0] = iWPR(NULL, 0, 24);
   // MACD Signal (Close, 20, 32, 8)
   indHandlers[11][2][0] = iMACD(NULL, 0, 20, 32, 8, PRICE_CLOSE);
   // Stochastic (9, 6, 7)
   indHandlers[11][3][0] = iStochastic(NULL, 0, 9, 6, 7, MODE_SMA, 0);
   // Moving Average of Oscillator (Close, 18, 36, 13), Level: 0.0000
   indHandlers[11][4][0] = iOsMA(NULL, 0, 18, 36, 13, PRICE_CLOSE);
   // Bulls Power (17)
   indHandlers[11][5][0] = iBullsPower(NULL, 0, 17);
   // Momentum (Close, 43), Level: 98.0000
   indHandlers[12][0][0] = iMomentum(NULL, 0, 43, PRICE_CLOSE);
   // Williams' Percent Range (40)
   indHandlers[12][1][0] = iWPR(NULL, 0, 40);
   // Stochastic Signal (15, 7, 6)
   indHandlers[12][2][0] = iStochastic(NULL, 0, 15, 7, 6, MODE_SMA, STO_LOWHIGH);
   // Pin Bar (8, 35)
   indHandlers[13][0][0] = -1;
   // MACD Signal (Close, 23, 26, 6)
   indHandlers[13][1][0] = iMACD(NULL, 0, 23, 26, 6, PRICE_CLOSE);
   // Moving Average (Simple, Close, 19, 0)
   indHandlers[13][2][0] = iMA(NULL, 0, 19, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Average (Simple, Close, 41, 0)
   indHandlers[13][3][0] = iMA(NULL, 0, 41, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic (14, 10, 5), Level: 14.0
   indHandlers[14][0][0] = iStochastic(NULL, 0, 14, 10, 5, MODE_SMA, 0);
   // Moving Average (Simple, Close, 35, 0)
   indHandlers[14][1][0] = iMA(NULL, 0, 35, 0, MODE_SMA, PRICE_CLOSE);
   // MACD Signal (Close, 7, 25, 8)
   indHandlers[14][2][0] = iMACD(NULL, 0, 7, 25, 8, PRICE_CLOSE);
   // Stochastic (5, 1, 5)
   indHandlers[14][3][0] = iStochastic(NULL, 0, 5, 1, 5, MODE_SMA, 0);
   // Envelopes (Close, Simple, 11, 0.67)
   indHandlers[15][0][0] = iEnvelopes(NULL, 0, 11, 0, MODE_SMA, PRICE_CLOSE, 0.67);
   // Bollinger Bands (Close, 8, 2.02)
   indHandlers[15][1][0] = iBands(NULL, 0, 8, 0, 2.02, PRICE_CLOSE);
   // DeMarker (23), Level: 0.46
   indHandlers[15][2][0] = iDeMarker(NULL, 0, 23);
   // Momentum (Close, 50)
   indHandlers[15][3][0] = iMomentum(NULL, 0, 50, PRICE_CLOSE);
   // Candle Color (36, 1)
   indHandlers[16][0][0] = -1;
   // Envelopes (Close, Simple, 2, 0.41)
   indHandlers[16][1][0] = iEnvelopes(NULL, 0, 2, 0, MODE_SMA, PRICE_CLOSE, 0.41);
   // ADX (4), Level: 21.0
   indHandlers[16][2][0] = iADX(NULL, 0, 4);
   // Candle Color (42, 3)
   indHandlers[16][3][0] = -1;
   // Alligator (Smoothed, Median, 27, 26, 26, 13, 13, 3)
   indHandlers[16][4][0] = iAlligator(NULL, 0, 27, 26, 26, 13, 13, 3, MODE_SMMA, PRICE_MEDIAN);
   // RSI (Close, 50), Level: 30
   indHandlers[17][0][0] = iRSI(NULL, 0, 50, PRICE_CLOSE);
   // DeMarker (23), Level: 0.14
   indHandlers[17][1][0] = iDeMarker(NULL, 0, 23);
   // DeMarker (9)
   indHandlers[17][2][0] = iDeMarker(NULL, 0, 9);
   // MACD Signal (Close, 20, 25, 6)
   indHandlers[17][3][0] = iMACD(NULL, 0, 20, 25, 6, PRICE_CLOSE);
   // Moving Average (Simple, Close, 23, 0)
   indHandlers[18][0][0] = iMA(NULL, 0, 23, 0, MODE_SMA, PRICE_CLOSE);
   // Williams' Percent Range (41)
   indHandlers[18][1][0] = iWPR(NULL, 0, 41);
   // ADX (4), Level: 21.0
   indHandlers[18][2][0] = iADX(NULL, 0, 4);
   // Candle Color (42, 3)
   indHandlers[18][3][0] = -1;
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[18][4][0] = iAC(NULL, 0);
   // Alligator (Smoothed, Median, 15, 13, 13, 11, 11, 3)
   indHandlers[19][0][0] = iAlligator(NULL, 0, 15, 13, 13, 11, 11, 3, MODE_SMMA, PRICE_MEDIAN);
   // Williams' Percent Range (27), Level: -2.0
   indHandlers[19][1][0] = iWPR(NULL, 0, 27);
   // Stochastic (9, 1, 7)
   indHandlers[19][2][0] = iStochastic(NULL, 0, 9, 1, 7, MODE_SMA, 0);
   // Standard Deviation (Close, Simple, 27)
   indHandlers[19][3][0] = iStdDev(NULL, 0, 27, 0, MODE_SMA, PRICE_CLOSE);
   // RSI (Close, 41), Level: 42
   indHandlers[19][4][0] = iRSI(NULL, 0, 41, PRICE_CLOSE);
   // Envelopes (Close, Simple, 2, 0.46)
   indHandlers[19][5][0] = iEnvelopes(NULL, 0, 2, 0, MODE_SMA, PRICE_CLOSE, 0.46);
   // Moving Average of Oscillator (Close, 20, 38, 12), Level: 3.6000
   indHandlers[20][0][0] = iOsMA(NULL, 0, 20, 38, 12, PRICE_CLOSE);
   // Moving Average (Simple, Close, 31, 0)
   indHandlers[20][1][0] = iMA(NULL, 0, 31, 0, MODE_SMA, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 29, 9, 9, 8, 8, 5)
   indHandlers[20][2][0] = iAlligator(NULL, 0, 29, 9, 9, 8, 8, 5, MODE_SMMA, PRICE_MEDIAN);
   // Pin Bar (9, 48)
   indHandlers[21][0][0] = -1;
   // Candle Color (18, 3)
   indHandlers[21][1][0] = -1;
   // Bulls Power (36), Level: 20.1000
   indHandlers[22][0][0] = iBullsPower(NULL, 0, 36);
   // Standard Deviation (Close, Simple, 34)
   indHandlers[22][1][0] = iStdDev(NULL, 0, 34, 0, MODE_SMA, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 4), Level: -48
   indHandlers[22][2][0] = iCCI(NULL, 0, 4, PRICE_TYPICAL);
   // Bears Power (17), Level: -5.5200
   indHandlers[22][3][0] = iBearsPower(NULL, 0, 17);
   // MACD Signal (Close, 13, 27, 10)
   indHandlers[22][4][0] = iMACD(NULL, 0, 13, 27, 10, PRICE_CLOSE);
   // Envelopes (Close, Simple, 22, 0.97)
   indHandlers[23][0][0] = iEnvelopes(NULL, 0, 22, 0, MODE_SMA, PRICE_CLOSE, 0.97);
   // Candle Color (19, 2)
   indHandlers[23][1][0] = -1;
   // Momentum (Close, 4), Level: 100.0000
   indHandlers[24][0][0] = iMomentum(NULL, 0, 4, PRICE_CLOSE);
   // Moving Average of Oscillator (Close, 7, 44, 12)
   indHandlers[24][1][0] = iOsMA(NULL, 0, 7, 44, 12, PRICE_CLOSE);
   // Momentum (Close, 35)
   indHandlers[24][2][0] = iMomentum(NULL, 0, 35, PRICE_CLOSE);
   // Momentum (Close, 47)
   indHandlers[24][3][0] = iMomentum(NULL, 0, 47, PRICE_CLOSE);
   // Moving Average of Oscillator (Close, 10, 32, 10)
   indHandlers[24][4][0] = iOsMA(NULL, 0, 10, 32, 10, PRICE_CLOSE);
   // Williams' Percent Range (28)
   indHandlers[24][5][0] = iWPR(NULL, 0, 28);
   // Momentum (Close, 28), Level: 102.0000
   indHandlers[25][0][0] = iMomentum(NULL, 0, 28, PRICE_CLOSE);
   // Standard Deviation (Close, Simple, 32)
   indHandlers[25][1][0] = iStdDev(NULL, 0, 32, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic Signal (2, 1, 1)
   indHandlers[25][2][0] = iStochastic(NULL, 0, 2, 1, 1, MODE_SMA, STO_LOWHIGH);
   // Momentum (Close, 17), Level: 98.0000
   indHandlers[26][0][0] = iMomentum(NULL, 0, 17, PRICE_CLOSE);
   // Bears Power (37), Level: -4.5900
   indHandlers[26][1][0] = iBearsPower(NULL, 0, 37);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[26][2][0] = iAO(NULL, 0);
   // Williams' Percent Range (6)
   indHandlers[26][3][0] = iWPR(NULL, 0, 6);
   // Momentum (Close, 17), Level: 96.0000
   indHandlers[26][4][0] = iMomentum(NULL, 0, 17, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 17, 38)
   indHandlers[26][5][0] = iMA(NULL, 0, 17, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 17, 38)
   indHandlers[26][5][1] = iMA(NULL, 0, 38, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 15, 28)
   indHandlers[27][0][0] = iMA(NULL, 0, 15, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 15, 28)
   indHandlers[27][0][1] = iMA(NULL, 0, 28, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic Signal (8, 4, 6)
   indHandlers[27][1][0] = iStochastic(NULL, 0, 8, 4, 6, MODE_SMA, STO_LOWHIGH);
   // RSI (Close, 44)
   indHandlers[27][2][0] = iRSI(NULL, 0, 44, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 43), Level: 0
   indHandlers[27][3][0] = iCCI(NULL, 0, 43, PRICE_TYPICAL);
   // MACD Signal (Close, 20, 36, 4)
   indHandlers[27][4][0] = iMACD(NULL, 0, 20, 36, 4, PRICE_CLOSE);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[27][5][0] = iAC(NULL, 0);
   // Moving Average of Oscillator (Close, 23, 25, 7), Level: 0.0000
   indHandlers[27][6][0] = iOsMA(NULL, 0, 23, 25, 7, PRICE_CLOSE);
   // RSI (Close, 9), Level: 30
   indHandlers[28][0][0] = iRSI(NULL, 0, 9, PRICE_CLOSE);
   // Directional Indicators (16)
   indHandlers[28][1][0] = iADX(NULL, 0, 16);
   // RSI (Close, 14), Level: 36
   indHandlers[28][2][0] = iRSI(NULL, 0, 14, PRICE_CLOSE);
   // MACD (Close, 6, 43, 9)
   indHandlers[28][3][0] = iMACD(NULL, 0, 6, 43, 9, PRICE_CLOSE);
   // Bears Power (40)
   indHandlers[28][4][0] = iBearsPower(NULL, 0, 40);
   // Accelerator Oscillator
   indHandlers[28][5][0] = iAC(NULL, 0);
   // Awesome Oscillator
   indHandlers[28][6][0] = iAO(NULL, 0);
   // Bulls Power (33)
   indHandlers[29][0][0] = iBullsPower(NULL, 0, 33);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[29][1][0] = iAO(NULL, 0);
   // Moving Averages Crossover (Simple, Simple, 13, 31)
   indHandlers[29][2][0] = iMA(NULL, 0, 13, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 13, 31)
   indHandlers[29][2][1] = iMA(NULL, 0, 31, 0, MODE_SMA, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 33, 14, 14, 3, 3, 1)
   indHandlers[29][3][0] = iAlligator(NULL, 0, 33, 14, 14, 3, 3, 1, MODE_SMMA, PRICE_MEDIAN);
   // Stochastic Signal (6, 2, 1)
   indHandlers[29][4][0] = iStochastic(NULL, 0, 6, 2, 1, MODE_SMA, STO_LOWHIGH);
   // Moving Averages Crossover (Simple, Simple, 8, 10)
   indHandlers[29][5][0] = iMA(NULL, 0, 8, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 8, 10)
   indHandlers[29][5][1] = iMA(NULL, 0, 10, 0, MODE_SMA, PRICE_CLOSE);
   // Bears Power (9)
   indHandlers[29][6][0] = iBearsPower(NULL, 0, 9);
   // Moving Average (Simple, Close, 31, 0)
   indHandlers[29][7][0] = iMA(NULL, 0, 31, 0, MODE_SMA, PRICE_CLOSE);
   // Momentum (Close, 29), Level: 102.0000
   indHandlers[30][0][0] = iMomentum(NULL, 0, 29, PRICE_CLOSE);
   // Bulls Power (49)
   indHandlers[30][1][0] = iBullsPower(NULL, 0, 49);
   // Directional Indicators (21)
   indHandlers[30][2][0] = iADX(NULL, 0, 21);
   // Standard Deviation (Close, Simple, 45)
   indHandlers[30][3][0] = iStdDev(NULL, 0, 45, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Average of Oscillator (Close, 12, 32, 7), Level: 0.0000
   indHandlers[30][4][0] = iOsMA(NULL, 0, 12, 32, 7, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 11, 46)
   indHandlers[31][0][0] = iMA(NULL, 0, 11, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 11, 46)
   indHandlers[31][0][1] = iMA(NULL, 0, 46, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Average of Oscillator (Close, 13, 22, 13)
   indHandlers[31][1][0] = iOsMA(NULL, 0, 13, 22, 13, PRICE_CLOSE);
   // Envelopes (Close, Simple, 8, 0.27)
   indHandlers[31][2][0] = iEnvelopes(NULL, 0, 8, 0, MODE_SMA, PRICE_CLOSE, 0.27);
   // Moving Averages Crossover (Simple, Simple, 14, 22)
   indHandlers[32][0][0] = iMA(NULL, 0, 14, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 14, 22)
   indHandlers[32][0][1] = iMA(NULL, 0, 22, 0, MODE_SMA, PRICE_CLOSE);
   // ADX (14), Level: 17.0
   indHandlers[32][1][0] = iADX(NULL, 0, 14);
   // Moving Averages Crossover (Simple, Simple, 7, 26)
   indHandlers[32][2][0] = iMA(NULL, 0, 7, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 7, 26)
   indHandlers[32][2][1] = iMA(NULL, 0, 26, 0, MODE_SMA, PRICE_CLOSE);
   // Standard Deviation (Close, Simple, 4)
   indHandlers[33][0][0] = iStdDev(NULL, 0, 4, 0, MODE_SMA, PRICE_CLOSE);
   // ADX (35)
   indHandlers[33][1][0] = iADX(NULL, 0, 35);
   // MACD (Close, 9, 18, 9)
   indHandlers[33][2][0] = iMACD(NULL, 0, 9, 18, 9, PRICE_CLOSE);
   // MACD Signal (Close, 12, 46, 8)
   indHandlers[33][3][0] = iMACD(NULL, 0, 12, 46, 8, PRICE_CLOSE);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[33][4][0] = iAO(NULL, 0);
   // Stochastic Signal (16, 14, 11)
   indHandlers[33][5][0] = iStochastic(NULL, 0, 16, 14, 11, MODE_SMA, STO_LOWHIGH);
   // Commodity Channel Index (Typical, 38)
   indHandlers[34][0][0] = iCCI(NULL, 0, 38, PRICE_TYPICAL);
   // MACD Signal (Close, 19, 33, 9)
   indHandlers[34][1][0] = iMACD(NULL, 0, 19, 33, 9, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 35, 15, 15, 5, 5, 2)
   indHandlers[34][2][0] = iAlligator(NULL, 0, 35, 15, 15, 5, 5, 2, MODE_SMMA, PRICE_MEDIAN);
   // MACD (Close, 8, 44, 9)
   indHandlers[34][3][0] = iMACD(NULL, 0, 8, 44, 9, PRICE_CLOSE);
   // Average True Range (15), Level: 19.6000
   indHandlers[34][4][0] = iATR(NULL, 0, 15);
   // Moving Average of Oscillator (Close, 18, 43, 4), Level: 0.0000
   indHandlers[34][5][0] = iOsMA(NULL, 0, 18, 43, 4, PRICE_CLOSE);
   // Standard Deviation (Close, Simple, 10)
   indHandlers[34][6][0] = iStdDev(NULL, 0, 10, 0, MODE_SMA, PRICE_CLOSE);
   // Bulls Power (36), Level: 0.0000
   indHandlers[34][7][0] = iBullsPower(NULL, 0, 36);
   // DeMarker (8), Level: 0.56
   indHandlers[35][0][0] = iDeMarker(NULL, 0, 8);
   // Envelopes (Close, Simple, 3, 0.58)
   indHandlers[35][1][0] = iEnvelopes(NULL, 0, 3, 0, MODE_SMA, PRICE_CLOSE, 0.58);
   // Moving Average (Simple, Close, 20, 0)
   indHandlers[35][2][0] = iMA(NULL, 0, 20, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic (9, 6, 2)
   indHandlers[35][3][0] = iStochastic(NULL, 0, 9, 6, 2, MODE_SMA, 0);
   // Moving Average (Simple, Close, 24, 0)
   indHandlers[36][0][0] = iMA(NULL, 0, 24, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic Signal (8, 5, 2)
   indHandlers[36][1][0] = iStochastic(NULL, 0, 8, 5, 2, MODE_SMA, STO_LOWHIGH);
   // Moving Average of Oscillator (Close, 17, 41, 10), Level: 0.0000
   indHandlers[36][2][0] = iOsMA(NULL, 0, 17, 41, 10, PRICE_CLOSE);
   // RSI (Close, 10), Level: 26
   indHandlers[36][3][0] = iRSI(NULL, 0, 10, PRICE_CLOSE);
   // Average True Range (1)
   indHandlers[36][4][0] = iATR(NULL, 0, 1);
   // ADX (38), Level: 34.0
   indHandlers[37][0][0] = iADX(NULL, 0, 38);
   // Moving Average (Simple, Close, 18, 0)
   indHandlers[37][1][0] = iMA(NULL, 0, 18, 0, MODE_SMA, PRICE_CLOSE);
   // Williams' Percent Range (29), Level: -65.0
   indHandlers[37][2][0] = iWPR(NULL, 0, 29);
   // Stochastic (12, 5, 8), Level: 49.0
   indHandlers[37][3][0] = iStochastic(NULL, 0, 12, 5, 8, MODE_SMA, 0);
   // Envelopes (Close, Simple, 46, 0.98)
   indHandlers[38][0][0] = iEnvelopes(NULL, 0, 46, 0, MODE_SMA, PRICE_CLOSE, 0.98);
   // Moving Average of Oscillator (Close, 5, 33, 4), Level: 0.0000
   indHandlers[38][1][0] = iOsMA(NULL, 0, 5, 33, 4, PRICE_CLOSE);
   // Stochastic Signal (10, 7, 4)
   indHandlers[38][2][0] = iStochastic(NULL, 0, 10, 7, 4, MODE_SMA, STO_LOWHIGH);
   // Envelopes (Close, Simple, 48, 0.94)
   indHandlers[39][0][0] = iEnvelopes(NULL, 0, 48, 0, MODE_SMA, PRICE_CLOSE, 0.94);
   // DeMarker (10)
   indHandlers[39][1][0] = iDeMarker(NULL, 0, 10);
   // Awesome Oscillator
   indHandlers[39][2][0] = iAO(NULL, 0);
   // Bears Power (15)
   indHandlers[39][3][0] = iBearsPower(NULL, 0, 15);
   // Average True Range (17), Level: 7.0000
   indHandlers[39][4][0] = iATR(NULL, 0, 17);
   // Bears Power (26)
   indHandlers[39][5][0] = iBearsPower(NULL, 0, 26);
   // Stochastic Signal (8, 2, 5)
   indHandlers[40][0][0] = iStochastic(NULL, 0, 8, 2, 5, MODE_SMA, STO_LOWHIGH);
   // Envelopes (Close, Simple, 11, 0.06)
   indHandlers[40][1][0] = iEnvelopes(NULL, 0, 11, 0, MODE_SMA, PRICE_CLOSE, 0.06);
   // Momentum (Close, 49)
   indHandlers[40][2][0] = iMomentum(NULL, 0, 49, PRICE_CLOSE);
   // Williams' Percent Range (5)
   indHandlers[40][3][0] = iWPR(NULL, 0, 5);
   // Williams' Percent Range (26), Level: -14.0
   indHandlers[41][0][0] = iWPR(NULL, 0, 26);
   // Alligator (Smoothed, Median, 7, 6, 6, 4, 4, 3)
   indHandlers[41][1][0] = iAlligator(NULL, 0, 7, 6, 6, 4, 4, 3, MODE_SMMA, PRICE_MEDIAN);
   // MACD (Close, 8, 14, 9)
   indHandlers[41][2][0] = iMACD(NULL, 0, 8, 14, 9, PRICE_CLOSE);
   // Average True Range (9)
   indHandlers[41][3][0] = iATR(NULL, 0, 9);
   // MACD Signal (Close, 10, 19, 8)
   indHandlers[41][4][0] = iMACD(NULL, 0, 10, 19, 8, PRICE_CLOSE);
   // Envelopes (Close, Simple, 41, 0.09)
   indHandlers[41][5][0] = iEnvelopes(NULL, 0, 41, 0, MODE_SMA, PRICE_CLOSE, 0.09);
   // Moving Average (Simple, Close, 50, 0)
   indHandlers[42][0][0] = iMA(NULL, 0, 50, 0, MODE_SMA, PRICE_CLOSE);
   // Williams' Percent Range (36), Level: -29.0
   indHandlers[42][1][0] = iWPR(NULL, 0, 36);
   // Stochastic (2, 2, 1), Level: 29.0
   indHandlers[42][2][0] = iStochastic(NULL, 0, 2, 2, 1, MODE_SMA, 0);
   // Pin Bar (8, 37)
   indHandlers[43][0][0] = -1;
   // RSI (Close, 47)
   indHandlers[43][1][0] = iRSI(NULL, 0, 47, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 37), Level: 0
   indHandlers[44][0][0] = iCCI(NULL, 0, 37, PRICE_TYPICAL);
   // RSI (Close, 27), Level: 52
   indHandlers[44][1][0] = iRSI(NULL, 0, 27, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 21)
   indHandlers[44][2][0] = iCCI(NULL, 0, 21, PRICE_TYPICAL);
   // Moving Average (Simple, Close, 29, 0)
   indHandlers[44][3][0] = iMA(NULL, 0, 29, 0, MODE_SMA, PRICE_CLOSE);
   // Envelopes (Close, Simple, 22, 0.76)
   indHandlers[44][4][0] = iEnvelopes(NULL, 0, 22, 0, MODE_SMA, PRICE_CLOSE, 0.76);
   // Moving Averages Crossover (Simple, Simple, 7, 34)
   indHandlers[44][5][0] = iMA(NULL, 0, 7, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 7, 34)
   indHandlers[44][5][1] = iMA(NULL, 0, 34, 0, MODE_SMA, PRICE_CLOSE);
   // Bollinger Bands (Close, 36, 3.31)
   indHandlers[44][6][0] = iBands(NULL, 0, 36, 0, 3.31, PRICE_CLOSE);
   // Envelopes (Close, Simple, 14, 0.83)
   indHandlers[45][0][0] = iEnvelopes(NULL, 0, 14, 0, MODE_SMA, PRICE_CLOSE, 0.83);
   // MACD (Close, 11, 18, 9)
   indHandlers[45][1][0] = iMACD(NULL, 0, 11, 18, 9, PRICE_CLOSE);
   // Williams' Percent Range (13), Level: -86.0
   indHandlers[45][2][0] = iWPR(NULL, 0, 13);
   // ADX (26)
   indHandlers[45][3][0] = iADX(NULL, 0, 26);
   // Bulls Power (31), Level: -26.8000
   indHandlers[46][0][0] = iBullsPower(NULL, 0, 31);
   // ADX (2), Level: 17.0
   indHandlers[46][1][0] = iADX(NULL, 0, 2);
   // Directional Indicators (9)
   indHandlers[46][2][0] = iADX(NULL, 0, 9);
   // Pin Bar (9, 34)
   indHandlers[47][0][0] = -1;
   // MACD Signal (Close, 13, 46, 11)
   indHandlers[47][1][0] = iMACD(NULL, 0, 13, 46, 11, PRICE_CLOSE);
   // Pin Bar (4, 32)
   indHandlers[47][2][0] = -1;
   // Bears Power (47), Level: 0.0000
   indHandlers[47][3][0] = iBearsPower(NULL, 0, 47);
   // RSI (Close, 20), Level: 41
   indHandlers[47][4][0] = iRSI(NULL, 0, 20, PRICE_CLOSE);
   // Awesome Oscillator
   indHandlers[48][0][0] = iAO(NULL, 0);
   // Moving Averages Crossover (Simple, Simple, 12, 42)
   indHandlers[48][1][0] = iMA(NULL, 0, 12, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 12, 42)
   indHandlers[48][1][1] = iMA(NULL, 0, 42, 0, MODE_SMA, PRICE_CLOSE);
   // DeMarker (8)
   indHandlers[48][2][0] = iDeMarker(NULL, 0, 8);
   // Moving Average of Oscillator (Close, 17, 43, 10), Level: 0.0000
   indHandlers[48][3][0] = iOsMA(NULL, 0, 17, 43, 10, PRICE_CLOSE);
   // Pin Bar (9, 47)
   indHandlers[48][4][0] = -1;
   // Envelopes (Close, Simple, 46, 0.55)
   indHandlers[48][5][0] = iEnvelopes(NULL, 0, 46, 0, MODE_SMA, PRICE_CLOSE, 0.55);
   // Momentum (Close, 14), Level: 102.0000
   indHandlers[49][0][0] = iMomentum(NULL, 0, 14, PRICE_CLOSE);
   // DeMarker (42), Level: 0.72
   indHandlers[49][1][0] = iDeMarker(NULL, 0, 42);
   // Stochastic (2, 1, 2)
   indHandlers[49][2][0] = iStochastic(NULL, 0, 2, 1, 2, MODE_SMA, 0);
   // Momentum (Close, 44), Level: 104.0000
   indHandlers[49][3][0] = iMomentum(NULL, 0, 44, PRICE_CLOSE);
   // Bears Power (6), Level: 0.0000
   indHandlers[50][0][0] = iBearsPower(NULL, 0, 6);
   // Candle Color (18, 3)
   indHandlers[50][1][0] = -1;
   // Moving Averages Crossover (Simple, Simple, 24, 25)
   indHandlers[50][2][0] = iMA(NULL, 0, 24, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 24, 25)
   indHandlers[50][2][1] = iMA(NULL, 0, 25, 0, MODE_SMA, PRICE_CLOSE);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[50][3][0] = iAC(NULL, 0);
   // Stochastic (7, 3, 2), Level: 92.0
   indHandlers[50][4][0] = iStochastic(NULL, 0, 7, 3, 2, MODE_SMA, 0);
   // Moving Average (Simple, Close, 38, 0)
   indHandlers[50][5][0] = iMA(NULL, 0, 38, 0, MODE_SMA, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 35)
   indHandlers[50][6][0] = iCCI(NULL, 0, 35, PRICE_TYPICAL);
   // Moving Average (Simple, Close, 23, 0)
   indHandlers[51][0][0] = iMA(NULL, 0, 23, 0, MODE_SMA, PRICE_CLOSE);
   // ADX (5), Level: 45.0
   indHandlers[51][1][0] = iADX(NULL, 0, 5);
   // Williams' Percent Range (8)
   indHandlers[51][2][0] = iWPR(NULL, 0, 8);
   // Moving Averages Crossover (Simple, Simple, 18, 26)
   indHandlers[51][3][0] = iMA(NULL, 0, 18, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 18, 26)
   indHandlers[51][3][1] = iMA(NULL, 0, 26, 0, MODE_SMA, PRICE_CLOSE);
   // Average True Range (42), Level: 19.4000
   indHandlers[51][4][0] = iATR(NULL, 0, 42);
   // Momentum (Close, 5), Level: 97.0000
   indHandlers[51][5][0] = iMomentum(NULL, 0, 5, PRICE_CLOSE);
   // DeMarker (41)
   indHandlers[51][6][0] = iDeMarker(NULL, 0, 41);
   // Bollinger Bands (Close, 24, 3.90)
   indHandlers[52][0][0] = iBands(NULL, 0, 24, 0, 3.90, PRICE_CLOSE);
   // Momentum (Close, 27)
   indHandlers[52][1][0] = iMomentum(NULL, 0, 27, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 39), Level: 0
   indHandlers[52][2][0] = iCCI(NULL, 0, 39, PRICE_TYPICAL);
   // ADX (2), Level: 16.0
   indHandlers[52][3][0] = iADX(NULL, 0, 2);
   // ADX (38), Level: 24.0
   indHandlers[52][4][0] = iADX(NULL, 0, 38);
   // DeMarker (14), Level: 0.98
   indHandlers[52][5][0] = iDeMarker(NULL, 0, 14);
   // Standard Deviation (Close, Simple, 49)
   indHandlers[52][6][0] = iStdDev(NULL, 0, 49, 0, MODE_SMA, PRICE_CLOSE);
   // RSI (Close, 50), Level: 58
   indHandlers[53][0][0] = iRSI(NULL, 0, 50, PRICE_CLOSE);
   // Momentum (Close, 25)
   indHandlers[53][1][0] = iMomentum(NULL, 0, 25, PRICE_CLOSE);
   // Bears Power (3)
   indHandlers[53][2][0] = iBearsPower(NULL, 0, 3);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[54][0][0] = iAC(NULL, 0);
   // Bollinger Bands (Close, 49, 3.36)
   indHandlers[54][1][0] = iBands(NULL, 0, 49, 0, 3.36, PRICE_CLOSE);
   // Bulls Power (6), Level: 0.0000
   indHandlers[54][2][0] = iBullsPower(NULL, 0, 6);
   // Stochastic (12, 4, 8)
   indHandlers[54][3][0] = iStochastic(NULL, 0, 12, 4, 8, MODE_SMA, 0);
   // Envelopes (Close, Simple, 42, 0.68)
   indHandlers[54][4][0] = iEnvelopes(NULL, 0, 42, 0, MODE_SMA, PRICE_CLOSE, 0.68);
   // Envelopes (Close, Simple, 48, 0.94)
   indHandlers[55][0][0] = iEnvelopes(NULL, 0, 48, 0, MODE_SMA, PRICE_CLOSE, 0.94);
   // DeMarker (10)
   indHandlers[55][1][0] = iDeMarker(NULL, 0, 10);
   // Awesome Oscillator
   indHandlers[55][2][0] = iAO(NULL, 0);
   // Average True Range (17), Level: 7.0000
   indHandlers[55][3][0] = iATR(NULL, 0, 17);
   // Bears Power (26)
   indHandlers[55][4][0] = iBearsPower(NULL, 0, 26);
   // Bulls Power (47), Level: 0.0000
   indHandlers[56][0][0] = iBullsPower(NULL, 0, 47);
   // MACD (Close, 15, 42, 9)
   indHandlers[56][1][0] = iMACD(NULL, 0, 15, 42, 9, PRICE_CLOSE);
   // MACD (Close, 19, 35, 9)
   indHandlers[56][2][0] = iMACD(NULL, 0, 19, 35, 9, PRICE_CLOSE);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[56][3][0] = iAC(NULL, 0);
   // DeMarker (16)
   indHandlers[56][4][0] = iDeMarker(NULL, 0, 16);
   // Alligator (Smoothed, Median, 26, 19, 19, 3, 3, 1)
   indHandlers[57][0][0] = iAlligator(NULL, 0, 26, 19, 19, 3, 3, 1, MODE_SMMA, PRICE_MEDIAN);
   // ADX (27)
   indHandlers[57][1][0] = iADX(NULL, 0, 27);
   // Average True Range (15), Level: 17.1000
   indHandlers[57][2][0] = iATR(NULL, 0, 15);
   // Moving Average of Oscillator (Close, 20, 36, 10), Level: 6.7000
   indHandlers[57][3][0] = iOsMA(NULL, 0, 20, 36, 10, PRICE_CLOSE);
   // Standard Deviation (Close, Simple, 4), Level: 2.4000
   indHandlers[58][0][0] = iStdDev(NULL, 0, 4, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Average (Simple, Close, 48, 0)
   indHandlers[58][1][0] = iMA(NULL, 0, 48, 0, MODE_SMA, PRICE_CLOSE);
   // Bollinger Bands (Close, 24, 2.07)
   indHandlers[58][2][0] = iBands(NULL, 0, 24, 0, 2.07, PRICE_CLOSE);
   // Moving Average (Simple, Close, 42, 0)
   indHandlers[58][3][0] = iMA(NULL, 0, 42, 0, MODE_SMA, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 32, 13, 13, 12, 12, 3)
   indHandlers[58][4][0] = iAlligator(NULL, 0, 32, 13, 13, 12, 12, 3, MODE_SMMA, PRICE_MEDIAN);
   // Momentum (Close, 29), Level: 102.0000
   indHandlers[59][0][0] = iMomentum(NULL, 0, 29, PRICE_CLOSE);
   // Directional Indicators (21)
   indHandlers[59][1][0] = iADX(NULL, 0, 21);
   // Standard Deviation (Close, Simple, 45)
   indHandlers[59][2][0] = iStdDev(NULL, 0, 45, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Average of Oscillator (Close, 12, 32, 7), Level: 0.0000
   indHandlers[59][3][0] = iOsMA(NULL, 0, 12, 32, 7, PRICE_CLOSE);
   // Accelerator Oscillator
   indHandlers[60][0][0] = iAC(NULL, 0);
   // Directional Indicators (33)
   indHandlers[60][1][0] = iADX(NULL, 0, 33);
   // Moving Averages Crossover (Simple, Simple, 16, 49)
   indHandlers[60][2][0] = iMA(NULL, 0, 16, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 16, 49)
   indHandlers[60][2][1] = iMA(NULL, 0, 49, 0, MODE_SMA, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 12)
   indHandlers[60][3][0] = iCCI(NULL, 0, 12, PRICE_TYPICAL);
   // Average True Range (17)
   indHandlers[60][4][0] = iATR(NULL, 0, 17);
   // Pin Bar (7, 36)
   indHandlers[60][5][0] = -1;
   // Momentum (Close, 47)
   indHandlers[60][6][0] = iMomentum(NULL, 0, 47, PRICE_CLOSE);
   // Candle Color (12, 1)
   indHandlers[61][0][0] = -1;
   // Williams' Percent Range (25), Level: -39.0
   indHandlers[61][1][0] = iWPR(NULL, 0, 25);
   // Directional Indicators (32)
   indHandlers[61][2][0] = iADX(NULL, 0, 32);
   // Bollinger Bands (Close, 14, 1.42)
   indHandlers[61][3][0] = iBands(NULL, 0, 14, 0, 1.42, PRICE_CLOSE);
   // Williams' Percent Range (25)
   indHandlers[61][4][0] = iWPR(NULL, 0, 25);
   // Williams' Percent Range (21), Level: -49.0
   indHandlers[62][0][0] = iWPR(NULL, 0, 21);
   // MACD Signal (Close, 15, 45, 7)
   indHandlers[62][1][0] = iMACD(NULL, 0, 15, 45, 7, PRICE_CLOSE);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[62][2][0] = iAO(NULL, 0);
   // Accelerator Oscillator
   indHandlers[62][3][0] = iAC(NULL, 0);
   // Directional Indicators (1)
   indHandlers[62][4][0] = iADX(NULL, 0, 1);
   // Awesome Oscillator
   indHandlers[62][5][0] = iAO(NULL, 0);
   // Moving Average of Oscillator (Close, 21, 34, 13), Level: 0.0000
   indHandlers[63][0][0] = iOsMA(NULL, 0, 21, 34, 13, PRICE_CLOSE);
   // Momentum (Close, 48)
   indHandlers[63][1][0] = iMomentum(NULL, 0, 48, PRICE_CLOSE);
   // Moving Average (Simple, Close, 34, 0)
   indHandlers[63][2][0] = iMA(NULL, 0, 34, 0, MODE_SMA, PRICE_CLOSE);
   // Bulls Power (15)
   indHandlers[63][3][0] = iBullsPower(NULL, 0, 15);
   // Williams' Percent Range (32), Level: -54.0
   indHandlers[63][4][0] = iWPR(NULL, 0, 32);
   // Bears Power (42)
   indHandlers[64][0][0] = iBearsPower(NULL, 0, 42);
   // Moving Average of Oscillator (Close, 22, 48, 4), Level: 0.0000
   indHandlers[64][1][0] = iOsMA(NULL, 0, 22, 48, 4, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 19, 24)
   indHandlers[64][2][0] = iMA(NULL, 0, 19, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 19, 24)
   indHandlers[64][2][1] = iMA(NULL, 0, 24, 0, MODE_SMA, PRICE_CLOSE);
   // Bulls Power (33), Level: 0.0000
   indHandlers[64][3][0] = iBullsPower(NULL, 0, 33);
   // Accelerator Oscillator
   indHandlers[64][4][0] = iAC(NULL, 0);
   // RSI (Close, 3), Level: 32
   indHandlers[64][5][0] = iRSI(NULL, 0, 3, PRICE_CLOSE);
   // Momentum (Close, 16)
   indHandlers[65][0][0] = iMomentum(NULL, 0, 16, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 10, 41)
   indHandlers[65][1][0] = iMA(NULL, 0, 10, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 10, 41)
   indHandlers[65][1][1] = iMA(NULL, 0, 41, 0, MODE_SMA, PRICE_CLOSE);
   // Williams' Percent Range (12), Level: -17.0
   indHandlers[65][2][0] = iWPR(NULL, 0, 12);
   // Moving Averages Crossover (Simple, Simple, 25, 41)
   indHandlers[65][3][0] = iMA(NULL, 0, 25, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 25, 41)
   indHandlers[65][3][1] = iMA(NULL, 0, 41, 0, MODE_SMA, PRICE_CLOSE);
   // Pin Bar (6, 23)
   indHandlers[65][4][0] = -1;
   // Pin Bar (10, 47)
   indHandlers[66][0][0] = -1;
   // Awesome Oscillator, Level: -18.9000
   indHandlers[66][1][0] = iAO(NULL, 0);
   // ADX (49), Level: 15.0
   indHandlers[66][2][0] = iADX(NULL, 0, 49);
   // RSI (Close, 9), Level: 30
   indHandlers[67][0][0] = iRSI(NULL, 0, 9, PRICE_CLOSE);
   // Moving Average (Simple, Close, 33, 0)
   indHandlers[67][1][0] = iMA(NULL, 0, 33, 0, MODE_SMA, PRICE_CLOSE);
   // MACD Signal (Close, 5, 26, 5)
   indHandlers[67][2][0] = iMACD(NULL, 0, 5, 26, 5, PRICE_CLOSE);
   // Pin Bar (8, 42)
   indHandlers[68][0][0] = -1;
   // Pin Bar (7, 49)
   indHandlers[68][1][0] = -1;
   // DeMarker (27)
   indHandlers[68][2][0] = iDeMarker(NULL, 0, 27);
   // Alligator (Smoothed, Median, 42, 22, 22, 11, 11, 1)
   indHandlers[68][3][0] = iAlligator(NULL, 0, 42, 22, 22, 11, 11, 1, MODE_SMMA, PRICE_MEDIAN);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[69][0][0] = iAC(NULL, 0);
   // Standard Deviation (Close, Simple, 12), Level: 9.0000
   indHandlers[69][1][0] = iStdDev(NULL, 0, 12, 0, MODE_SMA, PRICE_CLOSE);
   // ADX (48), Level: 43.0
   indHandlers[69][2][0] = iADX(NULL, 0, 48);
   // Momentum (Close, 28), Level: 101.0000
   indHandlers[70][0][0] = iMomentum(NULL, 0, 28, PRICE_CLOSE);
   // Standard Deviation (Close, Simple, 42), Level: 1.0000
   indHandlers[70][1][0] = iStdDev(NULL, 0, 42, 0, MODE_SMA, PRICE_CLOSE);
   // Average True Range (24), Level: 10.9000
   indHandlers[70][2][0] = iATR(NULL, 0, 24);
   // Alligator (Smoothed, Median, 15, 7, 7, 5, 5, 3)
   indHandlers[70][3][0] = iAlligator(NULL, 0, 15, 7, 7, 5, 5, 3, MODE_SMMA, PRICE_MEDIAN);
   // Momentum (Close, 35), Level: 98.0000
   indHandlers[71][0][0] = iMomentum(NULL, 0, 35, PRICE_CLOSE);
   // ADX (50), Level: 43.0
   indHandlers[71][1][0] = iADX(NULL, 0, 50);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[71][2][0] = iAC(NULL, 0);
   // Candle Color (25, 2)
   indHandlers[71][3][0] = -1;
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[71][4][0] = iAC(NULL, 0);
   // Bulls Power (5)
   indHandlers[71][5][0] = iBullsPower(NULL, 0, 5);
   // Moving Average (Simple, Close, 33, 0)
   indHandlers[72][0][0] = iMA(NULL, 0, 33, 0, MODE_SMA, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 6)
   indHandlers[72][1][0] = iCCI(NULL, 0, 6, PRICE_TYPICAL);
   // Bulls Power (22)
   indHandlers[72][2][0] = iBullsPower(NULL, 0, 22);
   // Average True Range (17)
   indHandlers[72][3][0] = iATR(NULL, 0, 17);
   // Stochastic (9, 8, 8)
   indHandlers[72][4][0] = iStochastic(NULL, 0, 9, 8, 8, MODE_SMA, 0);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[72][5][0] = iAO(NULL, 0);
   // Directional Indicators (35)
   indHandlers[73][0][0] = iADX(NULL, 0, 35);
   // Awesome Oscillator
   indHandlers[73][1][0] = iAO(NULL, 0);
   // Awesome Oscillator
   indHandlers[73][2][0] = iAO(NULL, 0);
   // Momentum (Close, 46)
   indHandlers[73][3][0] = iMomentum(NULL, 0, 46, PRICE_CLOSE);
   // RSI (Close, 29), Level: 72
   indHandlers[73][4][0] = iRSI(NULL, 0, 29, PRICE_CLOSE);
   // Standard Deviation (Close, Simple, 4)
   indHandlers[74][0][0] = iStdDev(NULL, 0, 4, 0, MODE_SMA, PRICE_CLOSE);
   // ADX (35)
   indHandlers[74][1][0] = iADX(NULL, 0, 35);
   // MACD (Close, 9, 18, 9)
   indHandlers[74][2][0] = iMACD(NULL, 0, 9, 18, 9, PRICE_CLOSE);
   // MACD Signal (Close, 12, 46, 8)
   indHandlers[74][3][0] = iMACD(NULL, 0, 12, 46, 8, PRICE_CLOSE);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[74][4][0] = iAO(NULL, 0);
   // Standard Deviation (Close, Simple, 36)
   indHandlers[74][5][0] = iStdDev(NULL, 0, 36, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic Signal (16, 14, 11)
   indHandlers[74][6][0] = iStochastic(NULL, 0, 16, 14, 11, MODE_SMA, STO_LOWHIGH);
   // Average True Range (2), Level: 7.1000
   indHandlers[75][0][0] = iATR(NULL, 0, 2);
   // MACD (Close, 14, 29, 9)
   indHandlers[75][1][0] = iMACD(NULL, 0, 14, 29, 9, PRICE_CLOSE);
   // Pin Bar (8, 34)
   indHandlers[75][2][0] = -1;
   // MACD (Close, 11, 34, 9)
   indHandlers[75][3][0] = iMACD(NULL, 0, 11, 34, 9, PRICE_CLOSE);
   // Momentum (Close, 43), Level: 102.0000
   indHandlers[76][0][0] = iMomentum(NULL, 0, 43, PRICE_CLOSE);
   // Stochastic (3, 3, 1)
   indHandlers[76][1][0] = iStochastic(NULL, 0, 3, 3, 1, MODE_SMA, 0);
   // Standard Deviation (Close, Simple, 36)
   indHandlers[76][2][0] = iStdDev(NULL, 0, 36, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic (12, 5, 8)
   indHandlers[76][3][0] = iStochastic(NULL, 0, 12, 5, 8, MODE_SMA, 0);
   // RSI (Close, 6), Level: 50
   indHandlers[76][4][0] = iRSI(NULL, 0, 6, PRICE_CLOSE);
   // Bulls Power (23)
   indHandlers[77][0][0] = iBullsPower(NULL, 0, 23);
   // Average True Range (35)
   indHandlers[77][1][0] = iATR(NULL, 0, 35);
   // MACD Signal (Close, 17, 32, 6)
   indHandlers[77][2][0] = iMACD(NULL, 0, 17, 32, 6, PRICE_CLOSE);
   // Candle Color (49, 2)
   indHandlers[77][3][0] = -1;
   // Momentum (Close, 35), Level: 103.0000
   indHandlers[77][4][0] = iMomentum(NULL, 0, 35, PRICE_CLOSE);
   // Bollinger Bands (Close, 4, 1.01)
   indHandlers[77][5][0] = iBands(NULL, 0, 4, 0, 1.01, PRICE_CLOSE);
   // Momentum (Close, 19), Level: 102.0000
   indHandlers[78][0][0] = iMomentum(NULL, 0, 19, PRICE_CLOSE);
   // RSI (Close, 38)
   indHandlers[78][1][0] = iRSI(NULL, 0, 38, PRICE_CLOSE);
   // Envelopes (Close, Simple, 32, 0.37)
   indHandlers[78][2][0] = iEnvelopes(NULL, 0, 32, 0, MODE_SMA, PRICE_CLOSE, 0.37);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[79][0][0] = iAO(NULL, 0);
   // Moving Averages Crossover (Simple, Simple, 20, 24)
   indHandlers[79][1][0] = iMA(NULL, 0, 20, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 20, 24)
   indHandlers[79][1][1] = iMA(NULL, 0, 24, 0, MODE_SMA, PRICE_CLOSE);
   // Average True Range (14)
   indHandlers[79][2][0] = iATR(NULL, 0, 14);
   // Candle Color (24, 1)
   indHandlers[79][3][0] = -1;
   // Candle Color (33, 1)
   indHandlers[80][0][0] = -1;
   // Moving Average of Oscillator (Close, 13, 36, 7), Level: 0.0000
   indHandlers[80][1][0] = iOsMA(NULL, 0, 13, 36, 7, PRICE_CLOSE);
   // MACD Signal (Close, 19, 28, 12)
   indHandlers[80][2][0] = iMACD(NULL, 0, 19, 28, 12, PRICE_CLOSE);
   // Bollinger Bands (Close, 20, 2.98)
   indHandlers[80][3][0] = iBands(NULL, 0, 20, 0, 2.98, PRICE_CLOSE);
   // Bears Power (35)
   indHandlers[80][4][0] = iBearsPower(NULL, 0, 35);
   // Stochastic Signal (4, 1, 1)
   indHandlers[80][5][0] = iStochastic(NULL, 0, 4, 1, 1, MODE_SMA, STO_LOWHIGH);
   // Commodity Channel Index (Typical, 14), Level: 0
   indHandlers[80][6][0] = iCCI(NULL, 0, 14, PRICE_TYPICAL);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[81][0][0] = iAC(NULL, 0);
   // Alligator (Smoothed, Median, 41, 20, 20, 7, 7, 4)
   indHandlers[81][1][0] = iAlligator(NULL, 0, 41, 20, 20, 7, 7, 4, MODE_SMMA, PRICE_MEDIAN);
   // Moving Average (Simple, Close, 48, 0)
   indHandlers[81][2][0] = iMA(NULL, 0, 48, 0, MODE_SMA, PRICE_CLOSE);
   // RSI (Close, 32)
   indHandlers[81][3][0] = iRSI(NULL, 0, 32, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 34, 16, 16, 5, 5, 2)
   indHandlers[81][4][0] = iAlligator(NULL, 0, 34, 16, 16, 5, 5, 2, MODE_SMMA, PRICE_MEDIAN);
   // Alligator (Smoothed, Median, 24, 23, 23, 7, 7, 2)
   indHandlers[81][5][0] = iAlligator(NULL, 0, 24, 23, 23, 7, 7, 2, MODE_SMMA, PRICE_MEDIAN);
   // Average True Range (2), Level: 7.1000
   indHandlers[82][0][0] = iATR(NULL, 0, 2);
   // MACD (Close, 14, 29, 9)
   indHandlers[82][1][0] = iMACD(NULL, 0, 14, 29, 9, PRICE_CLOSE);
   // Pin Bar (8, 34)
   indHandlers[82][2][0] = -1;
   // DeMarker (3)
   indHandlers[82][3][0] = iDeMarker(NULL, 0, 3);
   // Stochastic (13, 11, 5), Level: 17.0
   indHandlers[82][4][0] = iStochastic(NULL, 0, 13, 11, 5, MODE_SMA, 0);
   // Moving Average (Simple, Close, 2, 0)
   indHandlers[83][0][0] = iMA(NULL, 0, 2, 0, MODE_SMA, PRICE_CLOSE);
   // Awesome Oscillator
   indHandlers[83][1][0] = iAO(NULL, 0);
   // Moving Averages Crossover (Simple, Simple, 14, 25)
   indHandlers[83][2][0] = iMA(NULL, 0, 14, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 14, 25)
   indHandlers[83][2][1] = iMA(NULL, 0, 25, 0, MODE_SMA, PRICE_CLOSE);
   // Momentum (Close, 11), Level: 103.0000
   indHandlers[83][3][0] = iMomentum(NULL, 0, 11, PRICE_CLOSE);
   // RSI (Close, 48), Level: 30
   indHandlers[84][0][0] = iRSI(NULL, 0, 48, PRICE_CLOSE);
   // RSI (Close, 16)
   indHandlers[84][1][0] = iRSI(NULL, 0, 16, PRICE_CLOSE);
   // Moving Average (Simple, Close, 18, 0)
   indHandlers[84][2][0] = iMA(NULL, 0, 18, 0, MODE_SMA, PRICE_CLOSE);
   // Envelopes (Close, Simple, 13, 0.63)
   indHandlers[84][3][0] = iEnvelopes(NULL, 0, 13, 0, MODE_SMA, PRICE_CLOSE, 0.63);
   // Moving Averages Crossover (Simple, Simple, 13, 45)
   indHandlers[84][4][0] = iMA(NULL, 0, 13, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 13, 45)
   indHandlers[84][4][1] = iMA(NULL, 0, 45, 0, MODE_SMA, PRICE_CLOSE);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[85][0][0] = iAC(NULL, 0);
   // Standard Deviation (Close, Simple, 12), Level: 9.0000
   indHandlers[85][1][0] = iStdDev(NULL, 0, 12, 0, MODE_SMA, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 37), Level: 0
   indHandlers[85][2][0] = iCCI(NULL, 0, 37, PRICE_TYPICAL);
   // ADX (48), Level: 43.0
   indHandlers[85][3][0] = iADX(NULL, 0, 48);
   // Envelopes (Close, Simple, 46, 0.98)
   indHandlers[86][0][0] = iEnvelopes(NULL, 0, 46, 0, MODE_SMA, PRICE_CLOSE, 0.98);
   // Stochastic Signal (10, 7, 4)
   indHandlers[86][1][0] = iStochastic(NULL, 0, 10, 7, 4, MODE_SMA, STO_LOWHIGH);
   // Bulls Power (43), Level: 0.0000
   indHandlers[87][0][0] = iBullsPower(NULL, 0, 43);
   // Candle Color (34, 2)
   indHandlers[87][1][0] = -1;
   // Momentum (Close, 44)
   indHandlers[87][2][0] = iMomentum(NULL, 0, 44, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 21, 31)
   indHandlers[87][3][0] = iMA(NULL, 0, 21, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 21, 31)
   indHandlers[87][3][1] = iMA(NULL, 0, 31, 0, MODE_SMA, PRICE_CLOSE);
   // MACD (Close, 9, 20, 9)
   indHandlers[87][4][0] = iMACD(NULL, 0, 9, 20, 9, PRICE_CLOSE);
   // Bears Power (41)
   indHandlers[87][5][0] = iBearsPower(NULL, 0, 41);
   // ADX (30), Level: 17.0
   indHandlers[88][0][0] = iADX(NULL, 0, 30);
   // Bollinger Bands (Close, 35, 3.39)
   indHandlers[88][1][0] = iBands(NULL, 0, 35, 0, 3.39, PRICE_CLOSE);
   // Bears Power (31)
   indHandlers[88][2][0] = iBearsPower(NULL, 0, 31);
   // Pin Bar (9, 39)
   indHandlers[89][0][0] = -1;
   // Directional Indicators (38)
   indHandlers[89][1][0] = iADX(NULL, 0, 38);
   // DeMarker (8), Level: 0.56
   indHandlers[90][0][0] = iDeMarker(NULL, 0, 8);
   // Envelopes (Close, Simple, 3, 0.58)
   indHandlers[90][1][0] = iEnvelopes(NULL, 0, 3, 0, MODE_SMA, PRICE_CLOSE, 0.58);
   // Envelopes (Close, Simple, 4, 0.63)
   indHandlers[90][2][0] = iEnvelopes(NULL, 0, 4, 0, MODE_SMA, PRICE_CLOSE, 0.63);
   // Stochastic (9, 6, 2)
   indHandlers[90][3][0] = iStochastic(NULL, 0, 9, 6, 2, MODE_SMA, 0);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[91][0][0] = iAC(NULL, 0);
   // Bollinger Bands (Close, 31, 1.91)
   indHandlers[91][1][0] = iBands(NULL, 0, 31, 0, 1.91, PRICE_CLOSE);
   // Moving Average of Oscillator (Close, 11, 13, 3)
   indHandlers[91][2][0] = iOsMA(NULL, 0, 11, 13, 3, PRICE_CLOSE);
   // ADX (19)
   indHandlers[91][3][0] = iADX(NULL, 0, 19);
   // DeMarker (40), Level: 0.89
   indHandlers[91][4][0] = iDeMarker(NULL, 0, 40);
   // Williams' Percent Range (27), Level: -60.0
   indHandlers[91][5][0] = iWPR(NULL, 0, 27);
   // Bulls Power (9), Level: 0.0000
   indHandlers[92][0][0] = iBullsPower(NULL, 0, 9);
   // Moving Averages Crossover (Simple, Simple, 12, 42)
   indHandlers[92][1][0] = iMA(NULL, 0, 12, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 12, 42)
   indHandlers[92][1][1] = iMA(NULL, 0, 42, 0, MODE_SMA, PRICE_CLOSE);
   // Momentum (Close, 5)
   indHandlers[92][2][0] = iMomentum(NULL, 0, 5, PRICE_CLOSE);
   // Moving Average of Oscillator (Close, 17, 43, 10), Level: 0.0000
   indHandlers[92][3][0] = iOsMA(NULL, 0, 17, 43, 10, PRICE_CLOSE);
   // Pin Bar (9, 47)
   indHandlers[92][4][0] = -1;
   // Standard Deviation (Close, Simple, 21)
   indHandlers[93][0][0] = iStdDev(NULL, 0, 21, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 25, 30)
   indHandlers[93][1][0] = iMA(NULL, 0, 25, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 25, 30)
   indHandlers[93][1][1] = iMA(NULL, 0, 30, 0, MODE_SMA, PRICE_CLOSE);
   // RSI (Close, 37)
   indHandlers[93][2][0] = iRSI(NULL, 0, 37, PRICE_CLOSE);
   // ADX (18)
   indHandlers[93][3][0] = iADX(NULL, 0, 18);
   // Bulls Power (33)
   indHandlers[94][0][0] = iBullsPower(NULL, 0, 33);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[94][1][0] = iAO(NULL, 0);
   // Moving Averages Crossover (Simple, Simple, 13, 31)
   indHandlers[94][2][0] = iMA(NULL, 0, 13, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 13, 31)
   indHandlers[94][2][1] = iMA(NULL, 0, 31, 0, MODE_SMA, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 33, 14, 14, 3, 3, 1)
   indHandlers[94][3][0] = iAlligator(NULL, 0, 33, 14, 14, 3, 3, 1, MODE_SMMA, PRICE_MEDIAN);
   // Stochastic Signal (6, 2, 1)
   indHandlers[94][4][0] = iStochastic(NULL, 0, 6, 2, 1, MODE_SMA, STO_LOWHIGH);
   // Moving Averages Crossover (Simple, Simple, 8, 10)
   indHandlers[94][5][0] = iMA(NULL, 0, 8, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 8, 10)
   indHandlers[94][5][1] = iMA(NULL, 0, 10, 0, MODE_SMA, PRICE_CLOSE);
   // Bears Power (9)
   indHandlers[94][6][0] = iBearsPower(NULL, 0, 9);
   // Alligator (Smoothed, Median, 20, 12, 12, 9, 9, 4)
   indHandlers[94][7][0] = iAlligator(NULL, 0, 20, 12, 12, 9, 9, 4, MODE_SMMA, PRICE_MEDIAN);
   // Accelerator Oscillator, Level: -7.2000
   indHandlers[95][0][0] = iAC(NULL, 0);
   // Moving Average of Oscillator (Close, 12, 43, 4)
   indHandlers[95][1][0] = iOsMA(NULL, 0, 12, 43, 4, PRICE_CLOSE);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[96][0][0] = iAO(NULL, 0);
   // Moving Average (Simple, Close, 35, 0)
   indHandlers[96][1][0] = iMA(NULL, 0, 35, 0, MODE_SMA, PRICE_CLOSE);
   // Williams' Percent Range (47)
   indHandlers[96][2][0] = iWPR(NULL, 0, 47);
   // Commodity Channel Index (Typical, 25)
   indHandlers[96][3][0] = iCCI(NULL, 0, 25, PRICE_TYPICAL);
   // Directional Indicators (13)
   indHandlers[96][4][0] = iADX(NULL, 0, 13);
   // Momentum (Close, 49), Level: 95.0000
   indHandlers[96][5][0] = iMomentum(NULL, 0, 49, PRICE_CLOSE);
   // Pin Bar (9, 46)
   indHandlers[97][0][0] = -1;
   // Moving Average (Simple, Close, 8, 0)
   indHandlers[97][1][0] = iMA(NULL, 0, 8, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 7, 33)
   indHandlers[98][0][0] = iMA(NULL, 0, 7, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 7, 33)
   indHandlers[98][0][1] = iMA(NULL, 0, 33, 0, MODE_SMA, PRICE_CLOSE);
   // Envelopes (Close, Simple, 6, 0.15)
   indHandlers[98][1][0] = iEnvelopes(NULL, 0, 6, 0, MODE_SMA, PRICE_CLOSE, 0.15);
   // Pin Bar (8, 21)
   indHandlers[98][2][0] = -1;
   // Stochastic Signal (6, 4, 1)
   indHandlers[98][3][0] = iStochastic(NULL, 0, 6, 4, 1, MODE_SMA, STO_LOWHIGH);
   // Moving Average of Oscillator (Close, 19, 39, 13), Level: 3.1000
   indHandlers[98][4][0] = iOsMA(NULL, 0, 19, 39, 13, PRICE_CLOSE);
   // Candle Color (8, 3)
   indHandlers[99][0][0] = -1;
   // Stochastic (5, 2, 3)
   indHandlers[99][1][0] = iStochastic(NULL, 0, 5, 2, 3, MODE_SMA, 0);
   // Envelopes (Close, Simple, 33, 0.98)
   indHandlers[99][2][0] = iEnvelopes(NULL, 0, 33, 0, MODE_SMA, PRICE_CLOSE, 0.98);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[100][0][0] = iAC(NULL, 0);
   // Bollinger Bands (Close, 49, 3.36)
   indHandlers[100][1][0] = iBands(NULL, 0, 49, 0, 3.36, PRICE_CLOSE);
   // Bulls Power (6), Level: 0.0000
   indHandlers[100][2][0] = iBullsPower(NULL, 0, 6);
   // Momentum (Close, 33), Level: 101.0000
   indHandlers[100][3][0] = iMomentum(NULL, 0, 33, PRICE_CLOSE);
   // Envelopes (Close, Simple, 35, 0.98)
   indHandlers[101][0][0] = iEnvelopes(NULL, 0, 35, 0, MODE_SMA, PRICE_CLOSE, 0.98);
   // Williams' Percent Range (11), Level: -36.0
   indHandlers[101][1][0] = iWPR(NULL, 0, 11);
   // Momentum (Close, 28)
   indHandlers[101][2][0] = iMomentum(NULL, 0, 28, PRICE_CLOSE);
   // Awesome Oscillator
   indHandlers[101][3][0] = iAO(NULL, 0);
   // Envelopes (Close, Simple, 37, 0.83)
   indHandlers[102][0][0] = iEnvelopes(NULL, 0, 37, 0, MODE_SMA, PRICE_CLOSE, 0.83);
   // Average True Range (7)
   indHandlers[102][1][0] = iATR(NULL, 0, 7);
   // Accelerator Oscillator
   indHandlers[102][2][0] = iAC(NULL, 0);
   // Moving Average (Simple, Close, 32, 0)
   indHandlers[102][3][0] = iMA(NULL, 0, 32, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Average (Simple, Close, 31, 0)
   indHandlers[103][0][0] = iMA(NULL, 0, 31, 0, MODE_SMA, PRICE_CLOSE);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[103][1][0] = iAC(NULL, 0);
   // Stochastic Signal (2, 1, 1)
   indHandlers[103][2][0] = iStochastic(NULL, 0, 2, 1, 1, MODE_SMA, STO_LOWHIGH);
   // Standard Deviation (Close, Simple, 5), Level: 12.6000
   indHandlers[103][3][0] = iStdDev(NULL, 0, 5, 0, MODE_SMA, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 7), Level: 0
   indHandlers[103][4][0] = iCCI(NULL, 0, 7, PRICE_TYPICAL);
   // Momentum (Close, 11)
   indHandlers[103][5][0] = iMomentum(NULL, 0, 11, PRICE_CLOSE);
   // Average True Range (4), Level: 12.1000
   indHandlers[104][0][0] = iATR(NULL, 0, 4);
   // Candle Color (44, 1)
   indHandlers[104][1][0] = -1;
   // ADX (39)
   indHandlers[104][2][0] = iADX(NULL, 0, 39);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[104][3][0] = iAO(NULL, 0);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[105][0][0] = iAC(NULL, 0);
   // Moving Average (Simple, Close, 48, 0)
   indHandlers[105][1][0] = iMA(NULL, 0, 48, 0, MODE_SMA, PRICE_CLOSE);
   // Candle Color (5, 1)
   indHandlers[105][2][0] = -1;
   // Momentum (Close, 34), Level: 102.0000
   indHandlers[106][0][0] = iMomentum(NULL, 0, 34, PRICE_CLOSE);
   // DeMarker (39)
   indHandlers[106][1][0] = iDeMarker(NULL, 0, 39);
   // Candle Color (12, 3)
   indHandlers[106][2][0] = -1;
   // MACD (Close, 15, 48, 9)
   indHandlers[107][0][0] = iMACD(NULL, 0, 15, 48, 9, PRICE_CLOSE);
   // Standard Deviation (Close, Simple, 44)
   indHandlers[107][1][0] = iStdDev(NULL, 0, 44, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 4, 9)
   indHandlers[107][2][0] = iMA(NULL, 0, 4, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 4, 9)
   indHandlers[107][2][1] = iMA(NULL, 0, 9, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Average of Oscillator (Close, 19, 20, 8), Level: 0.0000
   indHandlers[108][0][0] = iOsMA(NULL, 0, 19, 20, 8, PRICE_CLOSE);
   // Bears Power (38)
   indHandlers[108][1][0] = iBearsPower(NULL, 0, 38);
   // RSI (Close, 19)
   indHandlers[108][2][0] = iRSI(NULL, 0, 19, PRICE_CLOSE);
   // Directional Indicators (41)
   indHandlers[108][3][0] = iADX(NULL, 0, 41);
   // Bears Power (6), Level: 0.0000
   indHandlers[109][0][0] = iBearsPower(NULL, 0, 6);
   // Candle Color (18, 3)
   indHandlers[109][1][0] = -1;
   // Moving Averages Crossover (Simple, Simple, 24, 25)
   indHandlers[109][2][0] = iMA(NULL, 0, 24, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 24, 25)
   indHandlers[109][2][1] = iMA(NULL, 0, 25, 0, MODE_SMA, PRICE_CLOSE);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[109][3][0] = iAC(NULL, 0);
   // Stochastic (7, 3, 2), Level: 92.0
   indHandlers[109][4][0] = iStochastic(NULL, 0, 7, 3, 2, MODE_SMA, 0);
   // Stochastic Signal (16, 12, 4)
   indHandlers[109][5][0] = iStochastic(NULL, 0, 16, 12, 4, MODE_SMA, STO_LOWHIGH);
   // Commodity Channel Index (Typical, 35)
   indHandlers[109][6][0] = iCCI(NULL, 0, 35, PRICE_TYPICAL);
   // Envelopes (Close, Simple, 10, 0.13)
   indHandlers[110][0][0] = iEnvelopes(NULL, 0, 10, 0, MODE_SMA, PRICE_CLOSE, 0.13);
   // Envelopes (Close, Simple, 26, 0.88)
   indHandlers[110][1][0] = iEnvelopes(NULL, 0, 26, 0, MODE_SMA, PRICE_CLOSE, 0.88);
   // Momentum (Close, 2), Level: 99.0000
   indHandlers[110][2][0] = iMomentum(NULL, 0, 2, PRICE_CLOSE);
   // Moving Average (Simple, Close, 49, 0)
   indHandlers[110][3][0] = iMA(NULL, 0, 49, 0, MODE_SMA, PRICE_CLOSE);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[111][0][0] = iAC(NULL, 0);
   // Standard Deviation (Close, Simple, 12), Level: 9.0000
   indHandlers[111][1][0] = iStdDev(NULL, 0, 12, 0, MODE_SMA, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 37), Level: 0
   indHandlers[111][2][0] = iCCI(NULL, 0, 37, PRICE_TYPICAL);
   // Candle Color (32, 1)
   indHandlers[111][3][0] = -1;
   // Alligator (Smoothed, Median, 32, 19, 19, 14, 14, 5)
   indHandlers[112][0][0] = iAlligator(NULL, 0, 32, 19, 19, 14, 14, 5, MODE_SMMA, PRICE_MEDIAN);
   // Alligator (Smoothed, Median, 31, 24, 24, 12, 12, 3)
   indHandlers[112][1][0] = iAlligator(NULL, 0, 31, 24, 24, 12, 12, 3, MODE_SMMA, PRICE_MEDIAN);
   // Bears Power (35), Level: 0.0000
   indHandlers[112][2][0] = iBearsPower(NULL, 0, 35);
   // Envelopes (Close, Simple, 46, 0.76)
   indHandlers[113][0][0] = iEnvelopes(NULL, 0, 46, 0, MODE_SMA, PRICE_CLOSE, 0.76);
   // Envelopes (Close, Simple, 29, 0.63)
   indHandlers[113][1][0] = iEnvelopes(NULL, 0, 29, 0, MODE_SMA, PRICE_CLOSE, 0.63);
   // Stochastic (13, 4, 1)
   indHandlers[113][2][0] = iStochastic(NULL, 0, 13, 4, 1, MODE_SMA, 0);
   // Stochastic Signal (12, 9, 8)
   indHandlers[113][3][0] = iStochastic(NULL, 0, 12, 9, 8, MODE_SMA, STO_LOWHIGH);
   // Envelopes (Close, Simple, 22, 0.29)
   indHandlers[113][4][0] = iEnvelopes(NULL, 0, 22, 0, MODE_SMA, PRICE_CLOSE, 0.29);
   // RSI (Close, 19), Level: 64
   indHandlers[113][5][0] = iRSI(NULL, 0, 19, PRICE_CLOSE);
   // MACD (Close, 21, 38, 9)
   indHandlers[114][0][0] = iMACD(NULL, 0, 21, 38, 9, PRICE_CLOSE);
   // ADX (31)
   indHandlers[114][1][0] = iADX(NULL, 0, 31);
   // Williams' Percent Range (21)
   indHandlers[114][2][0] = iWPR(NULL, 0, 21);
   // Bears Power (2)
   indHandlers[114][3][0] = iBearsPower(NULL, 0, 2);
   // ADX (28)
   indHandlers[114][4][0] = iADX(NULL, 0, 28);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[114][5][0] = iAO(NULL, 0);
   // Bulls Power (44), Level: 0.0000
   indHandlers[114][6][0] = iBullsPower(NULL, 0, 44);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[115][0][0] = iAO(NULL, 0);
   // Moving Average of Oscillator (Close, 5, 38, 12)
   indHandlers[115][1][0] = iOsMA(NULL, 0, 5, 38, 12, PRICE_CLOSE);
   // Awesome Oscillator
   indHandlers[115][2][0] = iAO(NULL, 0);
   // MACD Signal (Close, 5, 47, 8)
   indHandlers[115][3][0] = iMACD(NULL, 0, 5, 47, 8, PRICE_CLOSE);
   // MACD (Close, 17, 42, 9)
   indHandlers[115][4][0] = iMACD(NULL, 0, 17, 42, 9, PRICE_CLOSE);
   // Bollinger Bands (Close, 25, 3.89)
   indHandlers[116][0][0] = iBands(NULL, 0, 25, 0, 3.89, PRICE_CLOSE);
   // Moving Average of Oscillator (Close, 22, 35, 11), Level: 0.0000
   indHandlers[116][1][0] = iOsMA(NULL, 0, 22, 35, 11, PRICE_CLOSE);
   // Stochastic Signal (15, 9, 7)
   indHandlers[116][2][0] = iStochastic(NULL, 0, 15, 9, 7, MODE_SMA, STO_LOWHIGH);
   // Bollinger Bands (Close, 33, 1.52)
   indHandlers[116][3][0] = iBands(NULL, 0, 33, 0, 1.52, PRICE_CLOSE);
   // Momentum (Close, 45), Level: 100.0000
   indHandlers[117][0][0] = iMomentum(NULL, 0, 45, PRICE_CLOSE);
   // Standard Deviation (Close, Simple, 28)
   indHandlers[117][1][0] = iStdDev(NULL, 0, 28, 0, MODE_SMA, PRICE_CLOSE);
   // Average True Range (44)
   indHandlers[117][2][0] = iATR(NULL, 0, 44);
   // RSI (Close, 48)
   indHandlers[117][3][0] = iRSI(NULL, 0, 48, PRICE_CLOSE);
   // DeMarker (24)
   indHandlers[117][4][0] = iDeMarker(NULL, 0, 24);
   // ADX (20), Level: 37.0
   indHandlers[118][0][0] = iADX(NULL, 0, 20);
   // Average True Range (4)
   indHandlers[118][1][0] = iATR(NULL, 0, 4);
   // Alligator (Smoothed, Median, 36, 27, 27, 11, 11, 1)
   indHandlers[118][2][0] = iAlligator(NULL, 0, 36, 27, 27, 11, 11, 1, MODE_SMMA, PRICE_MEDIAN);
   // Envelopes (Close, Simple, 10, 0.38)
   indHandlers[118][3][0] = iEnvelopes(NULL, 0, 10, 0, MODE_SMA, PRICE_CLOSE, 0.38);
   // Williams' Percent Range (36), Level: -3.0
   indHandlers[118][4][0] = iWPR(NULL, 0, 36);
   // Directional Indicators (1)
   indHandlers[119][0][0] = iADX(NULL, 0, 1);
   // Bears Power (27)
   indHandlers[119][1][0] = iBearsPower(NULL, 0, 27);
   // Average True Range (30), Level: 0.3000
   indHandlers[119][2][0] = iATR(NULL, 0, 30);
   // DeMarker (1)
   indHandlers[119][3][0] = iDeMarker(NULL, 0, 1);
   // Average True Range (6), Level: 0.2000
   indHandlers[119][4][0] = iATR(NULL, 0, 6);
   // Envelopes (Close, Simple, 7, 0.46)
   indHandlers[120][0][0] = iEnvelopes(NULL, 0, 7, 0, MODE_SMA, PRICE_CLOSE, 0.46);
   // Commodity Channel Index (Typical, 23)
   indHandlers[120][1][0] = iCCI(NULL, 0, 23, PRICE_TYPICAL);
   // Bollinger Bands (Close, 12, 1.24)
   indHandlers[120][2][0] = iBands(NULL, 0, 12, 0, 1.24, PRICE_CLOSE);
   // Moving Average (Simple, Close, 8, 0)
   indHandlers[120][3][0] = iMA(NULL, 0, 8, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Average (Simple, Close, 24, 0)
   indHandlers[121][0][0] = iMA(NULL, 0, 24, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic Signal (8, 5, 2)
   indHandlers[121][1][0] = iStochastic(NULL, 0, 8, 5, 2, MODE_SMA, STO_LOWHIGH);
   // Moving Average of Oscillator (Close, 17, 41, 10), Level: 0.0000
   indHandlers[121][2][0] = iOsMA(NULL, 0, 17, 41, 10, PRICE_CLOSE);
   // Bulls Power (12)
   indHandlers[121][3][0] = iBullsPower(NULL, 0, 12);
   // Pin Bar (9, 34)
   indHandlers[122][0][0] = -1;
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[122][1][0] = iAC(NULL, 0);
   // DeMarker (19), Level: 0.93
   indHandlers[122][2][0] = iDeMarker(NULL, 0, 19);
   // Moving Averages Crossover (Simple, Simple, 14, 22)
   indHandlers[123][0][0] = iMA(NULL, 0, 14, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 14, 22)
   indHandlers[123][0][1] = iMA(NULL, 0, 22, 0, MODE_SMA, PRICE_CLOSE);
   // ADX (14), Level: 17.0
   indHandlers[123][1][0] = iADX(NULL, 0, 14);
   // Stochastic (6, 3, 1), Level: 41.0
   indHandlers[123][2][0] = iStochastic(NULL, 0, 6, 3, 1, MODE_SMA, 0);
   // Moving Average (Simple, Close, 25, 0)
   indHandlers[124][0][0] = iMA(NULL, 0, 25, 0, MODE_SMA, PRICE_CLOSE);
   // Average True Range (2)
   indHandlers[124][1][0] = iATR(NULL, 0, 2);
   // Standard Deviation (Close, Simple, 28)
   indHandlers[124][2][0] = iStdDev(NULL, 0, 28, 0, MODE_SMA, PRICE_CLOSE);
   // ADX (41)
   indHandlers[124][3][0] = iADX(NULL, 0, 41);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[124][4][0] = iAC(NULL, 0);
   // Envelopes (Close, Simple, 32, 0.51)
   indHandlers[124][5][0] = iEnvelopes(NULL, 0, 32, 0, MODE_SMA, PRICE_CLOSE, 0.51);
   // Candle Color (11, 5)
   indHandlers[124][6][0] = -1;
   // Alligator (Smoothed, Median, 19, 6, 6, 3, 3, 1)
   indHandlers[125][0][0] = iAlligator(NULL, 0, 19, 6, 6, 3, 3, 1, MODE_SMMA, PRICE_MEDIAN);
   // Directional Indicators (10)
   indHandlers[125][1][0] = iADX(NULL, 0, 10);
   // Average True Range (36)
   indHandlers[125][2][0] = iATR(NULL, 0, 36);
   // Accelerator Oscillator
   indHandlers[125][3][0] = iAC(NULL, 0);
   // Bollinger Bands (Close, 41, 2.75)
   indHandlers[125][4][0] = iBands(NULL, 0, 41, 0, 2.75, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 19, 8, 8, 5, 5, 3)
   indHandlers[125][5][0] = iAlligator(NULL, 0, 19, 8, 8, 5, 5, 3, MODE_SMMA, PRICE_MEDIAN);
   // Moving Averages Crossover (Simple, Simple, 12, 21)
   indHandlers[126][0][0] = iMA(NULL, 0, 12, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 12, 21)
   indHandlers[126][0][1] = iMA(NULL, 0, 21, 0, MODE_SMA, PRICE_CLOSE);
   // Directional Indicators (41)
   indHandlers[126][1][0] = iADX(NULL, 0, 41);
   // Alligator (Smoothed, Median, 10, 6, 6, 5, 5, 1)
   indHandlers[126][2][0] = iAlligator(NULL, 0, 10, 6, 6, 5, 5, 1, MODE_SMMA, PRICE_MEDIAN);
   // Commodity Channel Index (Typical, 33), Level: 0
   indHandlers[126][3][0] = iCCI(NULL, 0, 33, PRICE_TYPICAL);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[126][4][0] = iAO(NULL, 0);
   // Average True Range (2), Level: 7.1000
   indHandlers[127][0][0] = iATR(NULL, 0, 2);
   // MACD (Close, 14, 29, 9)
   indHandlers[127][1][0] = iMACD(NULL, 0, 14, 29, 9, PRICE_CLOSE);
   // Pin Bar (8, 34)
   indHandlers[127][2][0] = -1;
   // Awesome Oscillator
   indHandlers[127][3][0] = iAO(NULL, 0);
   // Envelopes (Close, Simple, 49, 0.66)
   indHandlers[128][0][0] = iEnvelopes(NULL, 0, 49, 0, MODE_SMA, PRICE_CLOSE, 0.66);
   // Average True Range (34), Level: 12.6000
   indHandlers[128][1][0] = iATR(NULL, 0, 34);
   // Commodity Channel Index (Typical, 48), Level: 0
   indHandlers[128][2][0] = iCCI(NULL, 0, 48, PRICE_TYPICAL);
   // Candle Color (24, 4)
   indHandlers[128][3][0] = -1;
   // Bulls Power (46), Level: 0.0000
   indHandlers[128][4][0] = iBullsPower(NULL, 0, 46);
   // Candle Color (12, 2)
   indHandlers[129][0][0] = -1;
   // Standard Deviation (Close, Simple, 47), Level: 5.8000
   indHandlers[129][1][0] = iStdDev(NULL, 0, 47, 0, MODE_SMA, PRICE_CLOSE);
   // MACD Signal (Close, 21, 27, 12)
   indHandlers[129][2][0] = iMACD(NULL, 0, 21, 27, 12, PRICE_CLOSE);
   // Accelerator Oscillator
   indHandlers[129][3][0] = iAC(NULL, 0);
   // Commodity Channel Index (Typical, 41), Level: 0
   indHandlers[129][4][0] = iCCI(NULL, 0, 41, PRICE_TYPICAL);
   // Bears Power (39)
   indHandlers[129][5][0] = iBearsPower(NULL, 0, 39);
   // Candle Color (7, 1)
   indHandlers[129][6][0] = -1;
   // Alligator (Smoothed, Median, 23, 10, 10, 9, 9, 5)
   indHandlers[129][7][0] = iAlligator(NULL, 0, 23, 10, 10, 9, 9, 5, MODE_SMMA, PRICE_MEDIAN);
   // Moving Average of Oscillator (Close, 15, 45, 4)
   indHandlers[130][0][0] = iOsMA(NULL, 0, 15, 45, 4, PRICE_CLOSE);
   // Williams' Percent Range (45)
   indHandlers[130][1][0] = iWPR(NULL, 0, 45);
   // DeMarker (5), Level: 0.38
   indHandlers[130][2][0] = iDeMarker(NULL, 0, 5);
   // Stochastic (17, 1, 8)
   indHandlers[130][3][0] = iStochastic(NULL, 0, 17, 1, 8, MODE_SMA, 0);
   // Alligator (Smoothed, Median, 33, 11, 11, 9, 9, 3)
   indHandlers[130][4][0] = iAlligator(NULL, 0, 33, 11, 11, 9, 9, 3, MODE_SMMA, PRICE_MEDIAN);
   // Accelerator Oscillator
   indHandlers[130][5][0] = iAC(NULL, 0);
   // MACD Signal (Close, 10, 35, 9)
   indHandlers[131][0][0] = iMACD(NULL, 0, 10, 35, 9, PRICE_CLOSE);
   // Envelopes (Close, Simple, 39, 0.91)
   indHandlers[131][1][0] = iEnvelopes(NULL, 0, 39, 0, MODE_SMA, PRICE_CLOSE, 0.91);
   // Bears Power (29), Level: 0.0000
   indHandlers[131][2][0] = iBearsPower(NULL, 0, 29);
   // Moving Averages Crossover (Simple, Simple, 6, 38)
   indHandlers[131][3][0] = iMA(NULL, 0, 6, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 6, 38)
   indHandlers[131][3][1] = iMA(NULL, 0, 38, 0, MODE_SMA, PRICE_CLOSE);
   // Bears Power (32)
   indHandlers[132][0][0] = iBearsPower(NULL, 0, 32);
   // Average True Range (1), Level: 17.5000
   indHandlers[132][1][0] = iATR(NULL, 0, 1);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[132][2][0] = iAO(NULL, 0);
   // Stochastic Signal (9, 1, 6)
   indHandlers[132][3][0] = iStochastic(NULL, 0, 9, 1, 6, MODE_SMA, STO_LOWHIGH);
   // Moving Average (Simple, Close, 10, 0)
   indHandlers[132][4][0] = iMA(NULL, 0, 10, 0, MODE_SMA, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 32, 24, 24, 8, 8, 3)
   indHandlers[133][0][0] = iAlligator(NULL, 0, 32, 24, 24, 8, 8, 3, MODE_SMMA, PRICE_MEDIAN);
   // Average True Range (49)
   indHandlers[133][1][0] = iATR(NULL, 0, 49);
   // Envelopes (Close, Simple, 13, 0.43)
   indHandlers[133][2][0] = iEnvelopes(NULL, 0, 13, 0, MODE_SMA, PRICE_CLOSE, 0.43);
   // Candle Color (31, 4)
   indHandlers[133][3][0] = -1;
   // Alligator (Smoothed, Median, 16, 15, 15, 7, 7, 5)
   indHandlers[133][4][0] = iAlligator(NULL, 0, 16, 15, 15, 7, 7, 5, MODE_SMMA, PRICE_MEDIAN);
   // Pin Bar (8, 37)
   indHandlers[134][0][0] = -1;
   // Alligator (Smoothed, Median, 47, 21, 21, 6, 6, 1)
   indHandlers[134][1][0] = iAlligator(NULL, 0, 47, 21, 21, 6, 6, 1, MODE_SMMA, PRICE_MEDIAN);
   // Envelopes (Close, Simple, 48, 0.94)
   indHandlers[135][0][0] = iEnvelopes(NULL, 0, 48, 0, MODE_SMA, PRICE_CLOSE, 0.94);
   // Directional Indicators (28)
   indHandlers[135][1][0] = iADX(NULL, 0, 28);
   // Bulls Power (7)
   indHandlers[135][2][0] = iBullsPower(NULL, 0, 7);
   // MACD (Close, 22, 42, 9)
   indHandlers[135][3][0] = iMACD(NULL, 0, 22, 42, 9, PRICE_CLOSE);
   // Momentum (Close, 32)
   indHandlers[135][4][0] = iMomentum(NULL, 0, 32, PRICE_CLOSE);
   // Momentum (Close, 34), Level: 100.0000
   indHandlers[136][0][0] = iMomentum(NULL, 0, 34, PRICE_CLOSE);
   // Bollinger Bands (Close, 42, 2.91)
   indHandlers[136][1][0] = iBands(NULL, 0, 42, 0, 2.91, PRICE_CLOSE);
   // Standard Deviation (Close, Simple, 40)
   indHandlers[136][2][0] = iStdDev(NULL, 0, 40, 0, MODE_SMA, PRICE_CLOSE);
   // ADX (25), Level: 42.0
   indHandlers[136][3][0] = iADX(NULL, 0, 25);
   // Accelerator Oscillator
   indHandlers[137][0][0] = iAC(NULL, 0);
   // Momentum (Close, 30), Level: 101.0000
   indHandlers[137][1][0] = iMomentum(NULL, 0, 30, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 17)
   indHandlers[137][2][0] = iCCI(NULL, 0, 17, PRICE_TYPICAL);
   // Directional Indicators (31)
   indHandlers[137][3][0] = iADX(NULL, 0, 31);
   // Bears Power (23)
   indHandlers[138][0][0] = iBearsPower(NULL, 0, 23);
   // Bulls Power (46), Level: 0.0000
   indHandlers[138][1][0] = iBullsPower(NULL, 0, 46);
   // Momentum (Close, 36)
   indHandlers[138][2][0] = iMomentum(NULL, 0, 36, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 45, 20, 20, 6, 6, 4)
   indHandlers[138][3][0] = iAlligator(NULL, 0, 45, 20, 20, 6, 6, 4, MODE_SMMA, PRICE_MEDIAN);
   // Average True Range (7), Level: 11.8000
   indHandlers[138][4][0] = iATR(NULL, 0, 7);
   // Accelerator Oscillator
   indHandlers[139][0][0] = iAC(NULL, 0);
   // Envelopes (Close, Simple, 28, 0.06)
   indHandlers[139][1][0] = iEnvelopes(NULL, 0, 28, 0, MODE_SMA, PRICE_CLOSE, 0.06);
   // Bollinger Bands (Close, 48, 1.34)
   indHandlers[139][2][0] = iBands(NULL, 0, 48, 0, 1.34, PRICE_CLOSE);
   // Momentum (Close, 21), Level: 100.0000
   indHandlers[139][3][0] = iMomentum(NULL, 0, 21, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 18, 21)
   indHandlers[139][4][0] = iMA(NULL, 0, 18, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 18, 21)
   indHandlers[139][4][1] = iMA(NULL, 0, 21, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic Signal (3, 1, 1)
   indHandlers[139][5][0] = iStochastic(NULL, 0, 3, 1, 1, MODE_SMA, STO_LOWHIGH);
   // Average True Range (3), Level: 15.7000
   indHandlers[140][0][0] = iATR(NULL, 0, 3);
   // Alligator (Smoothed, Median, 26, 15, 15, 6, 6, 3)
   indHandlers[140][1][0] = iAlligator(NULL, 0, 26, 15, 15, 6, 6, 3, MODE_SMMA, PRICE_MEDIAN);
   // Standard Deviation (Close, Simple, 49), Level: 44.4000
   indHandlers[140][2][0] = iStdDev(NULL, 0, 49, 0, MODE_SMA, PRICE_CLOSE);
   // Envelopes (Close, Simple, 50, 0.22)
   indHandlers[140][3][0] = iEnvelopes(NULL, 0, 50, 0, MODE_SMA, PRICE_CLOSE, 0.22);
   // Bears Power (47), Level: 0.0000
   indHandlers[140][4][0] = iBearsPower(NULL, 0, 47);
   // Pin Bar (9, 22)
   indHandlers[140][5][0] = -1;
   // Bollinger Bands (Close, 4, 3.47)
   indHandlers[141][0][0] = iBands(NULL, 0, 4, 0, 3.47, PRICE_CLOSE);
   // Envelopes (Close, Simple, 20, 0.88)
   indHandlers[141][1][0] = iEnvelopes(NULL, 0, 20, 0, MODE_SMA, PRICE_CLOSE, 0.88);
   // Candle Color (50, 4)
   indHandlers[141][2][0] = -1;
   // Momentum (Close, 43), Level: 102.0000
   indHandlers[142][0][0] = iMomentum(NULL, 0, 43, PRICE_CLOSE);
   // Stochastic (3, 3, 1)
   indHandlers[142][1][0] = iStochastic(NULL, 0, 3, 3, 1, MODE_SMA, 0);
   // Standard Deviation (Close, Simple, 36)
   indHandlers[142][2][0] = iStdDev(NULL, 0, 36, 0, MODE_SMA, PRICE_CLOSE);
   // RSI (Close, 11), Level: 82
   indHandlers[142][3][0] = iRSI(NULL, 0, 11, PRICE_CLOSE);
   // RSI (Close, 6), Level: 50
   indHandlers[142][4][0] = iRSI(NULL, 0, 6, PRICE_CLOSE);
   // Bears Power (4), Level: 0.0000
   indHandlers[143][0][0] = iBearsPower(NULL, 0, 4);
   // Accelerator Oscillator, Level: 5.7000
   indHandlers[143][1][0] = iAC(NULL, 0);
   // Commodity Channel Index (Typical, 27), Level: 0
   indHandlers[143][2][0] = iCCI(NULL, 0, 27, PRICE_TYPICAL);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[143][3][0] = iAC(NULL, 0);
   // Bollinger Bands (Close, 48, 2.53)
   indHandlers[143][4][0] = iBands(NULL, 0, 48, 0, 2.53, PRICE_CLOSE);
   // Candle Color (8, 5)
   indHandlers[143][5][0] = -1;
   // Pin Bar (9, 37)
   indHandlers[144][0][0] = -1;
   // Moving Average (Simple, Close, 28, 0)
   indHandlers[144][1][0] = iMA(NULL, 0, 28, 0, MODE_SMA, PRICE_CLOSE);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[144][2][0] = iAC(NULL, 0);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[145][0][0] = iAC(NULL, 0);
   // Williams' Percent Range (34)
   indHandlers[145][1][0] = iWPR(NULL, 0, 34);
   // Bollinger Bands (Close, 14, 1.37)
   indHandlers[145][2][0] = iBands(NULL, 0, 14, 0, 1.37, PRICE_CLOSE);
   // ADX (46)
   indHandlers[145][3][0] = iADX(NULL, 0, 46);
   // Envelopes (Close, Simple, 46, 0.98)
   indHandlers[146][0][0] = iEnvelopes(NULL, 0, 46, 0, MODE_SMA, PRICE_CLOSE, 0.98);
   // Commodity Channel Index (Typical, 32)
   indHandlers[146][1][0] = iCCI(NULL, 0, 32, PRICE_TYPICAL);
   // Moving Averages Crossover (Simple, Simple, 21, 38)
   indHandlers[146][2][0] = iMA(NULL, 0, 21, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 21, 38)
   indHandlers[146][2][1] = iMA(NULL, 0, 38, 0, MODE_SMA, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 27, 13, 13, 9, 9, 1)
   indHandlers[147][0][0] = iAlligator(NULL, 0, 27, 13, 13, 9, 9, 1, MODE_SMMA, PRICE_MEDIAN);
   // Bears Power (3), Level: 0.0000
   indHandlers[147][1][0] = iBearsPower(NULL, 0, 3);
   // Moving Average (Simple, Close, 45, 0)
   indHandlers[147][2][0] = iMA(NULL, 0, 45, 0, MODE_SMA, PRICE_CLOSE);
   // Williams' Percent Range (33)
   indHandlers[147][3][0] = iWPR(NULL, 0, 33);
   // DeMarker (9), Level: 0.05
   indHandlers[147][4][0] = iDeMarker(NULL, 0, 9);
   // Commodity Channel Index (Typical, 34)
   indHandlers[147][5][0] = iCCI(NULL, 0, 34, PRICE_TYPICAL);
   // Standard Deviation (Close, Simple, 9), Level: 8.7000
   indHandlers[147][6][0] = iStdDev(NULL, 0, 9, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Average (Simple, Close, 41, 0)
   indHandlers[147][7][0] = iMA(NULL, 0, 41, 0, MODE_SMA, PRICE_CLOSE);
   // MACD (Close, 11, 27, 9)
   indHandlers[148][0][0] = iMACD(NULL, 0, 11, 27, 9, PRICE_CLOSE);
   // DeMarker (22), Level: 0.44
   indHandlers[148][1][0] = iDeMarker(NULL, 0, 22);
   // Commodity Channel Index (Typical, 34)
   indHandlers[148][2][0] = iCCI(NULL, 0, 34, PRICE_TYPICAL);
   // Standard Deviation (Close, Simple, 32)
   indHandlers[148][3][0] = iStdDev(NULL, 0, 32, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic Signal (17, 9, 5)
   indHandlers[148][4][0] = iStochastic(NULL, 0, 17, 9, 5, MODE_SMA, STO_LOWHIGH);
   // Accelerator Oscillator
   indHandlers[148][5][0] = iAC(NULL, 0);
   // Awesome Oscillator
   indHandlers[148][6][0] = iAO(NULL, 0);
   // RSI (Close, 50), Level: 30
   indHandlers[149][0][0] = iRSI(NULL, 0, 50, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 13, 32)
   indHandlers[149][1][0] = iMA(NULL, 0, 13, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 13, 32)
   indHandlers[149][1][1] = iMA(NULL, 0, 32, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic (9, 9, 2)
   indHandlers[149][2][0] = iStochastic(NULL, 0, 9, 9, 2, MODE_SMA, 0);
   // Commodity Channel Index (Typical, 9)
   indHandlers[150][0][0] = iCCI(NULL, 0, 9, PRICE_TYPICAL);
   // DeMarker (25), Level: 0.63
   indHandlers[150][1][0] = iDeMarker(NULL, 0, 25);
   // Average True Range (48), Level: 6.6000
   indHandlers[150][2][0] = iATR(NULL, 0, 48);
   // Envelopes (Close, Simple, 13, 0.68)
   indHandlers[150][3][0] = iEnvelopes(NULL, 0, 13, 0, MODE_SMA, PRICE_CLOSE, 0.68);
   // Bulls Power (22), Level: 0.0000
   indHandlers[150][4][0] = iBullsPower(NULL, 0, 22);
   // Accelerator Oscillator
   indHandlers[150][5][0] = iAC(NULL, 0);
   // Pin Bar (9, 49)
   indHandlers[151][0][0] = -1;
   // Moving Averages Crossover (Simple, Simple, 16, 32)
   indHandlers[151][1][0] = iMA(NULL, 0, 16, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 16, 32)
   indHandlers[151][1][1] = iMA(NULL, 0, 32, 0, MODE_SMA, PRICE_CLOSE);
   // DeMarker (27)
   indHandlers[151][2][0] = iDeMarker(NULL, 0, 27);
   // Stochastic (5, 4, 5), Level: 4.0
   indHandlers[151][3][0] = iStochastic(NULL, 0, 5, 4, 5, MODE_SMA, 0);
   // Moving Average of Oscillator (Close, 12, 17, 13), Level: 0.0000
   indHandlers[152][0][0] = iOsMA(NULL, 0, 12, 17, 13, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 26, 15, 15, 12, 12, 2)
   indHandlers[152][1][0] = iAlligator(NULL, 0, 26, 15, 15, 12, 12, 2, MODE_SMMA, PRICE_MEDIAN);
   // Commodity Channel Index (Typical, 2)
   indHandlers[152][2][0] = iCCI(NULL, 0, 2, PRICE_TYPICAL);
   // Moving Average (Simple, Close, 13, 0)
   indHandlers[152][3][0] = iMA(NULL, 0, 13, 0, MODE_SMA, PRICE_CLOSE);
   // MACD Signal (Close, 11, 30, 5)
   indHandlers[152][4][0] = iMACD(NULL, 0, 11, 30, 5, PRICE_CLOSE);
   // DeMarker (43)
   indHandlers[152][5][0] = iDeMarker(NULL, 0, 43);
   // MACD (Close, 5, 24, 9)
   indHandlers[152][6][0] = iMACD(NULL, 0, 5, 24, 9, PRICE_CLOSE);
   // Average True Range (30)
   indHandlers[152][7][0] = iATR(NULL, 0, 30);
   // Bollinger Bands (Close, 19, 1.67)
   indHandlers[152][8][0] = iBands(NULL, 0, 19, 0, 1.67, PRICE_CLOSE);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[153][0][0] = iAO(NULL, 0);
   // ADX (42)
   indHandlers[153][1][0] = iADX(NULL, 0, 42);
   // Stochastic (4, 2, 3), Level: 69.0
   indHandlers[153][2][0] = iStochastic(NULL, 0, 4, 2, 3, MODE_SMA, 0);
   // Moving Average (Simple, Close, 31, 0)
   indHandlers[153][3][0] = iMA(NULL, 0, 31, 0, MODE_SMA, PRICE_CLOSE);
   // MACD Signal (Close, 19, 24, 9)
   indHandlers[153][4][0] = iMACD(NULL, 0, 19, 24, 9, PRICE_CLOSE);
   // Moving Average (Simple, Close, 14, 0)
   indHandlers[153][5][0] = iMA(NULL, 0, 14, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 16, 50)
   indHandlers[154][0][0] = iMA(NULL, 0, 16, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 16, 50)
   indHandlers[154][0][1] = iMA(NULL, 0, 50, 0, MODE_SMA, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 12)
   indHandlers[154][1][0] = iCCI(NULL, 0, 12, PRICE_TYPICAL);
   // Moving Average (Simple, Close, 1, 0)
   indHandlers[154][2][0] = iMA(NULL, 0, 1, 0, MODE_SMA, PRICE_CLOSE);
   // Bears Power (15), Level: -33.9000
   indHandlers[154][3][0] = iBearsPower(NULL, 0, 15);
   // Stochastic Signal (8, 5, 2)
   indHandlers[154][4][0] = iStochastic(NULL, 0, 8, 5, 2, MODE_SMA, STO_LOWHIGH);
   // Stochastic Signal (12, 7, 9)
   indHandlers[154][5][0] = iStochastic(NULL, 0, 12, 7, 9, MODE_SMA, STO_LOWHIGH);
   // RSI (Close, 48), Level: 30
   indHandlers[155][0][0] = iRSI(NULL, 0, 48, PRICE_CLOSE);
   // ADX (30)
   indHandlers[155][1][0] = iADX(NULL, 0, 30);
   // RSI (Close, 42)
   indHandlers[155][2][0] = iRSI(NULL, 0, 42, PRICE_CLOSE);
   // Moving Average (Simple, Close, 50, 0)
   indHandlers[155][3][0] = iMA(NULL, 0, 50, 0, MODE_SMA, PRICE_CLOSE);
   // MACD (Close, 12, 38, 9)
   indHandlers[156][0][0] = iMACD(NULL, 0, 12, 38, 9, PRICE_CLOSE);
   // Standard Deviation (Close, Simple, 47)
   indHandlers[156][1][0] = iStdDev(NULL, 0, 47, 0, MODE_SMA, PRICE_CLOSE);
   // Directional Indicators (13)
   indHandlers[156][2][0] = iADX(NULL, 0, 13);
   // Standard Deviation (Close, Simple, 46)
   indHandlers[156][3][0] = iStdDev(NULL, 0, 46, 0, MODE_SMA, PRICE_CLOSE);
   // DeMarker (42), Level: 0.19
   indHandlers[156][4][0] = iDeMarker(NULL, 0, 42);
   // MACD Signal (Close, 21, 38, 8)
   indHandlers[156][5][0] = iMACD(NULL, 0, 21, 38, 8, PRICE_CLOSE);
   // Pin Bar (9, 37)
   indHandlers[157][0][0] = -1;
   // Moving Average (Simple, Close, 28, 0)
   indHandlers[157][1][0] = iMA(NULL, 0, 28, 0, MODE_SMA, PRICE_CLOSE);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[157][2][0] = iAC(NULL, 0);
   // ADX (23), Level: 34.0
   indHandlers[157][3][0] = iADX(NULL, 0, 23);
   // Stochastic (4, 3, 1), Level: 37.0
   indHandlers[158][0][0] = iStochastic(NULL, 0, 4, 3, 1, MODE_SMA, 0);
   // Stochastic (2, 1, 2), Level: 60.0
   indHandlers[158][1][0] = iStochastic(NULL, 0, 2, 1, 2, MODE_SMA, 0);
   // Stochastic Signal (5, 2, 1)
   indHandlers[158][2][0] = iStochastic(NULL, 0, 5, 2, 1, MODE_SMA, STO_LOWHIGH);
   // Standard Deviation (Close, Simple, 2)
   indHandlers[158][3][0] = iStdDev(NULL, 0, 2, 0, MODE_SMA, PRICE_CLOSE);
   // Awesome Oscillator
   indHandlers[158][4][0] = iAO(NULL, 0);
   // MACD Signal (Close, 7, 49, 7)
   indHandlers[158][5][0] = iMACD(NULL, 0, 7, 49, 7, PRICE_CLOSE);
   // Awesome Oscillator
   indHandlers[158][6][0] = iAO(NULL, 0);
   // Moving Average (Simple, Close, 43, 0)
   indHandlers[158][7][0] = iMA(NULL, 0, 43, 0, MODE_SMA, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 22, 11, 11, 6, 6, 2)
   indHandlers[159][0][0] = iAlligator(NULL, 0, 22, 11, 11, 6, 6, 2, MODE_SMMA, PRICE_MEDIAN);
   // Moving Average of Oscillator (Close, 11, 13, 3)
   indHandlers[159][1][0] = iOsMA(NULL, 0, 11, 13, 3, PRICE_CLOSE);
   // Candle Color (45, 2)
   indHandlers[159][2][0] = -1;
   // Bears Power (2)
   indHandlers[159][3][0] = iBearsPower(NULL, 0, 2);
   // Directional Indicators (9)
   indHandlers[159][4][0] = iADX(NULL, 0, 9);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[159][5][0] = iAC(NULL, 0);
   // Williams' Percent Range (49)
   indHandlers[159][6][0] = iWPR(NULL, 0, 49);
   // Pin Bar (9, 49)
   indHandlers[160][0][0] = -1;
   // Pin Bar (7, 49)
   indHandlers[160][1][0] = -1;
   // DeMarker (27)
   indHandlers[160][2][0] = iDeMarker(NULL, 0, 27);
   // Stochastic (5, 4, 5), Level: 4.0
   indHandlers[160][3][0] = iStochastic(NULL, 0, 5, 4, 5, MODE_SMA, 0);
   // Williams' Percent Range (3), Level: -98.0
   indHandlers[160][4][0] = iWPR(NULL, 0, 3);
   // Standard Deviation (Close, Simple, 6), Level: 9.3000
   indHandlers[161][0][0] = iStdDev(NULL, 0, 6, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic Signal (3, 2, 1)
   indHandlers[161][1][0] = iStochastic(NULL, 0, 3, 2, 1, MODE_SMA, STO_LOWHIGH);
   // MACD Signal (Close, 11, 15, 9)
   indHandlers[161][2][0] = iMACD(NULL, 0, 11, 15, 9, PRICE_CLOSE);
   // DeMarker (2), Level: 0.88
   indHandlers[161][3][0] = iDeMarker(NULL, 0, 2);
   // Bollinger Bands (Close, 5, 3.49)
   indHandlers[161][4][0] = iBands(NULL, 0, 5, 0, 3.49, PRICE_CLOSE);
   // Candle Color (15, 3)
   indHandlers[161][5][0] = -1;
   // Bollinger Bands (Close, 34, 3.51)
   indHandlers[162][0][0] = iBands(NULL, 0, 34, 0, 3.51, PRICE_CLOSE);
   // Directional Indicators (29)
   indHandlers[162][1][0] = iADX(NULL, 0, 29);
   // Envelopes (Close, Simple, 38, 0.96)
   indHandlers[162][2][0] = iEnvelopes(NULL, 0, 38, 0, MODE_SMA, PRICE_CLOSE, 0.96);
   // Average True Range (23)
   indHandlers[162][3][0] = iATR(NULL, 0, 23);
   // Accelerator Oscillator, Level: 8.2000
   indHandlers[163][0][0] = iAC(NULL, 0);
   // Momentum (Close, 48)
   indHandlers[163][1][0] = iMomentum(NULL, 0, 48, PRICE_CLOSE);
   // Envelopes (Close, Simple, 34, 0.10)
   indHandlers[163][2][0] = iEnvelopes(NULL, 0, 34, 0, MODE_SMA, PRICE_CLOSE, 0.10);
   // Stochastic Signal (11, 5, 8)
   indHandlers[163][3][0] = iStochastic(NULL, 0, 11, 5, 8, MODE_SMA, STO_LOWHIGH);
   // Envelopes (Close, Simple, 34, 0.97)
   indHandlers[164][0][0] = iEnvelopes(NULL, 0, 34, 0, MODE_SMA, PRICE_CLOSE, 0.97);
   // Bears Power (50), Level: 0.0000
   indHandlers[164][1][0] = iBearsPower(NULL, 0, 50);
   // Bollinger Bands (Close, 22, 2.68)
   indHandlers[164][2][0] = iBands(NULL, 0, 22, 0, 2.68, PRICE_CLOSE);
   // MACD Signal (Close, 22, 40, 11)
   indHandlers[164][3][0] = iMACD(NULL, 0, 22, 40, 11, PRICE_CLOSE);
   // Moving Average (Simple, Close, 17, 0)
   indHandlers[164][4][0] = iMA(NULL, 0, 17, 0, MODE_SMA, PRICE_CLOSE);
   // MACD (Close, 25, 43, 9)
   indHandlers[164][5][0] = iMACD(NULL, 0, 25, 43, 9, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 21)
   indHandlers[164][6][0] = iCCI(NULL, 0, 21, PRICE_TYPICAL);
   // MACD Signal (Close, 21, 28, 11)
   indHandlers[165][0][0] = iMACD(NULL, 0, 21, 28, 11, PRICE_CLOSE);
   // Moving Average of Oscillator (Close, 6, 43, 5), Level: -3.4000
   indHandlers[165][1][0] = iOsMA(NULL, 0, 6, 43, 5, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 27)
   indHandlers[165][2][0] = iCCI(NULL, 0, 27, PRICE_TYPICAL);
   // Moving Averages Crossover (Simple, Simple, 20, 30)
   indHandlers[165][3][0] = iMA(NULL, 0, 20, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 20, 30)
   indHandlers[165][3][1] = iMA(NULL, 0, 30, 0, MODE_SMA, PRICE_CLOSE);
   // Envelopes (Close, Simple, 16, 0.78)
   indHandlers[165][4][0] = iEnvelopes(NULL, 0, 16, 0, MODE_SMA, PRICE_CLOSE, 0.78);
   // Candle Color (14, 1)
   indHandlers[165][5][0] = -1;
   // RSI (Close, 50), Level: 30
   indHandlers[166][0][0] = iRSI(NULL, 0, 50, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 13, 32)
   indHandlers[166][1][0] = iMA(NULL, 0, 13, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 13, 32)
   indHandlers[166][1][1] = iMA(NULL, 0, 32, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic (9, 9, 2)
   indHandlers[166][2][0] = iStochastic(NULL, 0, 9, 9, 2, MODE_SMA, 0);
   // Commodity Channel Index (Typical, 34), Level: 0
   indHandlers[167][0][0] = iCCI(NULL, 0, 34, PRICE_TYPICAL);
   // Momentum (Close, 48)
   indHandlers[167][1][0] = iMomentum(NULL, 0, 48, PRICE_CLOSE);
   // Moving Average (Simple, Close, 14, 0)
   indHandlers[167][2][0] = iMA(NULL, 0, 14, 0, MODE_SMA, PRICE_CLOSE);
   // Average True Range (49)
   indHandlers[167][3][0] = iATR(NULL, 0, 49);
   // Williams' Percent Range (19)
   indHandlers[167][4][0] = iWPR(NULL, 0, 19);
   // Envelopes (Close, Simple, 18, 0.20)
   indHandlers[167][5][0] = iEnvelopes(NULL, 0, 18, 0, MODE_SMA, PRICE_CLOSE, 0.20);
   // Envelopes (Close, Simple, 2, 0.63)
   indHandlers[167][6][0] = iEnvelopes(NULL, 0, 2, 0, MODE_SMA, PRICE_CLOSE, 0.63);
   // Candle Color (22, 2)
   indHandlers[168][0][0] = -1;
   // Directional Indicators (5)
   indHandlers[168][1][0] = iADX(NULL, 0, 5);
   // Awesome Oscillator
   indHandlers[168][2][0] = iAO(NULL, 0);
   // Alligator (Smoothed, Median, 31, 27, 27, 11, 11, 2)
   indHandlers[169][0][0] = iAlligator(NULL, 0, 31, 27, 27, 11, 11, 2, MODE_SMMA, PRICE_MEDIAN);
   // Moving Averages Crossover (Simple, Simple, 20, 44)
   indHandlers[169][1][0] = iMA(NULL, 0, 20, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 20, 44)
   indHandlers[169][1][1] = iMA(NULL, 0, 44, 0, MODE_SMA, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 12, 11, 11, 2, 2, 1)
   indHandlers[169][2][0] = iAlligator(NULL, 0, 12, 11, 11, 2, 2, 1, MODE_SMMA, PRICE_MEDIAN);
   // Pin Bar (9, 50)
   indHandlers[169][3][0] = -1;
   // Stochastic Signal (16, 8, 10)
   indHandlers[170][0][0] = iStochastic(NULL, 0, 16, 8, 10, MODE_SMA, STO_LOWHIGH);
   // Moving Average (Simple, Close, 16, 0)
   indHandlers[170][1][0] = iMA(NULL, 0, 16, 0, MODE_SMA, PRICE_CLOSE);
   // MACD Signal (Close, 23, 34, 4)
   indHandlers[170][2][0] = iMACD(NULL, 0, 23, 34, 4, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 24)
   indHandlers[170][3][0] = iCCI(NULL, 0, 24, PRICE_TYPICAL);
   // Moving Average (Simple, Close, 10, 0)
   indHandlers[170][4][0] = iMA(NULL, 0, 10, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic (4, 1, 1)
   indHandlers[170][5][0] = iStochastic(NULL, 0, 4, 1, 1, MODE_SMA, 0);
   // Bears Power (41), Level: 0.0000
   indHandlers[170][6][0] = iBearsPower(NULL, 0, 41);
   // Envelopes (Close, Simple, 17, 0.47)
   indHandlers[170][7][0] = iEnvelopes(NULL, 0, 17, 0, MODE_SMA, PRICE_CLOSE, 0.47);
   // Envelopes (Close, Simple, 22, 0.91)
   indHandlers[170][8][0] = iEnvelopes(NULL, 0, 22, 0, MODE_SMA, PRICE_CLOSE, 0.91);
   // Stochastic Signal (8, 2, 5)
   indHandlers[171][0][0] = iStochastic(NULL, 0, 8, 2, 5, MODE_SMA, STO_LOWHIGH);
   // Envelopes (Close, Simple, 11, 0.06)
   indHandlers[171][1][0] = iEnvelopes(NULL, 0, 11, 0, MODE_SMA, PRICE_CLOSE, 0.06);
   // Momentum (Close, 49)
   indHandlers[171][2][0] = iMomentum(NULL, 0, 49, PRICE_CLOSE);
   // RSI (Close, 35), Level: 59
   indHandlers[171][3][0] = iRSI(NULL, 0, 35, PRICE_CLOSE);
   // Momentum (Close, 34), Level: 102.0000
   indHandlers[172][0][0] = iMomentum(NULL, 0, 34, PRICE_CLOSE);
   // DeMarker (39)
   indHandlers[172][1][0] = iDeMarker(NULL, 0, 39);
   // MACD (Close, 21, 24, 9)
   indHandlers[172][2][0] = iMACD(NULL, 0, 21, 24, 9, PRICE_CLOSE);
   // Stochastic (11, 4, 11), Level: 71.0
   indHandlers[173][0][0] = iStochastic(NULL, 0, 11, 4, 11, MODE_SMA, 0);
   // Stochastic (5, 3, 1), Level: 49.0
   indHandlers[173][1][0] = iStochastic(NULL, 0, 5, 3, 1, MODE_SMA, 0);
   // RSI (Close, 50), Level: 65
   indHandlers[173][2][0] = iRSI(NULL, 0, 50, PRICE_CLOSE);
   // Average True Range (28), Level: 3.0000
   indHandlers[173][3][0] = iATR(NULL, 0, 28);
   // Envelopes (Close, Simple, 39, 0.18)
   indHandlers[173][4][0] = iEnvelopes(NULL, 0, 39, 0, MODE_SMA, PRICE_CLOSE, 0.18);
   // Envelopes (Close, Simple, 3, 0.56)
   indHandlers[174][0][0] = iEnvelopes(NULL, 0, 3, 0, MODE_SMA, PRICE_CLOSE, 0.56);
   // Pin Bar (7, 49)
   indHandlers[174][1][0] = -1;
   // DeMarker (27)
   indHandlers[174][2][0] = iDeMarker(NULL, 0, 27);
   // Alligator (Smoothed, Median, 42, 22, 22, 11, 11, 1)
   indHandlers[174][3][0] = iAlligator(NULL, 0, 42, 22, 22, 11, 11, 1, MODE_SMMA, PRICE_MEDIAN);
   // RSI (Close, 23), Level: 63
   indHandlers[174][4][0] = iRSI(NULL, 0, 23, PRICE_CLOSE);
   // Bulls Power (44), Level: 0.0000
   indHandlers[175][0][0] = iBullsPower(NULL, 0, 44);
   // Moving Average (Simple, Close, 29, 0)
   indHandlers[175][1][0] = iMA(NULL, 0, 29, 0, MODE_SMA, PRICE_CLOSE);
   // Standard Deviation (Close, Simple, 21)
   indHandlers[175][2][0] = iStdDev(NULL, 0, 21, 0, MODE_SMA, PRICE_CLOSE);
   // MACD (Close, 8, 42, 9)
   indHandlers[175][3][0] = iMACD(NULL, 0, 8, 42, 9, PRICE_CLOSE);
   // MACD (Close, 20, 22, 9)
   indHandlers[175][4][0] = iMACD(NULL, 0, 20, 22, 9, PRICE_CLOSE);
   // Bears Power (4)
   indHandlers[175][5][0] = iBearsPower(NULL, 0, 4);
   // Moving Average of Oscillator (Close, 22, 31, 9)
   indHandlers[175][6][0] = iOsMA(NULL, 0, 22, 31, 9, PRICE_CLOSE);
   // Stochastic (14, 9, 13)
   indHandlers[175][7][0] = iStochastic(NULL, 0, 14, 9, 13, MODE_SMA, 0);
   // RSI (Close, 31), Level: 37
   indHandlers[175][8][0] = iRSI(NULL, 0, 31, PRICE_CLOSE);
   // Candle Color (39, 1)
   indHandlers[176][0][0] = -1;
   // Williams' Percent Range (42), Level: -20.0
   indHandlers[176][1][0] = iWPR(NULL, 0, 42);
   // Stochastic (12, 6, 3)
   indHandlers[176][2][0] = iStochastic(NULL, 0, 12, 6, 3, MODE_SMA, 0);
   // Pin Bar (9, 46)
   indHandlers[177][0][0] = -1;
   // Momentum (Close, 36)
   indHandlers[177][1][0] = iMomentum(NULL, 0, 36, PRICE_CLOSE);
   // Pin Bar (9, 41)
   indHandlers[178][0][0] = -1;
   // Commodity Channel Index (Typical, 21)
   indHandlers[178][1][0] = iCCI(NULL, 0, 21, PRICE_TYPICAL);
   // Bears Power (2), Level: 0.0000
   indHandlers[179][0][0] = iBearsPower(NULL, 0, 2);
   // Candle Color (35, 3)
   indHandlers[179][1][0] = -1;
   // Pin Bar (9, 30)
   indHandlers[179][2][0] = -1;
   // Envelopes (Close, Simple, 48, 0.94)
   indHandlers[180][0][0] = iEnvelopes(NULL, 0, 48, 0, MODE_SMA, PRICE_CLOSE, 0.94);
   // Directional Indicators (28)
   indHandlers[180][1][0] = iADX(NULL, 0, 28);
   // Bulls Power (7)
   indHandlers[180][2][0] = iBullsPower(NULL, 0, 7);
   // MACD (Close, 22, 42, 9)
   indHandlers[180][3][0] = iMACD(NULL, 0, 22, 42, 9, PRICE_CLOSE);
   // Envelopes (Close, Simple, 13, 0.28)
   indHandlers[180][4][0] = iEnvelopes(NULL, 0, 13, 0, MODE_SMA, PRICE_CLOSE, 0.28);
   // Alligator (Smoothed, Median, 15, 10, 10, 4, 4, 1)
   indHandlers[181][0][0] = iAlligator(NULL, 0, 15, 10, 10, 4, 4, 1, MODE_SMMA, PRICE_MEDIAN);
   // Moving Averages Crossover (Simple, Simple, 20, 44)
   indHandlers[181][1][0] = iMA(NULL, 0, 20, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 20, 44)
   indHandlers[181][1][1] = iMA(NULL, 0, 44, 0, MODE_SMA, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 12, 11, 11, 2, 2, 1)
   indHandlers[181][2][0] = iAlligator(NULL, 0, 12, 11, 11, 2, 2, 1, MODE_SMMA, PRICE_MEDIAN);
   // Pin Bar (9, 50)
   indHandlers[181][3][0] = -1;
   // Envelopes (Close, Simple, 5, 0.80)
   indHandlers[182][0][0] = iEnvelopes(NULL, 0, 5, 0, MODE_SMA, PRICE_CLOSE, 0.80);
   // DeMarker (39)
   indHandlers[182][1][0] = iDeMarker(NULL, 0, 39);
   // Bulls Power (5), Level: 0.0000
   indHandlers[182][2][0] = iBullsPower(NULL, 0, 5);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[182][3][0] = iAC(NULL, 0);
   // Bollinger Bands (Close, 41, 2.15)
   indHandlers[182][4][0] = iBands(NULL, 0, 41, 0, 2.15, PRICE_CLOSE);
   // Bears Power (29)
   indHandlers[183][0][0] = iBearsPower(NULL, 0, 29);
   // MACD Signal (Close, 13, 44, 9)
   indHandlers[183][1][0] = iMACD(NULL, 0, 13, 44, 9, PRICE_CLOSE);
   // Awesome Oscillator
   indHandlers[183][2][0] = iAO(NULL, 0);
   // Williams' Percent Range (35)
   indHandlers[183][3][0] = iWPR(NULL, 0, 35);
   // MACD (Close, 24, 38, 9)
   indHandlers[183][4][0] = iMACD(NULL, 0, 24, 38, 9, PRICE_CLOSE);
   // DeMarker (10), Level: 0.09
   indHandlers[183][5][0] = iDeMarker(NULL, 0, 10);
   // Moving Average of Oscillator (Close, 22, 26, 6), Level: 0.0000
   indHandlers[184][0][0] = iOsMA(NULL, 0, 22, 26, 6, PRICE_CLOSE);
   // MACD Signal (Close, 24, 31, 10)
   indHandlers[184][1][0] = iMACD(NULL, 0, 24, 31, 10, PRICE_CLOSE);
   // Directional Indicators (9)
   indHandlers[184][2][0] = iADX(NULL, 0, 9);
   // Moving Average (Simple, Close, 34, 0)
   indHandlers[184][3][0] = iMA(NULL, 0, 34, 0, MODE_SMA, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 29), Level: -60
   indHandlers[184][4][0] = iCCI(NULL, 0, 29, PRICE_TYPICAL);
   // RSI (Close, 38), Level: 30
   indHandlers[185][0][0] = iRSI(NULL, 0, 38, PRICE_CLOSE);
   // ADX (14)
   indHandlers[185][1][0] = iADX(NULL, 0, 14);
   // Moving Average (Simple, Close, 50, 0)
   indHandlers[185][2][0] = iMA(NULL, 0, 50, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Average of Oscillator (Close, 7, 40, 13), Level: 5.2000
   indHandlers[186][0][0] = iOsMA(NULL, 0, 7, 40, 13, PRICE_CLOSE);
   // Envelopes (Close, Simple, 33, 0.06)
   indHandlers[186][1][0] = iEnvelopes(NULL, 0, 33, 0, MODE_SMA, PRICE_CLOSE, 0.06);
   // Bollinger Bands (Close, 9, 1.03)
   indHandlers[186][2][0] = iBands(NULL, 0, 9, 0, 1.03, PRICE_CLOSE);
   // Awesome Oscillator, Level: 3.6000
   indHandlers[186][3][0] = iAO(NULL, 0);
   // Standard Deviation (Close, Simple, 4), Level: 2.4000
   indHandlers[187][0][0] = iStdDev(NULL, 0, 4, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Average (Simple, Close, 48, 0)
   indHandlers[187][1][0] = iMA(NULL, 0, 48, 0, MODE_SMA, PRICE_CLOSE);
   // Bollinger Bands (Close, 24, 2.07)
   indHandlers[187][2][0] = iBands(NULL, 0, 24, 0, 2.07, PRICE_CLOSE);
   // Moving Average (Simple, Close, 42, 0)
   indHandlers[187][3][0] = iMA(NULL, 0, 42, 0, MODE_SMA, PRICE_CLOSE);
   // Awesome Oscillator
   indHandlers[187][4][0] = iAO(NULL, 0);
   // Moving Average (Simple, Close, 17, 0)
   indHandlers[188][0][0] = iMA(NULL, 0, 17, 0, MODE_SMA, PRICE_CLOSE);
   // Candle Color (42, 2)
   indHandlers[188][1][0] = -1;
   // Directional Indicators (5)
   indHandlers[188][2][0] = iADX(NULL, 0, 5);
   // Alligator (Smoothed, Median, 23, 21, 21, 7, 7, 2)
   indHandlers[188][3][0] = iAlligator(NULL, 0, 23, 21, 21, 7, 7, 2, MODE_SMMA, PRICE_MEDIAN);
   // Stochastic (13, 5, 3), Level: 54.0
   indHandlers[188][4][0] = iStochastic(NULL, 0, 13, 5, 3, MODE_SMA, 0);
   // Commodity Channel Index (Typical, 5), Level: 0
   indHandlers[188][5][0] = iCCI(NULL, 0, 5, PRICE_TYPICAL);
   // Bears Power (8)
   indHandlers[188][6][0] = iBearsPower(NULL, 0, 8);
   // MACD Signal (Close, 20, 27, 6)
   indHandlers[188][7][0] = iMACD(NULL, 0, 20, 27, 6, PRICE_CLOSE);
   // Bulls Power (12), Level: 0.0000
   indHandlers[189][0][0] = iBullsPower(NULL, 0, 12);
   // Average True Range (1), Level: 17.5000
   indHandlers[189][1][0] = iATR(NULL, 0, 1);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[189][2][0] = iAO(NULL, 0);
   // Stochastic Signal (9, 1, 6)
   indHandlers[189][3][0] = iStochastic(NULL, 0, 9, 1, 6, MODE_SMA, STO_LOWHIGH);
   // Moving Average (Simple, Close, 10, 0)
   indHandlers[189][4][0] = iMA(NULL, 0, 10, 0, MODE_SMA, PRICE_CLOSE);
   // Average True Range (1), Level: 17.5000
   indHandlers[190][0][0] = iATR(NULL, 0, 1);
   // Bulls Power (3), Level: 0.0000
   indHandlers[190][1][0] = iBullsPower(NULL, 0, 3);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[190][2][0] = iAO(NULL, 0);
   // DeMarker (33)
   indHandlers[190][3][0] = iDeMarker(NULL, 0, 33);
   // Moving Average (Simple, Close, 10, 0)
   indHandlers[190][4][0] = iMA(NULL, 0, 10, 0, MODE_SMA, PRICE_CLOSE);
   // Momentum (Close, 37), Level: 100.0000
   indHandlers[190][5][0] = iMomentum(NULL, 0, 37, PRICE_CLOSE);
   // MACD (Close, 16, 36, 9)
   indHandlers[191][0][0] = iMACD(NULL, 0, 16, 36, 9, PRICE_CLOSE);
   // Average True Range (15)
   indHandlers[191][1][0] = iATR(NULL, 0, 15);
   // Moving Average (Simple, Close, 18, 0)
   indHandlers[191][2][0] = iMA(NULL, 0, 18, 0, MODE_SMA, PRICE_CLOSE);
   // MACD Signal (Close, 13, 17, 3)
   indHandlers[191][3][0] = iMACD(NULL, 0, 13, 17, 3, PRICE_CLOSE);
   // Envelopes (Close, Simple, 41, 0.31)
   indHandlers[191][4][0] = iEnvelopes(NULL, 0, 41, 0, MODE_SMA, PRICE_CLOSE, 0.31);
   // Momentum (Close, 45)
   indHandlers[191][5][0] = iMomentum(NULL, 0, 45, PRICE_CLOSE);
   // Bollinger Bands (Close, 32, 2.50)
   indHandlers[192][0][0] = iBands(NULL, 0, 32, 0, 2.50, PRICE_CLOSE);
   // Candle Color (48, 2)
   indHandlers[192][1][0] = -1;
   // Alligator (Smoothed, Median, 31, 24, 24, 15, 15, 5)
   indHandlers[192][2][0] = iAlligator(NULL, 0, 31, 24, 24, 15, 15, 5, MODE_SMMA, PRICE_MEDIAN);
   // Commodity Channel Index (Typical, 20), Level: 0
   indHandlers[192][3][0] = iCCI(NULL, 0, 20, PRICE_TYPICAL);
   // Alligator (Smoothed, Median, 28, 12, 12, 7, 7, 3)
   indHandlers[193][0][0] = iAlligator(NULL, 0, 28, 12, 12, 7, 7, 3, MODE_SMMA, PRICE_MEDIAN);
   // Moving Averages Crossover (Simple, Simple, 9, 20)
   indHandlers[193][1][0] = iMA(NULL, 0, 9, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 9, 20)
   indHandlers[193][1][1] = iMA(NULL, 0, 20, 0, MODE_SMA, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 20)
   indHandlers[193][2][0] = iCCI(NULL, 0, 20, PRICE_TYPICAL);
   // Directional Indicators (38)
   indHandlers[193][3][0] = iADX(NULL, 0, 38);
   // RSI (Close, 31), Level: 30
   indHandlers[194][0][0] = iRSI(NULL, 0, 31, PRICE_CLOSE);
   // Bulls Power (35), Level: 0.0000
   indHandlers[194][1][0] = iBullsPower(NULL, 0, 35);
   // MACD (Close, 18, 38, 9)
   indHandlers[195][0][0] = iMACD(NULL, 0, 18, 38, 9, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 22, 18, 18, 7, 7, 4)
   indHandlers[195][1][0] = iAlligator(NULL, 0, 22, 18, 18, 7, 7, 4, MODE_SMMA, PRICE_MEDIAN);
   // Moving Averages Crossover (Simple, Simple, 10, 23)
   indHandlers[195][2][0] = iMA(NULL, 0, 10, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 10, 23)
   indHandlers[195][2][1] = iMA(NULL, 0, 23, 0, MODE_SMA, PRICE_CLOSE);
   // MACD Signal (Close, 20, 32, 8)
   indHandlers[195][3][0] = iMACD(NULL, 0, 20, 32, 8, PRICE_CLOSE);
   // Stochastic (9, 6, 7)
   indHandlers[195][4][0] = iStochastic(NULL, 0, 9, 6, 7, MODE_SMA, 0);
   // Moving Average of Oscillator (Close, 18, 36, 13), Level: 0.0000
   indHandlers[195][5][0] = iOsMA(NULL, 0, 18, 36, 13, PRICE_CLOSE);
   // Bulls Power (17)
   indHandlers[195][6][0] = iBullsPower(NULL, 0, 17);
   // Moving Average (Simple, Close, 16, 0)
   indHandlers[196][0][0] = iMA(NULL, 0, 16, 0, MODE_SMA, PRICE_CLOSE);
   // RSI (Close, 22)
   indHandlers[196][1][0] = iRSI(NULL, 0, 22, PRICE_CLOSE);
   // Directional Indicators (46)
   indHandlers[196][2][0] = iADX(NULL, 0, 46);
   // Bears Power (40), Level: 0.0000
   indHandlers[196][3][0] = iBearsPower(NULL, 0, 40);
   // Standard Deviation (Close, Simple, 9)
   indHandlers[196][4][0] = iStdDev(NULL, 0, 9, 0, MODE_SMA, PRICE_CLOSE);
   // Awesome Oscillator
   indHandlers[196][5][0] = iAO(NULL, 0);
   // Stochastic Signal (8, 5, 2)
   indHandlers[196][6][0] = iStochastic(NULL, 0, 8, 5, 2, MODE_SMA, STO_LOWHIGH);
   // Pin Bar (9, 34)
   indHandlers[197][0][0] = -1;
   // MACD Signal (Close, 13, 46, 11)
   indHandlers[197][1][0] = iMACD(NULL, 0, 13, 46, 11, PRICE_CLOSE);
   // Pin Bar (4, 32)
   indHandlers[197][2][0] = -1;
   // ADX (19)
   indHandlers[197][3][0] = iADX(NULL, 0, 19);
   // RSI (Close, 20), Level: 41
   indHandlers[197][4][0] = iRSI(NULL, 0, 20, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 12, 11, 11, 7, 7, 4)
   indHandlers[198][0][0] = iAlligator(NULL, 0, 12, 11, 11, 7, 7, 4, MODE_SMMA, PRICE_MEDIAN);
   // Commodity Channel Index (Typical, 7)
   indHandlers[198][1][0] = iCCI(NULL, 0, 7, PRICE_TYPICAL);
   // Awesome Oscillator
   indHandlers[198][2][0] = iAO(NULL, 0);
   // Stochastic Signal (12, 10, 8)
   indHandlers[198][3][0] = iStochastic(NULL, 0, 12, 10, 8, MODE_SMA, STO_LOWHIGH);
   // Bears Power (5)
   indHandlers[198][4][0] = iBearsPower(NULL, 0, 5);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[199][0][0] = iAC(NULL, 0);
   // Moving Averages Crossover (Simple, Simple, 6, 45)
   indHandlers[199][1][0] = iMA(NULL, 0, 6, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 6, 45)
   indHandlers[199][1][1] = iMA(NULL, 0, 45, 0, MODE_SMA, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 31), Level: -8
   indHandlers[199][2][0] = iCCI(NULL, 0, 31, PRICE_TYPICAL);
   // Bollinger Bands (Close, 47, 1.30)
   indHandlers[199][3][0] = iBands(NULL, 0, 47, 0, 1.30, PRICE_CLOSE);
   // Awesome Oscillator
   indHandlers[199][4][0] = iAO(NULL, 0);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[199][5][0] = iAC(NULL, 0);
   // Commodity Channel Index (Typical, 37)
   indHandlers[200][0][0] = iCCI(NULL, 0, 37, PRICE_TYPICAL);
   // Directional Indicators (40)
   indHandlers[200][1][0] = iADX(NULL, 0, 40);
   // RSI (Close, 27), Level: 52
   indHandlers[200][2][0] = iRSI(NULL, 0, 27, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 21)
   indHandlers[200][3][0] = iCCI(NULL, 0, 21, PRICE_TYPICAL);
   // Moving Average (Simple, Close, 29, 0)
   indHandlers[200][4][0] = iMA(NULL, 0, 29, 0, MODE_SMA, PRICE_CLOSE);
   // Envelopes (Close, Simple, 22, 0.76)
   indHandlers[200][5][0] = iEnvelopes(NULL, 0, 22, 0, MODE_SMA, PRICE_CLOSE, 0.76);
   // Moving Averages Crossover (Simple, Simple, 7, 34)
   indHandlers[200][6][0] = iMA(NULL, 0, 7, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 7, 34)
   indHandlers[200][6][1] = iMA(NULL, 0, 34, 0, MODE_SMA, PRICE_CLOSE);
   // Bollinger Bands (Close, 36, 3.31)
   indHandlers[200][7][0] = iBands(NULL, 0, 36, 0, 3.31, PRICE_CLOSE);
   // Bulls Power (33), Level: 16.3000
   indHandlers[201][0][0] = iBullsPower(NULL, 0, 33);
   // Stochastic Signal (16, 5, 4)
   indHandlers[201][1][0] = iStochastic(NULL, 0, 16, 5, 4, MODE_SMA, STO_LOWHIGH);
   // Commodity Channel Index (Typical, 37), Level: -39
   indHandlers[201][2][0] = iCCI(NULL, 0, 37, PRICE_TYPICAL);
   // Bears Power (42)
   indHandlers[202][0][0] = iBearsPower(NULL, 0, 42);
   // Moving Average of Oscillator (Close, 22, 48, 4), Level: 0.0000
   indHandlers[202][1][0] = iOsMA(NULL, 0, 22, 48, 4, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 19, 24)
   indHandlers[202][2][0] = iMA(NULL, 0, 19, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 19, 24)
   indHandlers[202][2][1] = iMA(NULL, 0, 24, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic (6, 2, 1)
   indHandlers[202][3][0] = iStochastic(NULL, 0, 6, 2, 1, MODE_SMA, 0);
   // RSI (Close, 5)
   indHandlers[202][4][0] = iRSI(NULL, 0, 5, PRICE_CLOSE);
   // RSI (Close, 3), Level: 32
   indHandlers[202][5][0] = iRSI(NULL, 0, 3, PRICE_CLOSE);
   // Candle Color (49, 1)
   indHandlers[203][0][0] = -1;
   // Momentum (Close, 26)
   indHandlers[203][1][0] = iMomentum(NULL, 0, 26, PRICE_CLOSE);
   // Standard Deviation (Close, Simple, 13)
   indHandlers[203][2][0] = iStdDev(NULL, 0, 13, 0, MODE_SMA, PRICE_CLOSE);
   // DeMarker (45)
   indHandlers[203][3][0] = iDeMarker(NULL, 0, 45);
   // Williams' Percent Range (12), Level: -69.0
   indHandlers[203][4][0] = iWPR(NULL, 0, 12);
   // Moving Average (Simple, Close, 24, 0)
   indHandlers[203][5][0] = iMA(NULL, 0, 24, 0, MODE_SMA, PRICE_CLOSE);
   // MACD (Close, 4, 49, 9)
   indHandlers[203][6][0] = iMACD(NULL, 0, 4, 49, 9, PRICE_CLOSE);
   // Moving Average (Simple, Close, 16, 0)
   indHandlers[204][0][0] = iMA(NULL, 0, 16, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 11, 17)
   indHandlers[204][1][0] = iMA(NULL, 0, 11, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 11, 17)
   indHandlers[204][1][1] = iMA(NULL, 0, 17, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic (13, 3, 5), Level: 52.0
   indHandlers[204][2][0] = iStochastic(NULL, 0, 13, 3, 5, MODE_SMA, 0);
   // Candle Color (14, 2)
   indHandlers[204][3][0] = -1;
   // Standard Deviation (Close, Simple, 10)
   indHandlers[204][4][0] = iStdDev(NULL, 0, 10, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic (10, 7, 2)
   indHandlers[204][5][0] = iStochastic(NULL, 0, 10, 7, 2, MODE_SMA, 0);
   // Bulls Power (18), Level: 0.0000
   indHandlers[204][6][0] = iBullsPower(NULL, 0, 18);
   // Momentum (Close, 45), Level: 100.0000
   indHandlers[205][0][0] = iMomentum(NULL, 0, 45, PRICE_CLOSE);
   // Standard Deviation (Close, Simple, 28)
   indHandlers[205][1][0] = iStdDev(NULL, 0, 28, 0, MODE_SMA, PRICE_CLOSE);
   // Average True Range (44)
   indHandlers[205][2][0] = iATR(NULL, 0, 44);
   // RSI (Close, 48)
   indHandlers[205][3][0] = iRSI(NULL, 0, 48, PRICE_CLOSE);
   // Directional Indicators (28)
   indHandlers[205][4][0] = iADX(NULL, 0, 28);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[206][0][0] = iAC(NULL, 0);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[206][1][0] = iAC(NULL, 0);
   // Directional Indicators (50)
   indHandlers[206][2][0] = iADX(NULL, 0, 50);
   // Bears Power (5)
   indHandlers[206][3][0] = iBearsPower(NULL, 0, 5);
   // Average True Range (35), Level: 9.6000
   indHandlers[206][4][0] = iATR(NULL, 0, 35);
   // Pin Bar (8, 26)
   indHandlers[206][5][0] = -1;
   // Candle Color (48, 1)
   indHandlers[207][0][0] = -1;
   // Directional Indicators (10)
   indHandlers[207][1][0] = iADX(NULL, 0, 10);
   // Stochastic (7, 3, 4), Level: 64.0
   indHandlers[207][2][0] = iStochastic(NULL, 0, 7, 3, 4, MODE_SMA, 0);
   // Williams' Percent Range (10)
   indHandlers[207][3][0] = iWPR(NULL, 0, 10);
   // Momentum (Close, 47), Level: 97.0000
   indHandlers[208][0][0] = iMomentum(NULL, 0, 47, PRICE_CLOSE);
   // Standard Deviation (Close, Simple, 48)
   indHandlers[208][1][0] = iStdDev(NULL, 0, 48, 0, MODE_SMA, PRICE_CLOSE);
   // Accelerator Oscillator
   indHandlers[208][2][0] = iAC(NULL, 0);
   // Candle Color (12, 2)
   indHandlers[209][0][0] = -1;
   // Standard Deviation (Close, Simple, 47), Level: 5.8000
   indHandlers[209][1][0] = iStdDev(NULL, 0, 47, 0, MODE_SMA, PRICE_CLOSE);
   // MACD Signal (Close, 21, 27, 12)
   indHandlers[209][2][0] = iMACD(NULL, 0, 21, 27, 12, PRICE_CLOSE);
   // Accelerator Oscillator
   indHandlers[209][3][0] = iAC(NULL, 0);
   // Commodity Channel Index (Typical, 41), Level: 0
   indHandlers[209][4][0] = iCCI(NULL, 0, 41, PRICE_TYPICAL);
   // Awesome Oscillator, Level: -17.3000
   indHandlers[209][5][0] = iAO(NULL, 0);
   // Candle Color (7, 1)
   indHandlers[209][6][0] = -1;
   // Alligator (Smoothed, Median, 23, 10, 10, 9, 9, 5)
   indHandlers[209][7][0] = iAlligator(NULL, 0, 23, 10, 10, 9, 9, 5, MODE_SMMA, PRICE_MEDIAN);
   // Pin Bar (9, 39)
   indHandlers[210][0][0] = -1;
   // Envelopes (Close, Simple, 20, 0.75)
   indHandlers[210][1][0] = iEnvelopes(NULL, 0, 20, 0, MODE_SMA, PRICE_CLOSE, 0.75);
   // RSI (Close, 38), Level: 30
   indHandlers[211][0][0] = iRSI(NULL, 0, 38, PRICE_CLOSE);
   // ADX (14)
   indHandlers[211][1][0] = iADX(NULL, 0, 14);
   // Awesome Oscillator
   indHandlers[211][2][0] = iAO(NULL, 0);
   // Bollinger Bands (Close, 24, 1.98)
   indHandlers[212][0][0] = iBands(NULL, 0, 24, 0, 1.98, PRICE_CLOSE);
   // DeMarker (35), Level: 0.34
   indHandlers[212][1][0] = iDeMarker(NULL, 0, 35);
   // Commodity Channel Index (Typical, 48)
   indHandlers[212][2][0] = iCCI(NULL, 0, 48, PRICE_TYPICAL);
   // Moving Average of Oscillator (Close, 21, 41, 11), Level: 0.0000
   indHandlers[212][3][0] = iOsMA(NULL, 0, 21, 41, 11, PRICE_CLOSE);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[212][4][0] = iAC(NULL, 0);
   // RSI (Close, 12)
   indHandlers[212][5][0] = iRSI(NULL, 0, 12, PRICE_CLOSE);
   // RSI (Close, 25), Level: 40
   indHandlers[212][6][0] = iRSI(NULL, 0, 25, PRICE_CLOSE);
   // Accelerator Oscillator
   indHandlers[213][0][0] = iAC(NULL, 0);
   // Momentum (Close, 30), Level: 101.0000
   indHandlers[213][1][0] = iMomentum(NULL, 0, 30, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 17)
   indHandlers[213][2][0] = iCCI(NULL, 0, 17, PRICE_TYPICAL);
   // DeMarker (20)
   indHandlers[213][3][0] = iDeMarker(NULL, 0, 20);
   // Moving Average of Oscillator (Close, 14, 43, 8), Level: -3.6500
   indHandlers[214][0][0] = iOsMA(NULL, 0, 14, 43, 8, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 32), Level: 0
   indHandlers[214][1][0] = iCCI(NULL, 0, 32, PRICE_TYPICAL);
   // ADX (23), Level: 39.0
   indHandlers[214][2][0] = iADX(NULL, 0, 23);
   // MACD Signal (Close, 8, 43, 13)
   indHandlers[214][3][0] = iMACD(NULL, 0, 8, 43, 13, PRICE_CLOSE);
   // Standard Deviation (Close, Simple, 18), Level: 22.8000
   indHandlers[214][4][0] = iStdDev(NULL, 0, 18, 0, MODE_SMA, PRICE_CLOSE);
   // MACD (Close, 22, 33, 9)
   indHandlers[215][0][0] = iMACD(NULL, 0, 22, 33, 9, PRICE_CLOSE);
   // Momentum (Close, 42)
   indHandlers[215][1][0] = iMomentum(NULL, 0, 42, PRICE_CLOSE);
   // Standard Deviation (Close, Simple, 17), Level: 7.0000
   indHandlers[215][2][0] = iStdDev(NULL, 0, 17, 0, MODE_SMA, PRICE_CLOSE);
   // Accelerator Oscillator
   indHandlers[215][3][0] = iAC(NULL, 0);
   // Commodity Channel Index (Typical, 20)
   indHandlers[215][4][0] = iCCI(NULL, 0, 20, PRICE_TYPICAL);
   // Directional Indicators (12)
   indHandlers[215][5][0] = iADX(NULL, 0, 12);
   // Pin Bar (7, 45)
   indHandlers[215][6][0] = -1;
   // Envelopes (Close, Simple, 44, 0.52)
   indHandlers[215][7][0] = iEnvelopes(NULL, 0, 44, 0, MODE_SMA, PRICE_CLOSE, 0.52);
   // Bollinger Bands (Close, 16, 1.84)
   indHandlers[215][8][0] = iBands(NULL, 0, 16, 0, 1.84, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 22, 32)
   indHandlers[216][0][0] = iMA(NULL, 0, 22, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 22, 32)
   indHandlers[216][0][1] = iMA(NULL, 0, 32, 0, MODE_SMA, PRICE_CLOSE);
   // Awesome Oscillator
   indHandlers[216][1][0] = iAO(NULL, 0);
   // MACD Signal (Close, 19, 31, 5)
   indHandlers[216][2][0] = iMACD(NULL, 0, 19, 31, 5, PRICE_CLOSE);
   // Bulls Power (30)
   indHandlers[216][3][0] = iBullsPower(NULL, 0, 30);
   // Bollinger Bands (Close, 31, 2.29)
   indHandlers[216][4][0] = iBands(NULL, 0, 31, 0, 2.29, PRICE_CLOSE);
   // Stochastic Signal (3, 2, 2)
   indHandlers[216][5][0] = iStochastic(NULL, 0, 3, 2, 2, MODE_SMA, STO_LOWHIGH);
   // Envelopes (Close, Simple, 25, 0.33)
   indHandlers[216][6][0] = iEnvelopes(NULL, 0, 25, 0, MODE_SMA, PRICE_CLOSE, 0.33);
   // Average True Range (30)
   indHandlers[216][7][0] = iATR(NULL, 0, 30);
   // Envelopes (Close, Simple, 42, 0.79)
   indHandlers[216][8][0] = iEnvelopes(NULL, 0, 42, 0, MODE_SMA, PRICE_CLOSE, 0.79);
   // MACD Signal (Close, 23, 24, 13)
   indHandlers[217][0][0] = iMACD(NULL, 0, 23, 24, 13, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 24, 27)
   indHandlers[217][1][0] = iMA(NULL, 0, 24, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 24, 27)
   indHandlers[217][1][1] = iMA(NULL, 0, 27, 0, MODE_SMA, PRICE_CLOSE);
   // Bulls Power (40), Level: 0.0000
   indHandlers[217][2][0] = iBullsPower(NULL, 0, 40);
   // Moving Average (Simple, Close, 31, 0)
   indHandlers[217][3][0] = iMA(NULL, 0, 31, 0, MODE_SMA, PRICE_CLOSE);
   // Momentum (Close, 3), Level: 95.0000
   indHandlers[217][4][0] = iMomentum(NULL, 0, 3, PRICE_CLOSE);
   // DeMarker (24), Level: 0.24
   indHandlers[217][5][0] = iDeMarker(NULL, 0, 24);
   // Bollinger Bands (Close, 44, 1.77)
   indHandlers[218][0][0] = iBands(NULL, 0, 44, 0, 1.77, PRICE_CLOSE);
   // MACD (Close, 11, 20, 9)
   indHandlers[218][1][0] = iMACD(NULL, 0, 11, 20, 9, PRICE_CLOSE);
   // Moving Average of Oscillator (Close, 21, 34, 8), Level: 0.0000
   indHandlers[218][2][0] = iOsMA(NULL, 0, 21, 34, 8, PRICE_CLOSE);
   // MACD (Close, 18, 19, 9)
   indHandlers[218][3][0] = iMACD(NULL, 0, 18, 19, 9, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 19, 31)
   indHandlers[218][4][0] = iMA(NULL, 0, 19, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 19, 31)
   indHandlers[218][4][1] = iMA(NULL, 0, 31, 0, MODE_SMA, PRICE_CLOSE);
   // MACD (Close, 20, 48, 9)
   indHandlers[218][5][0] = iMACD(NULL, 0, 20, 48, 9, PRICE_CLOSE);
   // Moving Average of Oscillator (Close, 12, 21, 4)
   indHandlers[218][6][0] = iOsMA(NULL, 0, 12, 21, 4, PRICE_CLOSE);
   // RSI (Close, 8), Level: 80
   indHandlers[219][0][0] = iRSI(NULL, 0, 8, PRICE_CLOSE);
   // Accelerator Oscillator
   indHandlers[219][1][0] = iAC(NULL, 0);
   // Standard Deviation (Close, Simple, 23)
   indHandlers[219][2][0] = iStdDev(NULL, 0, 23, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic (11, 3, 11), Level: 70.0
   indHandlers[219][3][0] = iStochastic(NULL, 0, 11, 3, 11, MODE_SMA, 0);
   // DeMarker (28), Level: 0.63
   indHandlers[219][4][0] = iDeMarker(NULL, 0, 28);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[219][5][0] = iAC(NULL, 0);
   // RSI (Close, 33), Level: 30
   indHandlers[220][0][0] = iRSI(NULL, 0, 33, PRICE_CLOSE);
   // Average True Range (4), Level: 0.7000
   indHandlers[220][1][0] = iATR(NULL, 0, 4);
   // Moving Average (Simple, Close, 33, 0)
   indHandlers[221][0][0] = iMA(NULL, 0, 33, 0, MODE_SMA, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 6)
   indHandlers[221][1][0] = iCCI(NULL, 0, 6, PRICE_TYPICAL);
   // Bulls Power (22)
   indHandlers[221][2][0] = iBullsPower(NULL, 0, 22);
   // Average True Range (17)
   indHandlers[221][3][0] = iATR(NULL, 0, 17);
   // Stochastic (9, 8, 8)
   indHandlers[221][4][0] = iStochastic(NULL, 0, 9, 8, 8, MODE_SMA, 0);
   // Bollinger Bands (Close, 37, 1.88)
   indHandlers[221][5][0] = iBands(NULL, 0, 37, 0, 1.88, PRICE_CLOSE);
   // MACD (Close, 10, 39, 9)
   indHandlers[222][0][0] = iMACD(NULL, 0, 10, 39, 9, PRICE_CLOSE);
   // Bears Power (29), Level: 0.0000
   indHandlers[222][1][0] = iBearsPower(NULL, 0, 29);
   // Average True Range (3), Level: 1.4000
   indHandlers[222][2][0] = iATR(NULL, 0, 3);
   // Bears Power (3)
   indHandlers[222][3][0] = iBearsPower(NULL, 0, 3);
   // Directional Indicators (8)
   indHandlers[222][4][0] = iADX(NULL, 0, 8);
   // Moving Average of Oscillator (Close, 20, 49, 8)
   indHandlers[222][5][0] = iOsMA(NULL, 0, 20, 49, 8, PRICE_CLOSE);
   // Candle Color (15, 1)
   indHandlers[222][6][0] = -1;
   // Bollinger Bands (Close, 36, 3.59)
   indHandlers[223][0][0] = iBands(NULL, 0, 36, 0, 3.59, PRICE_CLOSE);
   // DeMarker (11)
   indHandlers[223][1][0] = iDeMarker(NULL, 0, 11);
   // Average True Range (14)
   indHandlers[223][2][0] = iATR(NULL, 0, 14);
   // Accelerator Oscillator, Level: -4.2000
   indHandlers[223][3][0] = iAC(NULL, 0);
   // Stochastic Signal (6, 5, 2)
   indHandlers[223][4][0] = iStochastic(NULL, 0, 6, 5, 2, MODE_SMA, STO_LOWHIGH);
   // Moving Average of Oscillator (Close, 17, 20, 10), Level: 0.0000
   indHandlers[224][0][0] = iOsMA(NULL, 0, 17, 20, 10, PRICE_CLOSE);
   // RSI (Close, 45)
   indHandlers[224][1][0] = iRSI(NULL, 0, 45, PRICE_CLOSE);
   // Williams' Percent Range (32)
   indHandlers[224][2][0] = iWPR(NULL, 0, 32);
   // DeMarker (19), Level: 0.62
   indHandlers[224][3][0] = iDeMarker(NULL, 0, 19);
   // Accelerator Oscillator
   indHandlers[224][4][0] = iAC(NULL, 0);
   // RSI (Close, 29)
   indHandlers[224][5][0] = iRSI(NULL, 0, 29, PRICE_CLOSE);
   // Pin Bar (9, 39)
   indHandlers[225][0][0] = -1;
   // Pin Bar (9, 30)
   indHandlers[225][1][0] = -1;
   // Standard Deviation (Close, Simple, 18), Level: 3.1000
   indHandlers[225][2][0] = iStdDev(NULL, 0, 18, 0, MODE_SMA, PRICE_CLOSE);
   // Momentum (Close, 3), Level: 97.0000
   indHandlers[225][3][0] = iMomentum(NULL, 0, 3, PRICE_CLOSE);
   // Moving Average (Simple, Close, 35, 0)
   indHandlers[225][4][0] = iMA(NULL, 0, 35, 0, MODE_SMA, PRICE_CLOSE);
   // DeMarker (49), Level: 0.92
   indHandlers[225][5][0] = iDeMarker(NULL, 0, 49);
   // Moving Average (Simple, Close, 5, 0)
   indHandlers[226][0][0] = iMA(NULL, 0, 5, 0, MODE_SMA, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 9)
   indHandlers[226][1][0] = iCCI(NULL, 0, 9, PRICE_TYPICAL);
   // Bulls Power (19)
   indHandlers[226][2][0] = iBullsPower(NULL, 0, 19);
   // MACD Signal (Close, 11, 37, 12)
   indHandlers[226][3][0] = iMACD(NULL, 0, 11, 37, 12, PRICE_CLOSE);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[226][4][0] = iAO(NULL, 0);
   // Williams' Percent Range (21), Level: -49.0
   indHandlers[227][0][0] = iWPR(NULL, 0, 21);
   // MACD Signal (Close, 15, 45, 7)
   indHandlers[227][1][0] = iMACD(NULL, 0, 15, 45, 7, PRICE_CLOSE);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[227][2][0] = iAO(NULL, 0);
   // Stochastic (14, 4, 1)
   indHandlers[227][3][0] = iStochastic(NULL, 0, 14, 4, 1, MODE_SMA, 0);
   // Directional Indicators (1)
   indHandlers[227][4][0] = iADX(NULL, 0, 1);
   // Awesome Oscillator
   indHandlers[227][5][0] = iAO(NULL, 0);
   // MACD (Close, 21, 38, 9)
   indHandlers[228][0][0] = iMACD(NULL, 0, 21, 38, 9, PRICE_CLOSE);
   // Momentum (Close, 22)
   indHandlers[228][1][0] = iMomentum(NULL, 0, 22, PRICE_CLOSE);
   // Stochastic Signal (9, 8, 4)
   indHandlers[228][2][0] = iStochastic(NULL, 0, 9, 8, 4, MODE_SMA, STO_LOWHIGH);
   // Momentum (Close, 43)
   indHandlers[228][3][0] = iMomentum(NULL, 0, 43, PRICE_CLOSE);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[228][4][0] = iAO(NULL, 0);
   // Bulls Power (44), Level: 0.0000
   indHandlers[228][5][0] = iBullsPower(NULL, 0, 44);
   // Pin Bar (6, 31)
   indHandlers[228][6][0] = -1;
   // Directional Indicators (19)
   indHandlers[229][0][0] = iADX(NULL, 0, 19);
   // ADX (9), Level: 24.0
   indHandlers[229][1][0] = iADX(NULL, 0, 9);
   // ADX (13), Level: 36.0
   indHandlers[229][2][0] = iADX(NULL, 0, 13);
   // Bollinger Bands (Close, 23, 3.50)
   indHandlers[229][3][0] = iBands(NULL, 0, 23, 0, 3.50, PRICE_CLOSE);
   // MACD Signal (Close, 18, 36, 10)
   indHandlers[229][4][0] = iMACD(NULL, 0, 18, 36, 10, PRICE_CLOSE);
   // Moving Average of Oscillator (Close, 4, 18, 9), Level: 0.0000
   indHandlers[230][0][0] = iOsMA(NULL, 0, 4, 18, 9, PRICE_CLOSE);
   // Stochastic (6, 3, 3), Level: 75.0
   indHandlers[230][1][0] = iStochastic(NULL, 0, 6, 3, 3, MODE_SMA, 0);
   // Stochastic (2, 1, 1)
   indHandlers[230][2][0] = iStochastic(NULL, 0, 2, 1, 1, MODE_SMA, 0);
   // Envelopes (Close, Simple, 15, 0.90)
   indHandlers[230][3][0] = iEnvelopes(NULL, 0, 15, 0, MODE_SMA, PRICE_CLOSE, 0.90);
   // MACD Signal (Close, 5, 11, 8)
   indHandlers[230][4][0] = iMACD(NULL, 0, 5, 11, 8, PRICE_CLOSE);
   // Envelopes (Close, Simple, 34, 0.97)
   indHandlers[231][0][0] = iEnvelopes(NULL, 0, 34, 0, MODE_SMA, PRICE_CLOSE, 0.97);
   // Bears Power (50), Level: 0.0000
   indHandlers[231][1][0] = iBearsPower(NULL, 0, 50);
   // MACD Signal (Close, 22, 40, 11)
   indHandlers[231][2][0] = iMACD(NULL, 0, 22, 40, 11, PRICE_CLOSE);
   // Moving Average (Simple, Close, 17, 0)
   indHandlers[231][3][0] = iMA(NULL, 0, 17, 0, MODE_SMA, PRICE_CLOSE);
   // MACD (Close, 25, 43, 9)
   indHandlers[231][4][0] = iMACD(NULL, 0, 25, 43, 9, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 21)
   indHandlers[231][5][0] = iCCI(NULL, 0, 21, PRICE_TYPICAL);
   // Momentum (Close, 44), Level: 97.0000
   indHandlers[232][0][0] = iMomentum(NULL, 0, 44, PRICE_CLOSE);
   // Stochastic Signal (13, 9, 1)
   indHandlers[232][1][0] = iStochastic(NULL, 0, 13, 9, 1, MODE_SMA, STO_LOWHIGH);
   // Directional Indicators (49)
   indHandlers[232][2][0] = iADX(NULL, 0, 49);
   // RSI (Close, 19), Level: 11
   indHandlers[232][3][0] = iRSI(NULL, 0, 19, PRICE_CLOSE);
   // Candle Color (31, 5)
   indHandlers[233][0][0] = -1;
   // ADX (7), Level: 39.0
   indHandlers[233][1][0] = iADX(NULL, 0, 7);
   // Bears Power (35), Level: 0.0000
   indHandlers[233][2][0] = iBearsPower(NULL, 0, 35);
   // Commodity Channel Index (Typical, 44), Level: 0
   indHandlers[233][3][0] = iCCI(NULL, 0, 44, PRICE_TYPICAL);
   // Average True Range (20), Level: 19.6000
   indHandlers[233][4][0] = iATR(NULL, 0, 20);
   // Average True Range (43)
   indHandlers[233][5][0] = iATR(NULL, 0, 43);
   // MACD Signal (Close, 4, 40, 10)
   indHandlers[234][0][0] = iMACD(NULL, 0, 4, 40, 10, PRICE_CLOSE);
   // ADX (36), Level: 30.0
   indHandlers[234][1][0] = iADX(NULL, 0, 36);
   // Bollinger Bands (Close, 20, 2.82)
   indHandlers[234][2][0] = iBands(NULL, 0, 20, 0, 2.82, PRICE_CLOSE);
   // ADX (19)
   indHandlers[234][3][0] = iADX(NULL, 0, 19);
   // DeMarker (40), Level: 0.89
   indHandlers[234][4][0] = iDeMarker(NULL, 0, 40);
   // Williams' Percent Range (27), Level: -60.0
   indHandlers[234][5][0] = iWPR(NULL, 0, 27);
   // Envelopes (Close, Simple, 37, 0.83)
   indHandlers[235][0][0] = iEnvelopes(NULL, 0, 37, 0, MODE_SMA, PRICE_CLOSE, 0.83);
   // Average True Range (7)
   indHandlers[235][1][0] = iATR(NULL, 0, 7);
   // Stochastic Signal (4, 2, 1)
   indHandlers[235][2][0] = iStochastic(NULL, 0, 4, 2, 1, MODE_SMA, STO_LOWHIGH);
   // Moving Average (Simple, Close, 32, 0)
   indHandlers[235][3][0] = iMA(NULL, 0, 32, 0, MODE_SMA, PRICE_CLOSE);
   // Envelopes (Close, Simple, 44, 0.65)
   indHandlers[235][4][0] = iEnvelopes(NULL, 0, 44, 0, MODE_SMA, PRICE_CLOSE, 0.65);
   // Moving Average (Simple, Close, 23, 0)
   indHandlers[236][0][0] = iMA(NULL, 0, 23, 0, MODE_SMA, PRICE_CLOSE);
   // MACD Signal (Close, 16, 42, 13)
   indHandlers[236][1][0] = iMACD(NULL, 0, 16, 42, 13, PRICE_CLOSE);
   // Envelopes (Close, Simple, 18, 0.06)
   indHandlers[236][2][0] = iEnvelopes(NULL, 0, 18, 0, MODE_SMA, PRICE_CLOSE, 0.06);
   // Awesome Oscillator
   indHandlers[236][3][0] = iAO(NULL, 0);
   // Awesome Oscillator
   indHandlers[236][4][0] = iAO(NULL, 0);
   // Williams' Percent Range (31), Level: -58.0
   indHandlers[236][5][0] = iWPR(NULL, 0, 31);
   // MACD (Close, 12, 15, 9)
   indHandlers[236][6][0] = iMACD(NULL, 0, 12, 15, 9, PRICE_CLOSE);
   // Bears Power (46)
   indHandlers[237][0][0] = iBearsPower(NULL, 0, 46);
   // Envelopes (Close, Simple, 50, 0.80)
   indHandlers[237][1][0] = iEnvelopes(NULL, 0, 50, 0, MODE_SMA, PRICE_CLOSE, 0.80);
   // Standard Deviation (Close, Simple, 9), Level: 20.6000
   indHandlers[237][2][0] = iStdDev(NULL, 0, 9, 0, MODE_SMA, PRICE_CLOSE);
   // Envelopes (Close, Simple, 49, 0.76)
   indHandlers[237][3][0] = iEnvelopes(NULL, 0, 49, 0, MODE_SMA, PRICE_CLOSE, 0.76);
   // Accelerator Oscillator
   indHandlers[237][4][0] = iAC(NULL, 0);
   // Alligator (Smoothed, Median, 31, 14, 14, 6, 6, 5)
   indHandlers[237][5][0] = iAlligator(NULL, 0, 31, 14, 14, 6, 6, 5, MODE_SMMA, PRICE_MEDIAN);
   // Pin Bar (9, 22)
   indHandlers[237][6][0] = -1;
   // Moving Averages Crossover (Simple, Simple, 20, 43)
   indHandlers[237][7][0] = iMA(NULL, 0, 20, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 20, 43)
   indHandlers[237][7][1] = iMA(NULL, 0, 43, 0, MODE_SMA, PRICE_CLOSE);
   // RSI (Close, 43), Level: 33
   indHandlers[237][8][0] = iRSI(NULL, 0, 43, PRICE_CLOSE);
   // Pin Bar (9, 39)
   indHandlers[238][0][0] = -1;
   // Alligator (Smoothed, Median, 39, 19, 19, 5, 5, 4)
   indHandlers[238][1][0] = iAlligator(NULL, 0, 39, 19, 19, 5, 5, 4, MODE_SMMA, PRICE_MEDIAN);
   // Alligator (Smoothed, Median, 36, 20, 20, 6, 6, 1)
   indHandlers[239][0][0] = iAlligator(NULL, 0, 36, 20, 20, 6, 6, 1, MODE_SMMA, PRICE_MEDIAN);
   // Stochastic (4, 4, 4), Level: 48.0
   indHandlers[239][1][0] = iStochastic(NULL, 0, 4, 4, 4, MODE_SMA, 0);
   // Bears Power (35)
   indHandlers[239][2][0] = iBearsPower(NULL, 0, 35);
   // Moving Average (Simple, Close, 45, 0)
   indHandlers[239][3][0] = iMA(NULL, 0, 45, 0, MODE_SMA, PRICE_CLOSE);
   // Bulls Power (2), Level: -69.2000
   indHandlers[239][4][0] = iBullsPower(NULL, 0, 2);
   // RSI (Close, 43), Level: 30
   indHandlers[240][0][0] = iRSI(NULL, 0, 43, PRICE_CLOSE);
   // Average True Range (15)
   indHandlers[240][1][0] = iATR(NULL, 0, 15);
   // Alligator (Smoothed, Median, 33, 9, 9, 5, 5, 2)
   indHandlers[240][2][0] = iAlligator(NULL, 0, 33, 9, 9, 5, 5, 2, MODE_SMMA, PRICE_MEDIAN);
   // Commodity Channel Index (Typical, 20), Level: 0
   indHandlers[241][0][0] = iCCI(NULL, 0, 20, PRICE_TYPICAL);
   // Alligator (Smoothed, Median, 40, 15, 15, 5, 5, 2)
   indHandlers[241][1][0] = iAlligator(NULL, 0, 40, 15, 15, 5, 5, 2, MODE_SMMA, PRICE_MEDIAN);
   // Bollinger Bands (Close, 12, 1.93)
   indHandlers[241][2][0] = iBands(NULL, 0, 12, 0, 1.93, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 17, 20)
   indHandlers[241][3][0] = iMA(NULL, 0, 17, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 17, 20)
   indHandlers[241][3][1] = iMA(NULL, 0, 20, 0, MODE_SMA, PRICE_CLOSE);
   // Standard Deviation (Close, Simple, 42)
   indHandlers[241][4][0] = iStdDev(NULL, 0, 42, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Average (Simple, Close, 21, 0)
   indHandlers[241][5][0] = iMA(NULL, 0, 21, 0, MODE_SMA, PRICE_CLOSE);
   // Envelopes (Close, Simple, 17, 0.08)
   indHandlers[241][6][0] = iEnvelopes(NULL, 0, 17, 0, MODE_SMA, PRICE_CLOSE, 0.08);
   // Moving Average of Oscillator (Close, 20, 39, 8)
   indHandlers[241][7][0] = iOsMA(NULL, 0, 20, 39, 8, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 24, 17, 17, 9, 9, 1)
   indHandlers[241][8][0] = iAlligator(NULL, 0, 24, 17, 17, 9, 9, 1, MODE_SMMA, PRICE_MEDIAN);
   // Candle Color (39, 3)
   indHandlers[242][0][0] = -1;
   // Alligator (Smoothed, Median, 26, 12, 12, 5, 5, 2)
   indHandlers[242][1][0] = iAlligator(NULL, 0, 26, 12, 12, 5, 5, 2, MODE_SMMA, PRICE_MEDIAN);
   // Stochastic Signal (4, 3, 1)
   indHandlers[242][2][0] = iStochastic(NULL, 0, 4, 3, 1, MODE_SMA, STO_LOWHIGH);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[242][3][0] = iAO(NULL, 0);
   // Awesome Oscillator, Level: 8.5000
   indHandlers[242][4][0] = iAO(NULL, 0);
   // Pin Bar (8, 29)
   indHandlers[242][5][0] = -1;
   // Bears Power (43), Level: 1.7100
   indHandlers[243][0][0] = iBearsPower(NULL, 0, 43);
   // Commodity Channel Index (Typical, 14)
   indHandlers[243][1][0] = iCCI(NULL, 0, 14, PRICE_TYPICAL);
   // Bears Power (7), Level: -0.1500
   indHandlers[243][2][0] = iBearsPower(NULL, 0, 7);
   // Williams' Percent Range (21), Level: -96.0
   indHandlers[243][3][0] = iWPR(NULL, 0, 21);
   // Alligator (Smoothed, Median, 33, 7, 7, 5, 5, 2)
   indHandlers[243][4][0] = iAlligator(NULL, 0, 33, 7, 7, 5, 5, 2, MODE_SMMA, PRICE_MEDIAN);
   // Moving Averages Crossover (Simple, Simple, 19, 20)
   indHandlers[243][5][0] = iMA(NULL, 0, 19, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 19, 20)
   indHandlers[243][5][1] = iMA(NULL, 0, 20, 0, MODE_SMA, PRICE_CLOSE);
   // Candle Color (33, 3)
   indHandlers[243][6][0] = -1;
   // Momentum (Close, 47), Level: 97.0000
   indHandlers[244][0][0] = iMomentum(NULL, 0, 47, PRICE_CLOSE);
   // Stochastic Signal (2, 1, 1)
   indHandlers[244][1][0] = iStochastic(NULL, 0, 2, 1, 1, MODE_SMA, STO_LOWHIGH);
   // Accelerator Oscillator
   indHandlers[244][2][0] = iAC(NULL, 0);
   // Moving Average of Oscillator (Close, 15, 41, 13), Level: 0.0000
   indHandlers[245][0][0] = iOsMA(NULL, 0, 15, 41, 13, PRICE_CLOSE);
   // Envelopes (Close, Simple, 3, 0.44)
   indHandlers[245][1][0] = iEnvelopes(NULL, 0, 3, 0, MODE_SMA, PRICE_CLOSE, 0.44);
   // Moving Average of Oscillator (Close, 16, 24, 8), Level: 0.0000
   indHandlers[245][2][0] = iOsMA(NULL, 0, 16, 24, 8, PRICE_CLOSE);
   // Bulls Power (7), Level: 0.0000
   indHandlers[246][0][0] = iBullsPower(NULL, 0, 7);
   // Accelerator Oscillator
   indHandlers[246][1][0] = iAC(NULL, 0);
   // Directional Indicators (14)
   indHandlers[246][2][0] = iADX(NULL, 0, 14);
   // Moving Average (Simple, Close, 28, 0)
   indHandlers[246][3][0] = iMA(NULL, 0, 28, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 23, 49)
   indHandlers[246][4][0] = iMA(NULL, 0, 23, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 23, 49)
   indHandlers[246][4][1] = iMA(NULL, 0, 49, 0, MODE_SMA, PRICE_CLOSE);
   // Momentum (Close, 21), Level: 102.0000
   indHandlers[247][0][0] = iMomentum(NULL, 0, 21, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 18), Level: 0
   indHandlers[247][1][0] = iCCI(NULL, 0, 18, PRICE_TYPICAL);
   // Stochastic Signal (16, 11, 10)
   indHandlers[248][0][0] = iStochastic(NULL, 0, 16, 11, 10, MODE_SMA, STO_LOWHIGH);
   // Average True Range (1), Level: 17.5000
   indHandlers[248][1][0] = iATR(NULL, 0, 1);
   // Bulls Power (3), Level: 0.0000
   indHandlers[248][2][0] = iBullsPower(NULL, 0, 3);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[248][3][0] = iAO(NULL, 0);
   // DeMarker (33)
   indHandlers[248][4][0] = iDeMarker(NULL, 0, 33);
   // Moving Average (Simple, Close, 10, 0)
   indHandlers[248][5][0] = iMA(NULL, 0, 10, 0, MODE_SMA, PRICE_CLOSE);
   // Momentum (Close, 37), Level: 100.0000
   indHandlers[248][6][0] = iMomentum(NULL, 0, 37, PRICE_CLOSE);
   // Accelerator Oscillator, Level: -9.8000
   indHandlers[249][0][0] = iAC(NULL, 0);
   // Envelopes (Close, Simple, 32, 0.06)
   indHandlers[249][1][0] = iEnvelopes(NULL, 0, 32, 0, MODE_SMA, PRICE_CLOSE, 0.06);
   // Bulls Power (41)
   indHandlers[249][2][0] = iBullsPower(NULL, 0, 41);
   // Stochastic (14, 1, 4), Level: 77.0
   indHandlers[250][0][0] = iStochastic(NULL, 0, 14, 1, 4, MODE_SMA, 0);
   // Moving Average of Oscillator (Close, 20, 22, 12)
   indHandlers[250][1][0] = iOsMA(NULL, 0, 20, 22, 12, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 21, 18, 18, 12, 12, 3)
   indHandlers[250][2][0] = iAlligator(NULL, 0, 21, 18, 18, 12, 12, 3, MODE_SMMA, PRICE_MEDIAN);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[250][3][0] = iAO(NULL, 0);
   // Candle Color (29, 5)
   indHandlers[250][4][0] = -1;
   // Envelopes (Close, Simple, 50, 0.43)
   indHandlers[250][5][0] = iEnvelopes(NULL, 0, 50, 0, MODE_SMA, PRICE_CLOSE, 0.43);
   // Envelopes (Close, Simple, 23, 0.87)
   indHandlers[250][6][0] = iEnvelopes(NULL, 0, 23, 0, MODE_SMA, PRICE_CLOSE, 0.87);
   // Alligator (Smoothed, Median, 23, 15, 15, 11, 11, 1)
   indHandlers[251][0][0] = iAlligator(NULL, 0, 23, 15, 15, 11, 11, 1, MODE_SMMA, PRICE_MEDIAN);
   // Directional Indicators (9)
   indHandlers[251][1][0] = iADX(NULL, 0, 9);
   // Moving Average (Simple, Close, 24, 0)
   indHandlers[251][2][0] = iMA(NULL, 0, 24, 0, MODE_SMA, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 14), Level: 0
   indHandlers[252][0][0] = iCCI(NULL, 0, 14, PRICE_TYPICAL);
   // MACD (Close, 25, 32, 9)
   indHandlers[252][1][0] = iMACD(NULL, 0, 25, 32, 9, PRICE_CLOSE);
   // Accelerator Oscillator
   indHandlers[252][2][0] = iAC(NULL, 0);
   // Momentum (Close, 5), Level: 101.0000
   indHandlers[252][3][0] = iMomentum(NULL, 0, 5, PRICE_CLOSE);
   // Moving Average of Oscillator (Close, 5, 23, 12), Level: 0.0000
   indHandlers[252][4][0] = iOsMA(NULL, 0, 5, 23, 12, PRICE_CLOSE);
   // Candle Color (11, 2)
   indHandlers[253][0][0] = -1;
   // Moving Average (Simple, Close, 21, 0)
   indHandlers[253][1][0] = iMA(NULL, 0, 21, 0, MODE_SMA, PRICE_CLOSE);
   // Average True Range (18)
   indHandlers[253][2][0] = iATR(NULL, 0, 18);
   // MACD (Close, 20, 49, 9)
   indHandlers[253][3][0] = iMACD(NULL, 0, 20, 49, 9, PRICE_CLOSE);
   // RSI (Close, 43), Level: 30
   indHandlers[254][0][0] = iRSI(NULL, 0, 43, PRICE_CLOSE);
   // Directional Indicators (24)
   indHandlers[254][1][0] = iADX(NULL, 0, 24);
   // Candle Color (15, 3)
   indHandlers[254][2][0] = -1;
   // Moving Average of Oscillator (Close, 18, 25, 9), Level: 4.2500
   indHandlers[254][3][0] = iOsMA(NULL, 0, 18, 25, 9, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 15)
   indHandlers[254][4][0] = iCCI(NULL, 0, 15, PRICE_TYPICAL);
   // Alligator (Smoothed, Median, 37, 12, 12, 10, 10, 4)
   indHandlers[255][0][0] = iAlligator(NULL, 0, 37, 12, 12, 10, 10, 4, MODE_SMMA, PRICE_MEDIAN);
   // Alligator (Smoothed, Median, 37, 17, 17, 8, 8, 5)
   indHandlers[255][1][0] = iAlligator(NULL, 0, 37, 17, 17, 8, 8, 5, MODE_SMMA, PRICE_MEDIAN);
   // Accelerator Oscillator
   indHandlers[255][2][0] = iAC(NULL, 0);
   // Stochastic Signal (12, 6, 2)
   indHandlers[255][3][0] = iStochastic(NULL, 0, 12, 6, 2, MODE_SMA, STO_LOWHIGH);
   // Momentum (Close, 12)
   indHandlers[255][4][0] = iMomentum(NULL, 0, 12, PRICE_CLOSE);
   // DeMarker (36)
   indHandlers[255][5][0] = iDeMarker(NULL, 0, 36);
   // RSI (Close, 13), Level: 84
   indHandlers[255][6][0] = iRSI(NULL, 0, 13, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 49), Level: 0
   indHandlers[256][0][0] = iCCI(NULL, 0, 49, PRICE_TYPICAL);
   // Alligator (Smoothed, Median, 27, 18, 18, 8, 8, 1)
   indHandlers[256][1][0] = iAlligator(NULL, 0, 27, 18, 18, 8, 8, 1, MODE_SMMA, PRICE_MEDIAN);
   // Directional Indicators (44)
   indHandlers[256][2][0] = iADX(NULL, 0, 44);
   // Moving Average (Simple, Close, 5, 0)
   indHandlers[256][3][0] = iMA(NULL, 0, 5, 0, MODE_SMA, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 40, 23, 23, 12, 12, 5)
   indHandlers[256][4][0] = iAlligator(NULL, 0, 40, 23, 23, 12, 12, 5, MODE_SMMA, PRICE_MEDIAN);
   // Average True Range (45)
   indHandlers[256][5][0] = iATR(NULL, 0, 45);
   // Stochastic (11, 8, 1)
   indHandlers[257][0][0] = iStochastic(NULL, 0, 11, 8, 1, MODE_SMA, 0);
   // ADX (7), Level: 18.0
   indHandlers[257][1][0] = iADX(NULL, 0, 7);
   // Bollinger Bands (Close, 44, 3.54)
   indHandlers[257][2][0] = iBands(NULL, 0, 44, 0, 3.54, PRICE_CLOSE);
   // Bulls Power (25), Level: 0.0000
   indHandlers[257][3][0] = iBullsPower(NULL, 0, 25);
   // Bulls Power (5)
   indHandlers[257][4][0] = iBullsPower(NULL, 0, 5);
   // Commodity Channel Index (Typical, 8)
   indHandlers[257][5][0] = iCCI(NULL, 0, 8, PRICE_TYPICAL);
   // Williams' Percent Range (47)
   indHandlers[258][0][0] = iWPR(NULL, 0, 47);
   // Envelopes (Close, Simple, 46, 0.23)
   indHandlers[258][1][0] = iEnvelopes(NULL, 0, 46, 0, MODE_SMA, PRICE_CLOSE, 0.23);
   // Candle Color (40, 3)
   indHandlers[258][2][0] = -1;
   // Moving Average (Simple, Close, 18, 0)
   indHandlers[258][3][0] = iMA(NULL, 0, 18, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic (3, 3, 2), Level: 55.0
   indHandlers[258][4][0] = iStochastic(NULL, 0, 3, 3, 2, MODE_SMA, 0);
   // Bulls Power (17)
   indHandlers[258][5][0] = iBullsPower(NULL, 0, 17);
   // Moving Averages Crossover (Simple, Simple, 23, 30)
   indHandlers[258][6][0] = iMA(NULL, 0, 23, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 23, 30)
   indHandlers[258][6][1] = iMA(NULL, 0, 30, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 15, 41)
   indHandlers[258][7][0] = iMA(NULL, 0, 15, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 15, 41)
   indHandlers[258][7][1] = iMA(NULL, 0, 41, 0, MODE_SMA, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 17), Level: 77
   indHandlers[258][8][0] = iCCI(NULL, 0, 17, PRICE_TYPICAL);
   // Moving Average of Oscillator (Close, 11, 19, 6)
   indHandlers[258][9][0] = iOsMA(NULL, 0, 11, 19, 6, PRICE_CLOSE);
   // Directional Indicators (29)
   indHandlers[259][0][0] = iADX(NULL, 0, 29);
   // Average True Range (35), Level: 2.4000
   indHandlers[259][1][0] = iATR(NULL, 0, 35);
   // Moving Average of Oscillator (Close, 21, 38, 7)
   indHandlers[259][2][0] = iOsMA(NULL, 0, 21, 38, 7, PRICE_CLOSE);
   // Bulls Power (26)
   indHandlers[259][3][0] = iBullsPower(NULL, 0, 26);
   // RSI (Close, 28)
   indHandlers[259][4][0] = iRSI(NULL, 0, 28, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 45)
   indHandlers[259][5][0] = iCCI(NULL, 0, 45, PRICE_TYPICAL);
   // ADX (27), Level: 41.0
   indHandlers[260][0][0] = iADX(NULL, 0, 27);
   // Bulls Power (46)
   indHandlers[260][1][0] = iBullsPower(NULL, 0, 46);
   // MACD (Close, 7, 50, 9)
   indHandlers[260][2][0] = iMACD(NULL, 0, 7, 50, 9, PRICE_CLOSE);
   // Average True Range (4), Level: 6.9000
   indHandlers[261][0][0] = iATR(NULL, 0, 4);
   // DeMarker (31)
   indHandlers[261][1][0] = iDeMarker(NULL, 0, 31);
   // Alligator (Smoothed, Median, 36, 16, 16, 13, 13, 4)
   indHandlers[261][2][0] = iAlligator(NULL, 0, 36, 16, 16, 13, 13, 4, MODE_SMMA, PRICE_MEDIAN);
   // ADX (31), Level: 25.0
   indHandlers[261][3][0] = iADX(NULL, 0, 31);
   // Bulls Power (22), Level: 0.0000
   indHandlers[262][0][0] = iBullsPower(NULL, 0, 22);
   // Average True Range (2)
   indHandlers[262][1][0] = iATR(NULL, 0, 2);
   // Moving Average (Simple, Close, 11, 0)
   indHandlers[262][2][0] = iMA(NULL, 0, 11, 0, MODE_SMA, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 20, 8, 8, 5, 5, 2)
   indHandlers[262][3][0] = iAlligator(NULL, 0, 20, 8, 8, 5, 5, 2, MODE_SMMA, PRICE_MEDIAN);
   // Candle Color (28, 1)
   indHandlers[262][4][0] = -1;
   // Moving Average (Simple, Close, 6, 0)
   indHandlers[262][5][0] = iMA(NULL, 0, 6, 0, MODE_SMA, PRICE_CLOSE);
   // Standard Deviation (Close, Simple, 17), Level: 31.2000
   indHandlers[262][6][0] = iStdDev(NULL, 0, 17, 0, MODE_SMA, PRICE_CLOSE);
   // ADX (27), Level: 41.0
   indHandlers[263][0][0] = iADX(NULL, 0, 27);
   // Commodity Channel Index (Typical, 18)
   indHandlers[263][1][0] = iCCI(NULL, 0, 18, PRICE_TYPICAL);
   // MACD (Close, 7, 50, 9)
   indHandlers[263][2][0] = iMACD(NULL, 0, 7, 50, 9, PRICE_CLOSE);
   // Average True Range (7)
   indHandlers[264][0][0] = iATR(NULL, 0, 7);
   // Envelopes (Close, Simple, 47, 0.38)
   indHandlers[264][1][0] = iEnvelopes(NULL, 0, 47, 0, MODE_SMA, PRICE_CLOSE, 0.38);
   // Stochastic Signal (4, 2, 2)
   indHandlers[264][2][0] = iStochastic(NULL, 0, 4, 2, 2, MODE_SMA, STO_LOWHIGH);
   // Moving Average of Oscillator (Close, 25, 43, 11)
   indHandlers[264][3][0] = iOsMA(NULL, 0, 25, 43, 11, PRICE_CLOSE);
   // DeMarker (33), Level: 0.78
   indHandlers[264][4][0] = iDeMarker(NULL, 0, 33);
   // Momentum (Close, 31), Level: 103.0000
   indHandlers[264][5][0] = iMomentum(NULL, 0, 31, PRICE_CLOSE);
   // Accelerator Oscillator, Level: 8.2000
   indHandlers[265][0][0] = iAC(NULL, 0);
   // Momentum (Close, 48)
   indHandlers[265][1][0] = iMomentum(NULL, 0, 48, PRICE_CLOSE);
   // Stochastic (2, 2, 1)
   indHandlers[265][2][0] = iStochastic(NULL, 0, 2, 2, 1, MODE_SMA, 0);
   // Stochastic Signal (11, 5, 8)
   indHandlers[265][3][0] = iStochastic(NULL, 0, 11, 5, 8, MODE_SMA, STO_LOWHIGH);
   // Pin Bar (9, 40)
   indHandlers[266][0][0] = -1;
   // Moving Average (Simple, Close, 14, 0)
   indHandlers[266][1][0] = iMA(NULL, 0, 14, 0, MODE_SMA, PRICE_CLOSE);
   // Bulls Power (8), Level: 0.0000
   indHandlers[266][2][0] = iBullsPower(NULL, 0, 8);
   // Bollinger Bands (Close, 31, 3.10)
   indHandlers[266][3][0] = iBands(NULL, 0, 31, 0, 3.10, PRICE_CLOSE);
   // Moving Average (Simple, Close, 45, 0)
   indHandlers[266][4][0] = iMA(NULL, 0, 45, 0, MODE_SMA, PRICE_CLOSE);
   // Pin Bar (8, 49)
   indHandlers[267][0][0] = -1;
   // Moving Average (Simple, Close, 9, 0)
   indHandlers[267][1][0] = iMA(NULL, 0, 9, 0, MODE_SMA, PRICE_CLOSE);
   // Bollinger Bands (Close, 26, 1.61)
   indHandlers[267][2][0] = iBands(NULL, 0, 26, 0, 1.61, PRICE_CLOSE);
   // Moving Average (Simple, Close, 50, 0)
   indHandlers[267][3][0] = iMA(NULL, 0, 50, 0, MODE_SMA, PRICE_CLOSE);
   // Directional Indicators (23)
   indHandlers[268][0][0] = iADX(NULL, 0, 23);
   // Candle Color (25, 4)
   indHandlers[268][1][0] = -1;
   // Stochastic (4, 1, 3)
   indHandlers[268][2][0] = iStochastic(NULL, 0, 4, 1, 3, MODE_SMA, 0);
   // Commodity Channel Index (Typical, 34)
   indHandlers[268][3][0] = iCCI(NULL, 0, 34, PRICE_TYPICAL);
   // Stochastic (4, 1, 4)
   indHandlers[268][4][0] = iStochastic(NULL, 0, 4, 1, 4, MODE_SMA, 0);
   // Average True Range (7)
   indHandlers[268][5][0] = iATR(NULL, 0, 7);
   // ADX (41), Level: 33.0
   indHandlers[269][0][0] = iADX(NULL, 0, 41);
   // Moving Average (Simple, Close, 10, 0)
   indHandlers[269][1][0] = iMA(NULL, 0, 10, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Average (Simple, Close, 48, 0)
   indHandlers[269][2][0] = iMA(NULL, 0, 48, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic Signal (17, 11, 10)
   indHandlers[270][0][0] = iStochastic(NULL, 0, 17, 11, 10, MODE_SMA, STO_LOWHIGH);
   // Envelopes (Close, Simple, 23, 0.68)
   indHandlers[270][1][0] = iEnvelopes(NULL, 0, 23, 0, MODE_SMA, PRICE_CLOSE, 0.68);
   // Stochastic Signal (10, 7, 4)
   indHandlers[270][2][0] = iStochastic(NULL, 0, 10, 7, 4, MODE_SMA, STO_LOWHIGH);
   // Stochastic (5, 2, 4)
   indHandlers[270][3][0] = iStochastic(NULL, 0, 5, 2, 4, MODE_SMA, 0);
   // Momentum (Close, 15)
   indHandlers[271][0][0] = iMomentum(NULL, 0, 15, PRICE_CLOSE);
   // Stochastic Signal (16, 10, 5)
   indHandlers[271][1][0] = iStochastic(NULL, 0, 16, 10, 5, MODE_SMA, STO_LOWHIGH);
   // Alligator (Smoothed, Median, 23, 21, 21, 6, 6, 4)
   indHandlers[271][2][0] = iAlligator(NULL, 0, 23, 21, 21, 6, 6, 4, MODE_SMMA, PRICE_MEDIAN);
   // RSI (Close, 31)
   indHandlers[271][3][0] = iRSI(NULL, 0, 31, PRICE_CLOSE);
   // Bulls Power (39), Level: 0.0000
   indHandlers[271][4][0] = iBullsPower(NULL, 0, 39);
   // Momentum (Close, 14), Level: 95.0000
   indHandlers[271][5][0] = iMomentum(NULL, 0, 14, PRICE_CLOSE);
   // Pin Bar (8, 21)
   indHandlers[271][6][0] = -1;
   // MACD (Close, 16, 36, 9)
   indHandlers[272][0][0] = iMACD(NULL, 0, 16, 36, 9, PRICE_CLOSE);
   // Average True Range (15)
   indHandlers[272][1][0] = iATR(NULL, 0, 15);
   // Moving Average (Simple, Close, 18, 0)
   indHandlers[272][2][0] = iMA(NULL, 0, 18, 0, MODE_SMA, PRICE_CLOSE);
   // MACD Signal (Close, 13, 17, 3)
   indHandlers[272][3][0] = iMACD(NULL, 0, 13, 17, 3, PRICE_CLOSE);
   // Envelopes (Close, Simple, 41, 0.31)
   indHandlers[272][4][0] = iEnvelopes(NULL, 0, 41, 0, MODE_SMA, PRICE_CLOSE, 0.31);
   // Momentum (Close, 45)
   indHandlers[272][5][0] = iMomentum(NULL, 0, 45, PRICE_CLOSE);
   // Pin Bar (9, 50)
   indHandlers[273][0][0] = -1;
   // Williams' Percent Range (20), Level: -67.0
   indHandlers[273][1][0] = iWPR(NULL, 0, 20);
   // MACD Signal (Close, 21, 37, 8)
   indHandlers[274][0][0] = iMACD(NULL, 0, 21, 37, 8, PRICE_CLOSE);
   // MACD (Close, 20, 27, 9)
   indHandlers[274][1][0] = iMACD(NULL, 0, 20, 27, 9, PRICE_CLOSE);
   // Moving Average (Simple, Close, 48, 0)
   indHandlers[274][2][0] = iMA(NULL, 0, 48, 0, MODE_SMA, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 6)
   indHandlers[274][3][0] = iCCI(NULL, 0, 6, PRICE_TYPICAL);
   // Stochastic Signal (17, 3, 7)
   indHandlers[274][4][0] = iStochastic(NULL, 0, 17, 3, 7, MODE_SMA, STO_LOWHIGH);
   // Directional Indicators (32)
   indHandlers[274][5][0] = iADX(NULL, 0, 32);
   // Moving Averages Crossover (Simple, Simple, 24, 45)
   indHandlers[275][0][0] = iMA(NULL, 0, 24, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 24, 45)
   indHandlers[275][0][1] = iMA(NULL, 0, 45, 0, MODE_SMA, PRICE_CLOSE);
   // Williams' Percent Range (49)
   indHandlers[275][1][0] = iWPR(NULL, 0, 49);
   // ADX (31), Level: 25.0
   indHandlers[275][2][0] = iADX(NULL, 0, 31);
   // RSI (Close, 17), Level: 30
   indHandlers[276][0][0] = iRSI(NULL, 0, 17, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 25, 24, 24, 15, 15, 5)
   indHandlers[276][1][0] = iAlligator(NULL, 0, 25, 24, 24, 15, 15, 5, MODE_SMMA, PRICE_MEDIAN);
   // Commodity Channel Index (Typical, 22)
   indHandlers[276][2][0] = iCCI(NULL, 0, 22, PRICE_TYPICAL);
   // Awesome Oscillator
   indHandlers[276][3][0] = iAO(NULL, 0);
   // DeMarker (38)
   indHandlers[276][4][0] = iDeMarker(NULL, 0, 38);
   // Pin Bar (10, 20)
   indHandlers[277][0][0] = -1;
   // Moving Averages Crossover (Simple, Simple, 13, 19)
   indHandlers[277][1][0] = iMA(NULL, 0, 13, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 13, 19)
   indHandlers[277][1][1] = iMA(NULL, 0, 19, 0, MODE_SMA, PRICE_CLOSE);
   // MACD Signal (Close, 23, 41, 12)
   indHandlers[277][2][0] = iMACD(NULL, 0, 23, 41, 12, PRICE_CLOSE);
   // Awesome Oscillator
   indHandlers[278][0][0] = iAO(NULL, 0);
   // Bulls Power (46), Level: 0.0000
   indHandlers[278][1][0] = iBullsPower(NULL, 0, 46);
   // Momentum (Close, 36)
   indHandlers[278][2][0] = iMomentum(NULL, 0, 36, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 45, 20, 20, 6, 6, 4)
   indHandlers[278][3][0] = iAlligator(NULL, 0, 45, 20, 20, 6, 6, 4, MODE_SMMA, PRICE_MEDIAN);
   // Average True Range (7), Level: 11.8000
   indHandlers[278][4][0] = iATR(NULL, 0, 7);
   // Stochastic (7, 7, 7), Level: 33.0
   indHandlers[279][0][0] = iStochastic(NULL, 0, 7, 7, 7, MODE_SMA, 0);
   // Alligator (Smoothed, Median, 27, 12, 12, 10, 10, 4)
   indHandlers[279][1][0] = iAlligator(NULL, 0, 27, 12, 12, 10, 10, 4, MODE_SMMA, PRICE_MEDIAN);
   // Bulls Power (26), Level: 0.0000
   indHandlers[279][2][0] = iBullsPower(NULL, 0, 26);
   // Bears Power (17), Level: 3.9200
   indHandlers[279][3][0] = iBearsPower(NULL, 0, 17);
   // Candle Color (39, 3)
   indHandlers[280][0][0] = -1;
   // Alligator (Smoothed, Median, 26, 12, 12, 5, 5, 2)
   indHandlers[280][1][0] = iAlligator(NULL, 0, 26, 12, 12, 5, 5, 2, MODE_SMMA, PRICE_MEDIAN);
   // DeMarker (6), Level: 0.82
   indHandlers[280][2][0] = iDeMarker(NULL, 0, 6);
   // Stochastic Signal (4, 3, 1)
   indHandlers[280][3][0] = iStochastic(NULL, 0, 4, 3, 1, MODE_SMA, STO_LOWHIGH);
   // Awesome Oscillator, Level: 0.0000
   indHandlers[280][4][0] = iAO(NULL, 0);
   // Awesome Oscillator, Level: 8.5000
   indHandlers[280][5][0] = iAO(NULL, 0);
   // Pin Bar (8, 29)
   indHandlers[280][6][0] = -1;
   // Accelerator Oscillator
   indHandlers[281][0][0] = iAC(NULL, 0);
   // Momentum (Close, 30), Level: 101.0000
   indHandlers[281][1][0] = iMomentum(NULL, 0, 30, PRICE_CLOSE);
   // Commodity Channel Index (Typical, 17)
   indHandlers[281][2][0] = iCCI(NULL, 0, 17, PRICE_TYPICAL);
   // DeMarker (20)
   indHandlers[281][3][0] = iDeMarker(NULL, 0, 20);
   // RSI (Close, 30)
   indHandlers[281][4][0] = iRSI(NULL, 0, 30, PRICE_CLOSE);
   // Bollinger Bands (Close, 47, 3.65)
   indHandlers[282][0][0] = iBands(NULL, 0, 47, 0, 3.65, PRICE_CLOSE);
   // MACD Signal (Close, 20, 38, 8)
   indHandlers[282][1][0] = iMACD(NULL, 0, 20, 38, 8, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 37, 18, 18, 4, 4, 3)
   indHandlers[282][2][0] = iAlligator(NULL, 0, 37, 18, 18, 4, 4, 3, MODE_SMMA, PRICE_MEDIAN);
   // Momentum (Close, 16)
   indHandlers[283][0][0] = iMomentum(NULL, 0, 16, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 10, 41)
   indHandlers[283][1][0] = iMA(NULL, 0, 10, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 10, 41)
   indHandlers[283][1][1] = iMA(NULL, 0, 41, 0, MODE_SMA, PRICE_CLOSE);
   // Williams' Percent Range (12), Level: -17.0
   indHandlers[283][2][0] = iWPR(NULL, 0, 12);
   // Moving Averages Crossover (Simple, Simple, 25, 41)
   indHandlers[283][3][0] = iMA(NULL, 0, 25, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 25, 41)
   indHandlers[283][3][1] = iMA(NULL, 0, 41, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic Signal (9, 8, 6)
   indHandlers[283][4][0] = iStochastic(NULL, 0, 9, 8, 6, MODE_SMA, STO_LOWHIGH);
   // MACD (Close, 21, 38, 9)
   indHandlers[284][0][0] = iMACD(NULL, 0, 21, 38, 9, PRICE_CLOSE);
   // Williams' Percent Range (21)
   indHandlers[284][1][0] = iWPR(NULL, 0, 21);
   // Candle Color (28, 2)
   indHandlers[284][2][0] = -1;
   // Standard Deviation (Close, Simple, 26)
   indHandlers[284][3][0] = iStdDev(NULL, 0, 26, 0, MODE_SMA, PRICE_CLOSE);
   // Stochastic (5, 4, 2)
   indHandlers[284][4][0] = iStochastic(NULL, 0, 5, 4, 2, MODE_SMA, 0);
   // Moving Average (Simple, Close, 16, 0)
   indHandlers[284][5][0] = iMA(NULL, 0, 16, 0, MODE_SMA, PRICE_CLOSE);
   // Awesome Oscillator, Level: -31.2000
   indHandlers[284][6][0] = iAO(NULL, 0);
   // Momentum (Close, 1)
   indHandlers[285][0][0] = iMomentum(NULL, 0, 1, PRICE_CLOSE);
   // Momentum (Close, 11)
   indHandlers[285][1][0] = iMomentum(NULL, 0, 11, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 48, 27, 27, 12, 12, 3)
   indHandlers[285][2][0] = iAlligator(NULL, 0, 48, 27, 27, 12, 12, 3, MODE_SMMA, PRICE_MEDIAN);
   // MACD Signal (Close, 21, 25, 5)
   indHandlers[285][3][0] = iMACD(NULL, 0, 21, 25, 5, PRICE_CLOSE);
   // Moving Average (Simple, Close, 34, 0)
   indHandlers[285][4][0] = iMA(NULL, 0, 34, 0, MODE_SMA, PRICE_CLOSE);
   // Directional Indicators (18)
   indHandlers[285][5][0] = iADX(NULL, 0, 18);
   // Bears Power (36), Level: 0.0000
   indHandlers[285][6][0] = iBearsPower(NULL, 0, 36);
   // Alligator (Smoothed, Median, 27, 13, 13, 9, 9, 1)
   indHandlers[286][0][0] = iAlligator(NULL, 0, 27, 13, 13, 9, 9, 1, MODE_SMMA, PRICE_MEDIAN);
   // Bears Power (3), Level: 0.0000
   indHandlers[286][1][0] = iBearsPower(NULL, 0, 3);
   // Moving Average (Simple, Close, 45, 0)
   indHandlers[286][2][0] = iMA(NULL, 0, 45, 0, MODE_SMA, PRICE_CLOSE);
   // Williams' Percent Range (33)
   indHandlers[286][3][0] = iWPR(NULL, 0, 33);
   // DeMarker (9), Level: 0.05
   indHandlers[286][4][0] = iDeMarker(NULL, 0, 9);
   // Commodity Channel Index (Typical, 34)
   indHandlers[286][5][0] = iCCI(NULL, 0, 34, PRICE_TYPICAL);
   // Standard Deviation (Close, Simple, 9), Level: 8.7000
   indHandlers[286][6][0] = iStdDev(NULL, 0, 9, 0, MODE_SMA, PRICE_CLOSE);
   // Momentum (Close, 50), Level: 98.0000
   indHandlers[286][7][0] = iMomentum(NULL, 0, 50, PRICE_CLOSE);
   // Alligator (Smoothed, Median, 28, 23, 23, 9, 9, 5)
   indHandlers[287][0][0] = iAlligator(NULL, 0, 28, 23, 23, 9, 9, 5, MODE_SMMA, PRICE_MEDIAN);
   // Average True Range (22)
   indHandlers[287][1][0] = iATR(NULL, 0, 22);
   // ADX (46)
   indHandlers[287][2][0] = iADX(NULL, 0, 46);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[287][3][0] = iAC(NULL, 0);
   // Directional Indicators (18)
   indHandlers[288][0][0] = iADX(NULL, 0, 18);
   // Williams' Percent Range (8)
   indHandlers[288][1][0] = iWPR(NULL, 0, 8);
   // Accelerator Oscillator
   indHandlers[288][2][0] = iAC(NULL, 0);
   // Commodity Channel Index (Typical, 49), Level: -4
   indHandlers[288][3][0] = iCCI(NULL, 0, 49, PRICE_TYPICAL);
   // Bears Power (49), Level: -7.0100
   indHandlers[288][4][0] = iBearsPower(NULL, 0, 49);
   // Average True Range (5), Level: 17.4000
   indHandlers[288][5][0] = iATR(NULL, 0, 5);
   // Stochastic (3, 2, 2), Level: 20.0
   indHandlers[289][0][0] = iStochastic(NULL, 0, 3, 2, 2, MODE_SMA, 0);
   // Williams' Percent Range (31), Level: -98.0
   indHandlers[289][1][0] = iWPR(NULL, 0, 31);
   // Stochastic (8, 4, 2), Level: 2.0
   indHandlers[289][2][0] = iStochastic(NULL, 0, 8, 4, 2, MODE_SMA, 0);
   // Pin Bar (10, 34)
   indHandlers[289][3][0] = -1;
   // ADX (10)
   indHandlers[289][4][0] = iADX(NULL, 0, 10);
   // Momentum (Close, 21), Level: 95.0000
   indHandlers[289][5][0] = iMomentum(NULL, 0, 21, PRICE_CLOSE);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[289][6][0] = iAC(NULL, 0);
   // Accelerator Oscillator, Level: 2.1000
   indHandlers[290][0][0] = iAC(NULL, 0);
   // Bollinger Bands (Close, 50, 2.13)
   indHandlers[290][1][0] = iBands(NULL, 0, 50, 0, 2.13, PRICE_CLOSE);
   // Average True Range (40), Level: 9.0000
   indHandlers[290][2][0] = iATR(NULL, 0, 40);
   // Awesome Oscillator
   indHandlers[290][3][0] = iAO(NULL, 0);
   // MACD Signal (Close, 9, 29, 13)
   indHandlers[290][4][0] = iMACD(NULL, 0, 9, 29, 13, PRICE_CLOSE);
   // MACD (Close, 15, 50, 9)
   indHandlers[291][0][0] = iMACD(NULL, 0, 15, 50, 9, PRICE_CLOSE);
   // Momentum (Close, 30)
   indHandlers[291][1][0] = iMomentum(NULL, 0, 30, PRICE_CLOSE);
   // Directional Indicators (21)
   indHandlers[291][2][0] = iADX(NULL, 0, 21);
   // Williams' Percent Range (40)
   indHandlers[291][3][0] = iWPR(NULL, 0, 40);
   // Williams' Percent Range (1), Level: -20.0
   indHandlers[292][0][0] = iWPR(NULL, 0, 1);
   // Directional Indicators (23)
   indHandlers[292][1][0] = iADX(NULL, 0, 23);
   // Alligator (Smoothed, Median, 21, 20, 20, 9, 9, 3)
   indHandlers[292][2][0] = iAlligator(NULL, 0, 21, 20, 20, 9, 9, 3, MODE_SMMA, PRICE_MEDIAN);
   // Stochastic (5, 4, 1)
   indHandlers[292][3][0] = iStochastic(NULL, 0, 5, 4, 1, MODE_SMA, 0);
   // Commodity Channel Index (Typical, 32), Level: 0
   indHandlers[292][4][0] = iCCI(NULL, 0, 32, PRICE_TYPICAL);
   // MACD Signal (Close, 15, 27, 10)
   indHandlers[292][5][0] = iMACD(NULL, 0, 15, 27, 10, PRICE_CLOSE);
   // Stochastic (2, 1, 1)
   indHandlers[293][0][0] = iStochastic(NULL, 0, 2, 1, 1, MODE_SMA, 0);
   // Envelopes (Close, Simple, 16, 0.88)
   indHandlers[293][1][0] = iEnvelopes(NULL, 0, 16, 0, MODE_SMA, PRICE_CLOSE, 0.88);
   // Accelerator Oscillator
   indHandlers[293][2][0] = iAC(NULL, 0);
   // Moving Average (Simple, Close, 14, 0)
   indHandlers[293][3][0] = iMA(NULL, 0, 14, 0, MODE_SMA, PRICE_CLOSE);
   // Momentum (Close, 36), Level: 96.0000
   indHandlers[293][4][0] = iMomentum(NULL, 0, 36, PRICE_CLOSE);
   // Envelopes (Close, Simple, 50, 0.33)
   indHandlers[293][5][0] = iEnvelopes(NULL, 0, 50, 0, MODE_SMA, PRICE_CLOSE, 0.33);
   // Moving Average of Oscillator (Close, 24, 50, 8), Level: 0.0000
   indHandlers[293][6][0] = iOsMA(NULL, 0, 24, 50, 8, PRICE_CLOSE);
   // Bollinger Bands (Close, 8, 1.90)
   indHandlers[294][0][0] = iBands(NULL, 0, 8, 0, 1.90, PRICE_CLOSE);
   // Accelerator Oscillator, Level: 0.0000
   indHandlers[294][1][0] = iAC(NULL, 0);
   // Candle Color (30, 4)
   indHandlers[294][2][0] = -1;
   // ADX (18)
   indHandlers[294][3][0] = iADX(NULL, 0, 18);
   // Momentum (Close, 24), Level: 101.0000
   indHandlers[294][4][0] = iMomentum(NULL, 0, 24, PRICE_CLOSE);
   // Stochastic (9, 3, 8), Level: 20.0
   indHandlers[295][0][0] = iStochastic(NULL, 0, 9, 3, 8, MODE_SMA, 0);
   // Bollinger Bands (Close, 12, 1.54)
   indHandlers[295][1][0] = iBands(NULL, 0, 12, 0, 1.54, PRICE_CLOSE);
   // MACD (Close, 23, 26, 9)
   indHandlers[295][2][0] = iMACD(NULL, 0, 23, 26, 9, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 6, 41)
   indHandlers[295][3][0] = iMA(NULL, 0, 6, 0, MODE_SMA, PRICE_CLOSE);
   // Moving Averages Crossover (Simple, Simple, 6, 41)
   indHandlers[295][3][1] = iMA(NULL, 0, 41, 0, MODE_SMA, PRICE_CLOSE);
   // Candle Color (44, 5)
   indHandlers[295][4][0] = -1;
   // Directional Indicators (48)
   indHandlers[295][5][0] = iADX(NULL, 0, 48);
   TesterHideIndicators(false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void SetSignals(Signal &signalList[])
  {
   int i = 0;
   ArrayResize(signalList, 2 * strategiesCount);

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bears Power","listIndexes":[4,0,0,0,0],"numValues":[24,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[7,0,3,0,0],"numValues":[46,0,0,0,0,0]},{"name":"MACD Signal","listIndexes":[3,3,0,0,0],"numValues":[25,50,13,0,0,0]}],"closeFilters":[{"name":"MACD Signal","listIndexes":[1,3,0,0,0],"numValues":[13,49,8,0,0,0]},{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[18,1,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[3,0,0,0,0],"numValues":[5,4,3,0,0,0]}]} */
   signalList[i++] = GetExitSignal_000();
   signalList[i++] = GetEntrySignal_000();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Alligator","listIndexes":[10,3,4,0,0],"numValues":[36,20,20,6,6,1]},{"name":"Stochastic","listIndexes":[4,0,0,0,0],"numValues":[4,4,4,48,0,0]}],"closeFilters":[{"name":"Moving Average","listIndexes":[7,0,3,0,0],"numValues":[45,0,0,0,0,0]},{"name":"Bulls Power","listIndexes":[5,0,0,0,0],"numValues":[2,-69.2,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_001();
   signalList[i++] = GetEntrySignal_001();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average of Oscillator","listIndexes":[4,3,0,0,0],"numValues":[10,35,12,0,0,0]},{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[24,3,0,0,0,0]},{"name":"MACD","listIndexes":[6,3,0,0,0],"numValues":[24,36,9,0,0,0]}],"closeFilters":[{"name":"ADX","listIndexes":[7,0,0,0,0],"numValues":[27,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_002();
   signalList[i++] = GetEntrySignal_002();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average of Oscillator","listIndexes":[4,3,0,0,0],"numValues":[10,35,12,0,0,0]},{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[24,3,0,0,0,0]},{"name":"MACD","listIndexes":[6,3,0,0,0],"numValues":[24,36,9,0,0,0]}],"closeFilters":[{"name":"Stochastic Signal","listIndexes":[0,0,0,0,0],"numValues":[5,4,3,0,0,0]}]} */
   signalList[i++] = GetExitSignal_003();
   signalList[i++] = GetEntrySignal_003();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"MACD Signal","listIndexes":[0,3,0,0,0],"numValues":[18,31,6,0,0,0]},{"name":"Moving Average","listIndexes":[5,0,3,0,0],"numValues":[4,0,0,0,0,0]}],"closeFilters":[{"name":"DeMarker","listIndexes":[7,0,0,0,0],"numValues":[11,0,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[1,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_004();
   signalList[i++] = GetEntrySignal_004();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Averages Crossover","listIndexes":[1,0,0,0,0],"numValues":[16,50,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[1,5,0,0,0],"numValues":[12,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[4,0,3,0,0],"numValues":[1,0,0,0,0,0]}],"closeFilters":[{"name":"Bears Power","listIndexes":[3,0,0,0,0],"numValues":[15,-33.9,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[0,0,0,0,0],"numValues":[12,7,9,0,0,0]}]} */
   signalList[i++] = GetExitSignal_005();
   signalList[i++] = GetEntrySignal_005();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Alligator","listIndexes":[8,3,4,0,0],"numValues":[33,16,16,9,9,4]},{"name":"RSI","listIndexes":[4,3,0,0,0],"numValues":[4,75,0,0,0,0]}],"closeFilters":[{"name":"Moving Average of Oscillator","listIndexes":[5,3,0,0,0],"numValues":[17,21,12,0,0,0]},{"name":"Bears Power","listIndexes":[3,0,0,0,0],"numValues":[35,0,0,0,0,0]},{"name":"MACD","listIndexes":[5,3,0,0,0],"numValues":[15,28,9,0,0,0]}]} */
   signalList[i++] = GetExitSignal_006();
   signalList[i++] = GetEntrySignal_006();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"RSI","listIndexes":[5,3,0,0,0],"numValues":[12,44,0,0,0,0]},{"name":"Envelopes","listIndexes":[4,3,0,0,0],"numValues":[11,0.65,0,0,0,0]}],"closeFilters":[{"name":"Bears Power","listIndexes":[3,0,0,0,0],"numValues":[35,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[7,0,0,0,0],"numValues":[43,0.01,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_007();
   signalList[i++] = GetEntrySignal_007();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Stochastic Signal","listIndexes":[0,0,0,0,0],"numValues":[10,8,5,0,0,0]},{"name":"MACD","listIndexes":[6,3,0,0,0],"numValues":[19,33,9,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[3,0,0,0,0],"numValues":[-1.5,0,0,0,0,0]}],"closeFilters":[{"name":"Accelerator Oscillator","listIndexes":[4,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[7,0,0,0,0],"numValues":[43,0.01,0,0,0,0]},{"name":"Momentum","listIndexes":[1,3,0,0,0],"numValues":[21,100,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[3,0,0,0,0],"numValues":[18,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_008();
   signalList[i++] = GetEntrySignal_008();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Averages Crossover","listIndexes":[0,0,0,0,0],"numValues":[12,21,0,0,0,0]},{"name":"Bulls Power","listIndexes":[4,0,0,0,0],"numValues":[48,0,0,0,0,0]},{"name":"Bulls Power","listIndexes":[4,0,0,0,0],"numValues":[9,0,0,0,0,0]}],"closeFilters":[{"name":"Commodity Channel Index","listIndexes":[6,5,0,0,0],"numValues":[35,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_009();
   signalList[i++] = GetEntrySignal_009();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":83,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Alligator","listIndexes":[9,3,4,0,0],"numValues":[32,15,15,5,5,4]},{"name":"Stochastic Signal","listIndexes":[0,0,0,0,0],"numValues":[15,13,5,0,0,0]}],"closeFilters":[{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[31,3,0,0,0,0]},{"name":"ADX","listIndexes":[1,0,0,0,0],"numValues":[12,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[4,0,3,0,0],"numValues":[21,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_010();
   signalList[i++] = GetEntrySignal_010();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[13,4,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[5,0,0,0,0],"numValues":[24,-23,0,0,0,0]}],"closeFilters":[{"name":"MACD Signal","listIndexes":[2,3,0,0,0],"numValues":[20,32,8,0,0,0]},{"name":"Stochastic","listIndexes":[7,0,0,0,0],"numValues":[9,6,7,20,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[4,3,0,0,0],"numValues":[18,36,13,0,0,0]},{"name":"Bulls Power","listIndexes":[0,0,0,0,0],"numValues":[17,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_011();
   signalList[i++] = GetEntrySignal_011();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":93,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[5,3,0,0,0],"numValues":[43,98,0,0,0,0]}],"closeFilters":[{"name":"Williams' Percent Range","listIndexes":[0,0,0,0,0],"numValues":[40,-20,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[3,0,0,0,0],"numValues":[15,7,6,0,0,0]}]} */
   signalList[i++] = GetExitSignal_012();
   signalList[i++] = GetEntrySignal_012();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[8,35,0,0,0,0]}],"closeFilters":[{"name":"MACD Signal","listIndexes":[3,3,0,0,0],"numValues":[23,26,6,0,0,0]},{"name":"Moving Average","listIndexes":[5,0,3,0,0],"numValues":[19,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[4,0,3,0,0],"numValues":[41,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_013();
   signalList[i++] = GetEntrySignal_013();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Stochastic","listIndexes":[5,0,0,0,0],"numValues":[14,10,5,14,0,0]},{"name":"Moving Average","listIndexes":[7,0,3,0,0],"numValues":[35,0,0,0,0,0]}],"closeFilters":[{"name":"MACD Signal","listIndexes":[2,3,0,0,0],"numValues":[7,25,8,0,0,0]},{"name":"Stochastic","listIndexes":[7,0,0,0,0],"numValues":[5,1,5,20,0,0]}]} */
   signalList[i++] = GetExitSignal_014();
   signalList[i++] = GetEntrySignal_014();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":39,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Envelopes","listIndexes":[0,3,0,0,0],"numValues":[11,0.67,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[2,3,0,0,0],"numValues":[8,2.02,0,0,0,0]}],"closeFilters":[{"name":"DeMarker","listIndexes":[4,0,0,0,0],"numValues":[23,0.46,0,0,0,0]},{"name":"Momentum","listIndexes":[0,3,0,0,0],"numValues":[50,100,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_015();
   signalList[i++] = GetEntrySignal_015();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":38,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[36,1,0,0,0,0]},{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[2,0.41,0,0,0,0]}],"closeFilters":[{"name":"ADX","listIndexes":[4,0,0,0,0],"numValues":[4,21,0,0,0,0]},{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[42,3,0,0,0,0]},{"name":"Alligator","listIndexes":[1,3,4,0,0],"numValues":[27,26,26,13,13,3]}]} */
   signalList[i++] = GetExitSignal_016();
   signalList[i++] = GetEntrySignal_016();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"RSI","listIndexes":[5,3,0,0,0],"numValues":[50,30,0,0,0,0]}],"closeFilters":[{"name":"DeMarker","listIndexes":[3,0,0,0,0],"numValues":[23,0.14,0,0,0,0]},{"name":"DeMarker","listIndexes":[1,0,0,0,0],"numValues":[9,0,0,0,0,0]},{"name":"MACD Signal","listIndexes":[3,3,0,0,0],"numValues":[20,25,6,0,0,0]}]} */
   signalList[i++] = GetExitSignal_017();
   signalList[i++] = GetEntrySignal_017();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":82,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Moving Average","listIndexes":[5,0,3,0,0],"numValues":[23,0,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[6,0,0,0,0],"numValues":[41,-20,0,0,0,0]}],"closeFilters":[{"name":"ADX","listIndexes":[4,0,0,0,0],"numValues":[4,21,0,0,0,0]},{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[42,3,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_018();
   signalList[i++] = GetEntrySignal_018();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":53,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Alligator","listIndexes":[3,3,4,0,0],"numValues":[15,13,13,11,11,3]},{"name":"Williams' Percent Range","listIndexes":[2,0,0,0,0],"numValues":[27,-2,0,0,0,0]},{"name":"Stochastic","listIndexes":[6,0,0,0,0],"numValues":[9,1,7,20,0,0]}],"closeFilters":[{"name":"Standard Deviation","listIndexes":[1,3,0,0,0],"numValues":[27,0,0,0,0,0]},{"name":"RSI","listIndexes":[3,3,0,0,0],"numValues":[41,42,0,0,0,0]},{"name":"Envelopes","listIndexes":[0,3,0,0,0],"numValues":[2,0.46,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_019();
   signalList[i++] = GetEntrySignal_019();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average of Oscillator","listIndexes":[5,3,0,0,0],"numValues":[20,38,12,3.6,0,0]}],"closeFilters":[{"name":"Moving Average","listIndexes":[6,0,3,0,0],"numValues":[31,0,0,0,0,0]},{"name":"Alligator","listIndexes":[4,3,4,0,0],"numValues":[29,9,9,8,8,5]}]} */
   signalList[i++] = GetExitSignal_020();
   signalList[i++] = GetEntrySignal_020();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":79,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,48,0,0,0,0]}],"closeFilters":[{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[18,3,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_021();
   signalList[i++] = GetEntrySignal_021();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":33,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bulls Power","listIndexes":[4,0,0,0,0],"numValues":[36,20.1,0,0,0,0]}],"closeFilters":[{"name":"Standard Deviation","listIndexes":[1,3,0,0,0],"numValues":[34,0,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[4,5,0,0,0],"numValues":[4,-47,0,0,0,0]},{"name":"Bears Power","listIndexes":[5,0,0,0,0],"numValues":[17,-5.52,0,0,0,0]},{"name":"MACD Signal","listIndexes":[0,3,0,0,0],"numValues":[13,27,10,0,0,0]}]} */
   signalList[i++] = GetExitSignal_022();
   signalList[i++] = GetEntrySignal_022();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":51,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[22,0.97,0,0,0,0]}],"closeFilters":[{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[19,2,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_023();
   signalList[i++] = GetEntrySignal_023();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[4,3,0,0,0],"numValues":[4,100,0,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[1,3,0,0,0],"numValues":[7,44,12,0,0,0]},{"name":"Momentum","listIndexes":[1,3,0,0,0],"numValues":[35,100,0,0,0,0]},{"name":"Momentum","listIndexes":[0,3,0,0,0],"numValues":[47,100,0,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[7,3,0,0,0],"numValues":[10,32,10,0,0,0]}],"closeFilters":[{"name":"Williams' Percent Range","listIndexes":[0,0,0,0,0],"numValues":[28,-20,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_024();
   signalList[i++] = GetEntrySignal_024();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[4,3,0,0,0],"numValues":[28,102,0,0,0,0]}],"closeFilters":[{"name":"Standard Deviation","listIndexes":[0,3,0,0,0],"numValues":[32,0,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[0,0,0,0,0],"numValues":[2,1,1,0,0,0]}]} */
   signalList[i++] = GetExitSignal_025();
   signalList[i++] = GetEntrySignal_025();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":55,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[4,3,0,0,0],"numValues":[17,98,0,0,0,0]},{"name":"Bears Power","listIndexes":[3,0,0,0,0],"numValues":[37,-4.59,0,0,0,0]}],"closeFilters":[{"name":"Awesome Oscillator","listIndexes":[4,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[0,0,0,0,0],"numValues":[6,-20,0,0,0,0]},{"name":"Momentum","listIndexes":[5,3,0,0,0],"numValues":[17,96,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[3,0,0,0,0],"numValues":[17,38,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_026();
   signalList[i++] = GetEntrySignal_026();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":15,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Moving Averages Crossover","listIndexes":[2,0,0,0,0],"numValues":[15,28,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[0,0,0,0,0],"numValues":[8,4,6,0,0,0]},{"name":"RSI","listIndexes":[6,3,0,0,0],"numValues":[44,30,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[2,5,0,0,0],"numValues":[43,0,0,0,0,0]},{"name":"MACD Signal","listIndexes":[2,3,0,0,0],"numValues":[20,36,4,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[4,0,0,0,0],"numValues":[0,0,0,0,0,0]}],"closeFilters":[{"name":"Moving Average of Oscillator","listIndexes":[2,3,0,0,0],"numValues":[23,25,7,0,0,0]}]} */
   signalList[i++] = GetExitSignal_027();
   signalList[i++] = GetEntrySignal_027();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"RSI","listIndexes":[5,3,0,0,0],"numValues":[9,30,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[3,0,0,0,0],"numValues":[16,0,0,0,0,0]},{"name":"RSI","listIndexes":[3,3,0,0,0],"numValues":[14,36,0,0,0,0]},{"name":"MACD","listIndexes":[7,3,0,0,0],"numValues":[6,43,9,0,0,0]},{"name":"Bears Power","listIndexes":[7,0,0,0,0],"numValues":[40,0,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[7,0,0,0,0],"numValues":[0,0,0,0,0,0]}],"closeFilters":[{"name":"Awesome Oscillator","listIndexes":[0,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_028();
   signalList[i++] = GetEntrySignal_028();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bulls Power","listIndexes":[0,0,0,0,0],"numValues":[33,0,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[2,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[0,0,0,0,0],"numValues":[13,31,0,0,0,0]},{"name":"Alligator","listIndexes":[2,3,4,0,0],"numValues":[33,14,14,3,3,1]},{"name":"Stochastic Signal","listIndexes":[0,0,0,0,0],"numValues":[6,2,1,0,0,0]}],"closeFilters":[{"name":"Moving Averages Crossover","listIndexes":[3,0,0,0,0],"numValues":[8,10,0,0,0,0]},{"name":"Bears Power","listIndexes":[0,0,0,0,0],"numValues":[9,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[6,0,3,0,0],"numValues":[31,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_029();
   signalList[i++] = GetEntrySignal_029();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":82,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[4,3,0,0,0],"numValues":[29,102,0,0,0,0]},{"name":"Bulls Power","listIndexes":[0,0,0,0,0],"numValues":[49,0,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[2,0,0,0,0],"numValues":[21,0,0,0,0,0]}],"closeFilters":[{"name":"Standard Deviation","listIndexes":[6,3,0,0,0],"numValues":[45,0,0,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[2,3,0,0,0],"numValues":[12,32,7,0,0,0]}]} */
   signalList[i++] = GetExitSignal_030();
   signalList[i++] = GetEntrySignal_030();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":75,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Averages Crossover","listIndexes":[1,0,0,0,0],"numValues":[11,46,0,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[6,3,0,0,0],"numValues":[13,22,13,0,0,0]}],"closeFilters":[{"name":"Envelopes","listIndexes":[0,3,0,0,0],"numValues":[8,0.27,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_031();
   signalList[i++] = GetEntrySignal_031();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":65,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Averages Crossover","listIndexes":[1,0,0,0,0],"numValues":[14,22,0,0,0,0]},{"name":"ADX","listIndexes":[3,0,0,0,0],"numValues":[14,17,0,0,0,0]}],"closeFilters":[{"name":"Moving Averages Crossover","listIndexes":[1,0,0,0,0],"numValues":[7,26,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_032();
   signalList[i++] = GetEntrySignal_032();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Standard Deviation","listIndexes":[0,3,0,0,0],"numValues":[4,0,0,0,0,0]},{"name":"ADX","listIndexes":[7,0,0,0,0],"numValues":[35,0,0,0,0,0]},{"name":"MACD","listIndexes":[7,3,0,0,0],"numValues":[9,18,9,0,0,0]},{"name":"MACD Signal","listIndexes":[1,3,0,0,0],"numValues":[12,46,8,0,0,0]}],"closeFilters":[{"name":"Awesome Oscillator","listIndexes":[4,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[3,0,0,0,0],"numValues":[16,14,11,0,0,0]}]} */
   signalList[i++] = GetExitSignal_033();
   signalList[i++] = GetEntrySignal_033();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Commodity Channel Index","listIndexes":[0,5,0,0,0],"numValues":[38,0,0,0,0,0]},{"name":"MACD Signal","listIndexes":[3,3,0,0,0],"numValues":[19,33,9,0,0,0]},{"name":"Alligator","listIndexes":[3,3,4,0,0],"numValues":[35,15,15,5,5,2]},{"name":"MACD","listIndexes":[5,3,0,0,0],"numValues":[8,44,9,0,0,0]}],"closeFilters":[{"name":"Average True Range","listIndexes":[2,0,0,0,0],"numValues":[15,19.6,0,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[4,3,0,0,0],"numValues":[18,43,4,0,0,0]},{"name":"Standard Deviation","listIndexes":[7,3,0,0,0],"numValues":[10,0,0,0,0,0]},{"name":"Bulls Power","listIndexes":[2,0,0,0,0],"numValues":[36,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_034();
   signalList[i++] = GetEntrySignal_034();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":55,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"DeMarker","listIndexes":[2,0,0,0,0],"numValues":[8,0.56,0,0,0,0]},{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[3,0.58,0,0,0,0]},{"name":"Moving Average","listIndexes":[0,0,3,0,0],"numValues":[20,0,0,0,0,0]}],"closeFilters":[{"name":"Stochastic","listIndexes":[6,0,0,0,0],"numValues":[9,6,2,20,0,0]}]} */
   signalList[i++] = GetExitSignal_035();
   signalList[i++] = GetEntrySignal_035();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average","listIndexes":[4,0,3,0,0],"numValues":[24,0,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[3,0,0,0,0],"numValues":[8,5,2,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[5,3,0,0,0],"numValues":[17,41,10,0,0,0]}],"closeFilters":[{"name":"RSI","listIndexes":[5,3,0,0,0],"numValues":[10,26,0,0,0,0]},{"name":"Average True Range","listIndexes":[0,0,0,0,0],"numValues":[1,0.01,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_036();
   signalList[i++] = GetEntrySignal_036();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":50,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"ADX","listIndexes":[4,0,0,0,0],"numValues":[38,34,0,0,0,0]},{"name":"Moving Average","listIndexes":[2,0,3,0,0],"numValues":[18,0,0,0,0,0]}],"closeFilters":[{"name":"Williams' Percent Range","listIndexes":[5,0,0,0,0],"numValues":[29,-65,0,0,0,0]},{"name":"Stochastic","listIndexes":[3,0,0,0,0],"numValues":[12,5,8,49,0,0]}]} */
   signalList[i++] = GetExitSignal_037();
   signalList[i++] = GetEntrySignal_037();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":14,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[46,0.98,0,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[2,3,0,0,0],"numValues":[5,33,4,0,0,0]}],"closeFilters":[{"name":"Stochastic Signal","listIndexes":[0,0,0,0,0],"numValues":[10,7,4,0,0,0]}]} */
   signalList[i++] = GetExitSignal_038();
   signalList[i++] = GetEntrySignal_038();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Envelopes","listIndexes":[2,3,0,0,0],"numValues":[48,0.94,0,0,0,0]},{"name":"DeMarker","listIndexes":[0,0,0,0,0],"numValues":[10,0,0,0,0,0]}],"closeFilters":[{"name":"Awesome Oscillator","listIndexes":[0,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Bears Power","listIndexes":[0,0,0,0,0],"numValues":[15,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[4,0,0,0,0],"numValues":[17,7,0,0,0,0]},{"name":"Bears Power","listIndexes":[1,0,0,0,0],"numValues":[26,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_039();
   signalList[i++] = GetEntrySignal_039();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Stochastic Signal","listIndexes":[1,0,0,0,0],"numValues":[8,2,5,0,0,0]},{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[11,0.06,0,0,0,0]},{"name":"Momentum","listIndexes":[6,3,0,0,0],"numValues":[49,100,0,0,0,0]}],"closeFilters":[{"name":"Williams' Percent Range","listIndexes":[7,0,0,0,0],"numValues":[5,-20,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_040();
   signalList[i++] = GetEntrySignal_040();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":89,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Williams' Percent Range","listIndexes":[5,0,0,0,0],"numValues":[26,-14,0,0,0,0]},{"name":"Alligator","listIndexes":[9,3,4,0,0],"numValues":[7,6,6,4,4,3]}],"closeFilters":[{"name":"MACD","listIndexes":[7,3,0,0,0],"numValues":[8,14,9,0,0,0]},{"name":"Average True Range","listIndexes":[0,0,0,0,0],"numValues":[9,0.01,0,0,0,0]},{"name":"MACD Signal","listIndexes":[3,3,0,0,0],"numValues":[10,19,8,0,0,0]},{"name":"Envelopes","listIndexes":[4,3,0,0,0],"numValues":[41,0.09,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_041();
   signalList[i++] = GetEntrySignal_041();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average","listIndexes":[5,0,3,0,0],"numValues":[50,0,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[2,0,0,0,0],"numValues":[36,-29,0,0,0,0]}],"closeFilters":[{"name":"Stochastic","listIndexes":[5,0,0,0,0],"numValues":[2,2,1,29,0,0]}]} */
   signalList[i++] = GetExitSignal_042();
   signalList[i++] = GetEntrySignal_042();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[8,37,0,0,0,0]}],"closeFilters":[{"name":"RSI","listIndexes":[6,3,0,0,0],"numValues":[47,30,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_043();
   signalList[i++] = GetEntrySignal_043();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Commodity Channel Index","listIndexes":[5,5,0,0,0],"numValues":[37,0,0,0,0,0]},{"name":"RSI","listIndexes":[2,3,0,0,0],"numValues":[27,52,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[7,5,0,0,0],"numValues":[21,0,0,0,0,0]}],"closeFilters":[{"name":"Moving Average","listIndexes":[5,0,3,0,0],"numValues":[29,0,0,0,0,0]},{"name":"Envelopes","listIndexes":[2,3,0,0,0],"numValues":[22,0.76,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[2,0,0,0,0],"numValues":[7,34,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[3,3,0,0,0],"numValues":[36,3.31,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_044();
   signalList[i++] = GetEntrySignal_044();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":84,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[14,0.83,0,0,0,0]}],"closeFilters":[{"name":"MACD","listIndexes":[1,3,0,0,0],"numValues":[11,18,9,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[5,0,0,0,0],"numValues":[13,-86,0,0,0,0]},{"name":"ADX","listIndexes":[0,0,0,0,0],"numValues":[26,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_045();
   signalList[i++] = GetEntrySignal_045();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":21,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Bulls Power","listIndexes":[5,0,0,0,0],"numValues":[31,-26.8,0,0,0,0]}],"closeFilters":[{"name":"ADX","listIndexes":[3,0,0,0,0],"numValues":[2,17,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[0,0,0,0,0],"numValues":[9,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_046();
   signalList[i++] = GetEntrySignal_046();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,34,0,0,0,0]}],"closeFilters":[{"name":"MACD Signal","listIndexes":[3,3,0,0,0],"numValues":[13,46,11,0,0,0]},{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[4,32,0,0,0,0]},{"name":"Bears Power","listIndexes":[5,0,0,0,0],"numValues":[47,0,0,0,0,0]},{"name":"RSI","listIndexes":[3,3,0,0,0],"numValues":[20,41,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_047();
   signalList[i++] = GetEntrySignal_047();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Awesome Oscillator","listIndexes":[0,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[1,0,0,0,0],"numValues":[12,42,0,0,0,0]},{"name":"DeMarker","listIndexes":[1,0,0,0,0],"numValues":[8,0,0,0,0,0]}],"closeFilters":[{"name":"Moving Average of Oscillator","listIndexes":[2,3,0,0,0],"numValues":[17,43,10,0,0,0]},{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,47,0,0,0,0]},{"name":"Envelopes","listIndexes":[5,3,0,0,0],"numValues":[46,0.55,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_048();
   signalList[i++] = GetEntrySignal_048();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[5,3,0,0,0],"numValues":[14,102,0,0,0,0]}],"closeFilters":[{"name":"DeMarker","listIndexes":[5,0,0,0,0],"numValues":[42,0.72,0,0,0,0]},{"name":"Stochastic","listIndexes":[6,0,0,0,0],"numValues":[2,1,2,20,0,0]},{"name":"Momentum","listIndexes":[5,3,0,0,0],"numValues":[44,104,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_049();
   signalList[i++] = GetEntrySignal_049();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bears Power","listIndexes":[5,0,0,0,0],"numValues":[6,0,0,0,0,0]},{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[18,3,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[2,0,0,0,0],"numValues":[24,25,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[2,0,0,0,0],"numValues":[0,0,0,0,0,0]}],"closeFilters":[{"name":"Stochastic","listIndexes":[2,0,0,0,0],"numValues":[7,3,2,92,0,0]},{"name":"Moving Average","listIndexes":[7,0,3,0,0],"numValues":[38,0,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[7,5,0,0,0],"numValues":[35,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_050();
   signalList[i++] = GetEntrySignal_050();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average","listIndexes":[5,0,3,0,0],"numValues":[23,0,0,0,0,0]},{"name":"ADX","listIndexes":[3,0,0,0,0],"numValues":[5,45,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[1,0,0,0,0],"numValues":[8,-20,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[1,0,0,0,0],"numValues":[18,26,0,0,0,0]}],"closeFilters":[{"name":"Average True Range","listIndexes":[2,0,0,0,0],"numValues":[42,19.4,0,0,0,0]},{"name":"Momentum","listIndexes":[3,3,0,0,0],"numValues":[5,97,0,0,0,0]},{"name":"DeMarker","listIndexes":[1,0,0,0,0],"numValues":[41,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_051();
   signalList[i++] = GetEntrySignal_051();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":72,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Bollinger Bands","listIndexes":[3,3,0,0,0],"numValues":[24,3.9,0,0,0,0]},{"name":"Momentum","listIndexes":[0,3,0,0,0],"numValues":[27,100,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[2,5,0,0,0],"numValues":[39,0,0,0,0,0]},{"name":"ADX","listIndexes":[2,0,0,0,0],"numValues":[2,16,0,0,0,0]}],"closeFilters":[{"name":"ADX","listIndexes":[2,0,0,0,0],"numValues":[38,24,0,0,0,0]},{"name":"DeMarker","listIndexes":[5,0,0,0,0],"numValues":[14,0.98,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[6,3,0,0,0],"numValues":[49,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_052();
   signalList[i++] = GetEntrySignal_052();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":96,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"RSI","listIndexes":[5,3,0,0,0],"numValues":[50,58,0,0,0,0]},{"name":"Momentum","listIndexes":[6,3,0,0,0],"numValues":[25,100,0,0,0,0]}],"closeFilters":[{"name":"Bears Power","listIndexes":[7,0,0,0,0],"numValues":[3,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_053();
   signalList[i++] = GetEntrySignal_053();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":29,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Accelerator Oscillator","listIndexes":[4,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[0,3,0,0,0],"numValues":[49,3.36,0,0,0,0]}],"closeFilters":[{"name":"Bulls Power","listIndexes":[3,0,0,0,0],"numValues":[6,0,0,0,0,0]},{"name":"Stochastic","listIndexes":[6,0,0,0,0],"numValues":[12,4,8,20,0,0]},{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[42,0.68,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_054();
   signalList[i++] = GetEntrySignal_054();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Envelopes","listIndexes":[2,3,0,0,0],"numValues":[48,0.94,0,0,0,0]},{"name":"DeMarker","listIndexes":[0,0,0,0,0],"numValues":[10,0,0,0,0,0]}],"closeFilters":[{"name":"Awesome Oscillator","listIndexes":[0,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[4,0,0,0,0],"numValues":[17,7,0,0,0,0]},{"name":"Bears Power","listIndexes":[1,0,0,0,0],"numValues":[26,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_055();
   signalList[i++] = GetEntrySignal_055();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":41,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bulls Power","listIndexes":[4,0,0,0,0],"numValues":[47,0,0,0,0,0]},{"name":"MACD","listIndexes":[4,3,0,0,0],"numValues":[15,42,9,0,0,0]},{"name":"MACD","listIndexes":[4,3,0,0,0],"numValues":[19,35,9,0,0,0]}],"closeFilters":[{"name":"Accelerator Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"DeMarker","listIndexes":[6,0,0,0,0],"numValues":[16,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_056();
   signalList[i++] = GetEntrySignal_056();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":20,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Alligator","listIndexes":[11,3,4,0,0],"numValues":[26,19,19,3,3,1]},{"name":"ADX","listIndexes":[1,0,0,0,0],"numValues":[27,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[3,0,0,0,0],"numValues":[15,17.1,0,0,0,0]}],"closeFilters":[{"name":"Moving Average of Oscillator","listIndexes":[2,3,0,0,0],"numValues":[20,36,10,6.7,0,0]}]} */
   signalList[i++] = GetExitSignal_057();
   signalList[i++] = GetEntrySignal_057();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":66,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Standard Deviation","listIndexes":[5,3,0,0,0],"numValues":[4,2.4,0,0,0,0]},{"name":"Moving Average","listIndexes":[6,0,3,0,0],"numValues":[48,0,0,0,0,0]}],"closeFilters":[{"name":"Bollinger Bands","listIndexes":[1,3,0,0,0],"numValues":[24,2.07,0,0,0,0]},{"name":"Moving Average","listIndexes":[5,0,3,0,0],"numValues":[42,0,0,0,0,0]},{"name":"Alligator","listIndexes":[1,3,4,0,0],"numValues":[32,13,13,12,12,3]}]} */
   signalList[i++] = GetExitSignal_058();
   signalList[i++] = GetEntrySignal_058();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":82,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[4,3,0,0,0],"numValues":[29,102,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[2,0,0,0,0],"numValues":[21,0,0,0,0,0]}],"closeFilters":[{"name":"Standard Deviation","listIndexes":[6,3,0,0,0],"numValues":[45,0,0,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[2,3,0,0,0],"numValues":[12,32,7,0,0,0]}]} */
   signalList[i++] = GetExitSignal_059();
   signalList[i++] = GetEntrySignal_059();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Accelerator Oscillator","listIndexes":[0,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[0,0,0,0,0],"numValues":[33,0,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[2,0,0,0,0],"numValues":[16,49,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[0,5,0,0,0],"numValues":[12,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[7,0,0,0,0],"numValues":[17,0.01,0,0,0,0]}],"closeFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[7,36,0,0,0,0]},{"name":"Momentum","listIndexes":[0,3,0,0,0],"numValues":[47,100,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_060();
   signalList[i++] = GetEntrySignal_060();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[12,1,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[5,0,0,0,0],"numValues":[25,-39,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[0,0,0,0,0],"numValues":[32,0,0,0,0,0]}],"closeFilters":[{"name":"Bollinger Bands","listIndexes":[3,3,0,0,0],"numValues":[14,1.42,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[6,0,0,0,0],"numValues":[25,-20,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_061();
   signalList[i++] = GetEntrySignal_061();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":79,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Williams' Percent Range","listIndexes":[2,0,0,0,0],"numValues":[21,-49,0,0,0,0]},{"name":"MACD Signal","listIndexes":[3,3,0,0,0],"numValues":[15,45,7,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]}],"closeFilters":[{"name":"Accelerator Oscillator","listIndexes":[1,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[3,0,0,0,0],"numValues":[1,0,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[1,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_062();
   signalList[i++] = GetEntrySignal_062();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average of Oscillator","listIndexes":[4,3,0,0,0],"numValues":[21,34,13,0,0,0]},{"name":"Momentum","listIndexes":[1,3,0,0,0],"numValues":[48,100,0,0,0,0]},{"name":"Moving Average","listIndexes":[2,0,3,0,0],"numValues":[34,0,0,0,0,0]},{"name":"Bulls Power","listIndexes":[6,0,0,0,0],"numValues":[15,0,0,0,0,0]}],"closeFilters":[{"name":"Williams' Percent Range","listIndexes":[3,0,0,0,0],"numValues":[32,-54,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_063();
   signalList[i++] = GetEntrySignal_063();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bears Power","listIndexes":[1,0,0,0,0],"numValues":[42,0,0,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[5,3,0,0,0],"numValues":[22,48,4,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[1,0,0,0,0],"numValues":[19,24,0,0,0,0]}],"closeFilters":[{"name":"Bulls Power","listIndexes":[2,0,0,0,0],"numValues":[33,0,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[6,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"RSI","listIndexes":[3,3,0,0,0],"numValues":[3,32,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_064();
   signalList[i++] = GetEntrySignal_064();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":39,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[0,3,0,0,0],"numValues":[16,100,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[0,0,0,0,0],"numValues":[10,41,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[2,0,0,0,0],"numValues":[12,-17,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[2,0,0,0,0],"numValues":[25,41,0,0,0,0]}],"closeFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[6,23,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_065();
   signalList[i++] = GetEntrySignal_065();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":65,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[10,47,0,0,0,0]}],"closeFilters":[{"name":"Awesome Oscillator","listIndexes":[3,0,0,0,0],"numValues":[-18.9,0,0,0,0,0]},{"name":"ADX","listIndexes":[5,0,0,0,0],"numValues":[49,15,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_066();
   signalList[i++] = GetEntrySignal_066();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"RSI","listIndexes":[5,3,0,0,0],"numValues":[9,30,0,0,0,0]},{"name":"Moving Average","listIndexes":[7,0,3,0,0],"numValues":[33,0,0,0,0,0]}],"closeFilters":[{"name":"MACD Signal","listIndexes":[3,3,0,0,0],"numValues":[5,26,5,0,0,0]}]} */
   signalList[i++] = GetExitSignal_067();
   signalList[i++] = GetEntrySignal_067();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":70,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[8,42,0,0,0,0]}],"closeFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[7,49,0,0,0,0]},{"name":"DeMarker","listIndexes":[1,0,0,0,0],"numValues":[27,0,0,0,0,0]},{"name":"Alligator","listIndexes":[8,3,4,0,0],"numValues":[42,22,22,11,11,1]}]} */
   signalList[i++] = GetExitSignal_068();
   signalList[i++] = GetEntrySignal_068();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Accelerator Oscillator","listIndexes":[4,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[2,3,0,0,0],"numValues":[12,9,0,0,0,0]}],"closeFilters":[{"name":"ADX","listIndexes":[3,0,0,0,0],"numValues":[48,43,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_069();
   signalList[i++] = GetEntrySignal_069();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":15,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[4,3,0,0,0],"numValues":[28,101,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[2,3,0,0,0],"numValues":[42,1,0,0,0,0]}],"closeFilters":[{"name":"Average True Range","listIndexes":[5,0,0,0,0],"numValues":[24,10.9,0,0,0,0]},{"name":"Alligator","listIndexes":[5,3,4,0,0],"numValues":[15,7,7,5,5,3]}]} */
   signalList[i++] = GetExitSignal_070();
   signalList[i++] = GetEntrySignal_070();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":21,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Momentum","listIndexes":[5,3,0,0,0],"numValues":[35,98,0,0,0,0]},{"name":"ADX","listIndexes":[3,0,0,0,0],"numValues":[50,43,0,0,0,0]}],"closeFilters":[{"name":"Accelerator Oscillator","listIndexes":[2,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[25,2,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[3,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Bulls Power","listIndexes":[6,0,0,0,0],"numValues":[5,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_071();
   signalList[i++] = GetEntrySignal_071();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":79,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average","listIndexes":[1,0,3,0,0],"numValues":[33,0,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[0,5,0,0,0],"numValues":[6,0,0,0,0,0]},{"name":"Bulls Power","listIndexes":[7,0,0,0,0],"numValues":[22,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[0,0,0,0,0],"numValues":[17,0.01,0,0,0,0]},{"name":"Stochastic","listIndexes":[7,0,0,0,0],"numValues":[9,8,8,20,0,0]}],"closeFilters":[{"name":"Awesome Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_072();
   signalList[i++] = GetEntrySignal_072();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":99,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Directional Indicators","listIndexes":[1,0,0,0,0],"numValues":[35,0,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[7,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[7,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Momentum","listIndexes":[0,3,0,0,0],"numValues":[46,100,0,0,0,0]}],"closeFilters":[{"name":"RSI","listIndexes":[4,3,0,0,0],"numValues":[29,72,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_073();
   signalList[i++] = GetEntrySignal_073();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Standard Deviation","listIndexes":[0,3,0,0,0],"numValues":[4,0,0,0,0,0]},{"name":"ADX","listIndexes":[7,0,0,0,0],"numValues":[35,0,0,0,0,0]},{"name":"MACD","listIndexes":[7,3,0,0,0],"numValues":[9,18,9,0,0,0]},{"name":"MACD Signal","listIndexes":[1,3,0,0,0],"numValues":[12,46,8,0,0,0]}],"closeFilters":[{"name":"Awesome Oscillator","listIndexes":[4,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[1,3,0,0,0],"numValues":[36,0,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[3,0,0,0,0],"numValues":[16,14,11,0,0,0]}]} */
   signalList[i++] = GetExitSignal_074();
   signalList[i++] = GetEntrySignal_074();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":41,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Average True Range","listIndexes":[4,0,0,0,0],"numValues":[2,7.1,0,0,0,0]},{"name":"MACD","listIndexes":[4,3,0,0,0],"numValues":[14,29,9,0,0,0]}],"closeFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[8,34,0,0,0,0]},{"name":"MACD","listIndexes":[1,3,0,0,0],"numValues":[11,34,9,0,0,0]}]} */
   signalList[i++] = GetExitSignal_075();
   signalList[i++] = GetEntrySignal_075();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":72,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[4,3,0,0,0],"numValues":[43,102,0,0,0,0]},{"name":"Stochastic","listIndexes":[1,0,0,0,0],"numValues":[3,3,1,20,0,0]}],"closeFilters":[{"name":"Standard Deviation","listIndexes":[6,3,0,0,0],"numValues":[36,0,0,0,0,0]},{"name":"Stochastic","listIndexes":[6,0,0,0,0],"numValues":[12,5,8,20,0,0]},{"name":"RSI","listIndexes":[4,3,0,0,0],"numValues":[6,50,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_076();
   signalList[i++] = GetEntrySignal_076();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bulls Power","listIndexes":[1,0,0,0,0],"numValues":[23,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[0,0,0,0,0],"numValues":[35,0.01,0,0,0,0]},{"name":"MACD Signal","listIndexes":[0,3,0,0,0],"numValues":[17,32,6,0,0,0]},{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[49,2,0,0,0,0]}],"closeFilters":[{"name":"Momentum","listIndexes":[2,3,0,0,0],"numValues":[35,103,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[2,3,0,0,0],"numValues":[4,1.01,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_077();
   signalList[i++] = GetEntrySignal_077();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":25,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[4,3,0,0,0],"numValues":[19,102,0,0,0,0]}],"closeFilters":[{"name":"RSI","listIndexes":[6,3,0,0,0],"numValues":[38,30,0,0,0,0]},{"name":"Envelopes","listIndexes":[5,3,0,0,0],"numValues":[32,0.37,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_078();
   signalList[i++] = GetEntrySignal_078();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":86,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Awesome Oscillator","listIndexes":[4,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[0,0,0,0,0],"numValues":[20,24,0,0,0,0]},{"name":"Average True Range","listIndexes":[1,0,0,0,0],"numValues":[14,0.01,0,0,0,0]}],"closeFilters":[{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[24,1,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_079();
   signalList[i++] = GetEntrySignal_079();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[33,1,0,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[5,3,0,0,0],"numValues":[13,36,7,0,0,0]},{"name":"MACD Signal","listIndexes":[2,3,0,0,0],"numValues":[19,28,12,0,0,0]},{"name":"Bollinger Bands","listIndexes":[1,3,0,0,0],"numValues":[20,2.98,0,0,0,0]}],"closeFilters":[{"name":"Bears Power","listIndexes":[0,0,0,0,0],"numValues":[35,0,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[3,0,0,0,0],"numValues":[4,1,1,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[3,5,0,0,0],"numValues":[14,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_080();
   signalList[i++] = GetEntrySignal_080();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Accelerator Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Alligator","listIndexes":[10,3,4,0,0],"numValues":[41,20,20,7,7,4]}],"closeFilters":[{"name":"Moving Average","listIndexes":[4,0,3,0,0],"numValues":[48,0,0,0,0,0]},{"name":"RSI","listIndexes":[0,3,0,0,0],"numValues":[32,30,0,0,0,0]},{"name":"Alligator","listIndexes":[9,3,4,0,0],"numValues":[34,16,16,5,5,2]},{"name":"Alligator","listIndexes":[1,3,4,0,0],"numValues":[24,23,23,7,7,2]}]} */
   signalList[i++] = GetExitSignal_081();
   signalList[i++] = GetEntrySignal_081();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":41,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Average True Range","listIndexes":[4,0,0,0,0],"numValues":[2,7.1,0,0,0,0]},{"name":"MACD","listIndexes":[4,3,0,0,0],"numValues":[14,29,9,0,0,0]}],"closeFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[8,34,0,0,0,0]},{"name":"DeMarker","listIndexes":[6,0,0,0,0],"numValues":[3,0,0,0,0,0]},{"name":"Stochastic","listIndexes":[3,0,0,0,0],"numValues":[13,11,5,17,0,0]}]} */
   signalList[i++] = GetExitSignal_082();
   signalList[i++] = GetEntrySignal_082();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":97,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average","listIndexes":[2,0,3,0,0],"numValues":[2,0,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[1,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[0,0,0,0,0],"numValues":[14,25,0,0,0,0]}],"closeFilters":[{"name":"Momentum","listIndexes":[2,3,0,0,0],"numValues":[11,103,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_083();
   signalList[i++] = GetEntrySignal_083();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":58,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"RSI","listIndexes":[5,3,0,0,0],"numValues":[48,30,0,0,0,0]}],"closeFilters":[{"name":"RSI","listIndexes":[7,3,0,0,0],"numValues":[16,30,0,0,0,0]},{"name":"Moving Average","listIndexes":[2,0,3,0,0],"numValues":[18,0,0,0,0,0]},{"name":"Envelopes","listIndexes":[2,3,0,0,0],"numValues":[13,0.63,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[0,0,0,0,0],"numValues":[13,45,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_084();
   signalList[i++] = GetEntrySignal_084();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Accelerator Oscillator","listIndexes":[4,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[2,3,0,0,0],"numValues":[12,9,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[3,5,0,0,0],"numValues":[37,0,0,0,0,0]}],"closeFilters":[{"name":"ADX","listIndexes":[3,0,0,0,0],"numValues":[48,43,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_085();
   signalList[i++] = GetEntrySignal_085();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":14,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[46,0.98,0,0,0,0]}],"closeFilters":[{"name":"Stochastic Signal","listIndexes":[0,0,0,0,0],"numValues":[10,7,4,0,0,0]}]} */
   signalList[i++] = GetExitSignal_086();
   signalList[i++] = GetEntrySignal_086();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":52,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bulls Power","listIndexes":[4,0,0,0,0],"numValues":[43,0,0,0,0,0]},{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[34,2,0,0,0,0]},{"name":"Momentum","listIndexes":[7,3,0,0,0],"numValues":[44,100,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[3,0,0,0,0],"numValues":[21,31,0,0,0,0]},{"name":"MACD","listIndexes":[3,3,0,0,0],"numValues":[9,20,9,0,0,0]}],"closeFilters":[{"name":"Bears Power","listIndexes":[1,0,0,0,0],"numValues":[41,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_087();
   signalList[i++] = GetEntrySignal_087();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":70,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"ADX","listIndexes":[2,0,0,0,0],"numValues":[30,17,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[3,3,0,0,0],"numValues":[35,3.39,0,0,0,0]}],"closeFilters":[{"name":"Bears Power","listIndexes":[1,0,0,0,0],"numValues":[31,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_088();
   signalList[i++] = GetEntrySignal_088();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":67,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,39,0,0,0,0]}],"closeFilters":[{"name":"Directional Indicators","listIndexes":[1,0,0,0,0],"numValues":[38,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_089();
   signalList[i++] = GetEntrySignal_089();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":99,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"DeMarker","listIndexes":[2,0,0,0,0],"numValues":[8,0.56,0,0,0,0]},{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[3,0.58,0,0,0,0]},{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[4,0.63,0,0,0,0]}],"closeFilters":[{"name":"Stochastic","listIndexes":[6,0,0,0,0],"numValues":[9,6,2,20,0,0]}]} */
   signalList[i++] = GetExitSignal_090();
   signalList[i++] = GetEntrySignal_090();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Accelerator Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[0,3,0,0,0],"numValues":[31,1.91,0,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[0,3,0,0,0],"numValues":[11,13,3,0,0,0]}],"closeFilters":[{"name":"ADX","listIndexes":[7,0,0,0,0],"numValues":[19,0,0,0,0,0]},{"name":"DeMarker","listIndexes":[2,0,0,0,0],"numValues":[40,0.89,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[3,0,0,0,0],"numValues":[27,-60,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_091();
   signalList[i++] = GetEntrySignal_091();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bulls Power","listIndexes":[4,0,0,0,0],"numValues":[9,0,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[1,0,0,0,0],"numValues":[12,42,0,0,0,0]}],"closeFilters":[{"name":"Momentum","listIndexes":[0,3,0,0,0],"numValues":[5,100,0,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[2,3,0,0,0],"numValues":[17,43,10,0,0,0]},{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,47,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_092();
   signalList[i++] = GetEntrySignal_092();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Standard Deviation","listIndexes":[7,3,0,0,0],"numValues":[21,0,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[0,0,0,0,0],"numValues":[25,30,0,0,0,0]},{"name":"RSI","listIndexes":[1,3,0,0,0],"numValues":[37,30,0,0,0,0]}],"closeFilters":[{"name":"ADX","listIndexes":[7,0,0,0,0],"numValues":[18,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_093();
   signalList[i++] = GetEntrySignal_093();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bulls Power","listIndexes":[0,0,0,0,0],"numValues":[33,0,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[2,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[0,0,0,0,0],"numValues":[13,31,0,0,0,0]},{"name":"Alligator","listIndexes":[2,3,4,0,0],"numValues":[33,14,14,3,3,1]},{"name":"Stochastic Signal","listIndexes":[0,0,0,0,0],"numValues":[6,2,1,0,0,0]}],"closeFilters":[{"name":"Moving Averages Crossover","listIndexes":[3,0,0,0,0],"numValues":[8,10,0,0,0,0]},{"name":"Bears Power","listIndexes":[0,0,0,0,0],"numValues":[9,0,0,0,0,0]},{"name":"Alligator","listIndexes":[4,3,4,0,0],"numValues":[20,12,12,9,9,4]}]} */
   signalList[i++] = GetExitSignal_094();
   signalList[i++] = GetEntrySignal_094();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":57,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Accelerator Oscillator","listIndexes":[4,0,0,0,0],"numValues":[-7.2,0,0,0,0,0]}],"closeFilters":[{"name":"Moving Average of Oscillator","listIndexes":[1,3,0,0,0],"numValues":[12,43,4,0,0,0]}]} */
   signalList[i++] = GetExitSignal_095();
   signalList[i++] = GetEntrySignal_095();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":86,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Awesome Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[0,0,3,0,0],"numValues":[35,0,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[6,0,0,0,0],"numValues":[47,-20,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[1,5,0,0,0],"numValues":[25,0,0,0,0,0]}],"closeFilters":[{"name":"Directional Indicators","listIndexes":[2,0,0,0,0],"numValues":[13,0,0,0,0,0]},{"name":"Momentum","listIndexes":[3,3,0,0,0],"numValues":[49,95,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_096();
   signalList[i++] = GetEntrySignal_096();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,46,0,0,0,0]}],"closeFilters":[{"name":"Moving Average","listIndexes":[5,0,3,0,0],"numValues":[8,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_097();
   signalList[i++] = GetEntrySignal_097();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":75,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Averages Crossover","listIndexes":[0,0,0,0,0],"numValues":[7,33,0,0,0,0]},{"name":"Envelopes","listIndexes":[2,3,0,0,0],"numValues":[6,0.15,0,0,0,0]}],"closeFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[8,21,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[1,0,0,0,0],"numValues":[6,4,1,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[4,3,0,0,0],"numValues":[19,39,13,3.1,0,0]}]} */
   signalList[i++] = GetExitSignal_098();
   signalList[i++] = GetEntrySignal_098();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":69,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[8,3,0,0,0,0]},{"name":"Stochastic","listIndexes":[7,0,0,0,0],"numValues":[5,2,3,20,0,0]}],"closeFilters":[{"name":"Envelopes","listIndexes":[4,3,0,0,0],"numValues":[33,0.98,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_099();
   signalList[i++] = GetEntrySignal_099();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":29,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Accelerator Oscillator","listIndexes":[4,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[0,3,0,0,0],"numValues":[49,3.36,0,0,0,0]}],"closeFilters":[{"name":"Bulls Power","listIndexes":[3,0,0,0,0],"numValues":[6,0,0,0,0,0]},{"name":"Momentum","listIndexes":[5,3,0,0,0],"numValues":[33,101,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_100();
   signalList[i++] = GetEntrySignal_100();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":35,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[35,0.98,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[2,0,0,0,0],"numValues":[11,-36,0,0,0,0]}],"closeFilters":[{"name":"Momentum","listIndexes":[0,3,0,0,0],"numValues":[28,100,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[1,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_101();
   signalList[i++] = GetEntrySignal_101();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":33,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[37,0.83,0,0,0,0]}],"closeFilters":[{"name":"Average True Range","listIndexes":[6,0,0,0,0],"numValues":[7,0.01,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[1,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[1,0,3,0,0],"numValues":[32,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_102();
   signalList[i++] = GetEntrySignal_102();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":95,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average","listIndexes":[4,0,3,0,0],"numValues":[31,0,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]}],"closeFilters":[{"name":"Stochastic Signal","listIndexes":[3,0,0,0,0],"numValues":[2,1,1,0,0,0]},{"name":"Standard Deviation","listIndexes":[5,3,0,0,0],"numValues":[5,12.6,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[5,5,0,0,0],"numValues":[7,0,0,0,0,0]},{"name":"Momentum","listIndexes":[6,3,0,0,0],"numValues":[11,100,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_103();
   signalList[i++] = GetEntrySignal_103();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":94,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Average True Range","listIndexes":[4,0,0,0,0],"numValues":[4,12.1,0,0,0,0]},{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[44,1,0,0,0,0]}],"closeFilters":[{"name":"ADX","listIndexes":[6,0,0,0,0],"numValues":[39,0,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[3,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_104();
   signalList[i++] = GetEntrySignal_104();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":67,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Accelerator Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[4,0,3,0,0],"numValues":[48,0,0,0,0,0]}],"closeFilters":[{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[5,1,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_105();
   signalList[i++] = GetEntrySignal_105();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":11,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[4,3,0,0,0],"numValues":[34,102,0,0,0,0]},{"name":"DeMarker","listIndexes":[0,0,0,0,0],"numValues":[39,0,0,0,0,0]}],"closeFilters":[{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[12,3,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_106();
   signalList[i++] = GetEntrySignal_106();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":86,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"MACD","listIndexes":[4,3,0,0,0],"numValues":[15,48,9,0,0,0]},{"name":"Standard Deviation","listIndexes":[7,3,0,0,0],"numValues":[44,0,0,0,0,0]}],"closeFilters":[{"name":"Moving Averages Crossover","listIndexes":[0,0,0,0,0],"numValues":[4,9,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_107();
   signalList[i++] = GetEntrySignal_107();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":39,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average of Oscillator","listIndexes":[4,3,0,0,0],"numValues":[19,20,8,0,0,0]},{"name":"Bears Power","listIndexes":[0,0,0,0,0],"numValues":[38,0,0,0,0,0]},{"name":"RSI","listIndexes":[1,3,0,0,0],"numValues":[19,30,0,0,0,0]}],"closeFilters":[{"name":"Directional Indicators","listIndexes":[3,0,0,0,0],"numValues":[41,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_108();
   signalList[i++] = GetEntrySignal_108();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bears Power","listIndexes":[5,0,0,0,0],"numValues":[6,0,0,0,0,0]},{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[18,3,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[2,0,0,0,0],"numValues":[24,25,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[2,0,0,0,0],"numValues":[0,0,0,0,0,0]}],"closeFilters":[{"name":"Stochastic","listIndexes":[2,0,0,0,0],"numValues":[7,3,2,92,0,0]},{"name":"Stochastic Signal","listIndexes":[0,0,0,0,0],"numValues":[16,12,4,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[7,5,0,0,0],"numValues":[35,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_109();
   signalList[i++] = GetEntrySignal_109();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":86,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Envelopes","listIndexes":[4,3,0,0,0],"numValues":[10,0.13,0,0,0,0]},{"name":"Envelopes","listIndexes":[4,3,0,0,0],"numValues":[26,0.88,0,0,0,0]}],"closeFilters":[{"name":"Momentum","listIndexes":[3,3,0,0,0],"numValues":[2,99,0,0,0,0]},{"name":"Moving Average","listIndexes":[6,0,3,0,0],"numValues":[49,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_110();
   signalList[i++] = GetEntrySignal_110();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Accelerator Oscillator","listIndexes":[4,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[2,3,0,0,0],"numValues":[12,9,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[3,5,0,0,0],"numValues":[37,0,0,0,0,0]}],"closeFilters":[{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[32,1,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_111();
   signalList[i++] = GetEntrySignal_111();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":52,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Alligator","listIndexes":[6,3,4,0,0],"numValues":[32,19,19,14,14,5]},{"name":"Alligator","listIndexes":[2,3,4,0,0],"numValues":[31,24,24,12,12,3]}],"closeFilters":[{"name":"Bears Power","listIndexes":[3,0,0,0,0],"numValues":[35,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_112();
   signalList[i++] = GetEntrySignal_112();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":30,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[46,0.76,0,0,0,0]},{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[29,0.63,0,0,0,0]},{"name":"Stochastic","listIndexes":[7,0,0,0,0],"numValues":[13,4,1,20,0,0]}],"closeFilters":[{"name":"Stochastic Signal","listIndexes":[3,0,0,0,0],"numValues":[12,9,8,0,0,0]},{"name":"Envelopes","listIndexes":[1,3,0,0,0],"numValues":[22,0.29,0,0,0,0]},{"name":"RSI","listIndexes":[2,3,0,0,0],"numValues":[19,64,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_113();
   signalList[i++] = GetEntrySignal_113();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":62,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"MACD","listIndexes":[4,3,0,0,0],"numValues":[21,38,9,0,0,0]},{"name":"ADX","listIndexes":[0,0,0,0,0],"numValues":[31,0,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[1,0,0,0,0],"numValues":[21,-20,0,0,0,0]},{"name":"Bears Power","listIndexes":[1,0,0,0,0],"numValues":[2,0,0,0,0,0]}],"closeFilters":[{"name":"ADX","listIndexes":[1,0,0,0,0],"numValues":[28,0,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Bulls Power","listIndexes":[2,0,0,0,0],"numValues":[44,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_114();
   signalList[i++] = GetEntrySignal_114();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Awesome Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[1,3,0,0,0],"numValues":[5,38,12,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[1,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"MACD Signal","listIndexes":[2,3,0,0,0],"numValues":[5,47,8,0,0,0]}],"closeFilters":[{"name":"MACD","listIndexes":[6,3,0,0,0],"numValues":[17,42,9,0,0,0]}]} */
   signalList[i++] = GetExitSignal_115();
   signalList[i++] = GetEntrySignal_115();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bollinger Bands","listIndexes":[2,3,0,0,0],"numValues":[25,3.89,0,0,0,0]}],"closeFilters":[{"name":"Moving Average of Oscillator","listIndexes":[3,3,0,0,0],"numValues":[22,35,11,0,0,0]},{"name":"Stochastic Signal","listIndexes":[1,0,0,0,0],"numValues":[15,9,7,0,0,0]},{"name":"Bollinger Bands","listIndexes":[1,3,0,0,0],"numValues":[33,1.52,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_116();
   signalList[i++] = GetEntrySignal_116();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[5,3,0,0,0],"numValues":[45,100,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[6,3,0,0,0],"numValues":[28,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[6,0,0,0,0],"numValues":[44,0.01,0,0,0,0]}],"closeFilters":[{"name":"RSI","listIndexes":[0,3,0,0,0],"numValues":[48,30,0,0,0,0]},{"name":"DeMarker","listIndexes":[1,0,0,0,0],"numValues":[24,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_117();
   signalList[i++] = GetEntrySignal_117();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":31,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"ADX","listIndexes":[4,0,0,0,0],"numValues":[20,37,0,0,0,0]},{"name":"Average True Range","listIndexes":[6,0,0,0,0],"numValues":[4,0.01,0,0,0,0]},{"name":"Alligator","listIndexes":[5,3,4,0,0],"numValues":[36,27,27,11,11,1]}],"closeFilters":[{"name":"Envelopes","listIndexes":[4,3,0,0,0],"numValues":[10,0.38,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[5,0,0,0,0],"numValues":[36,-3,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_118();
   signalList[i++] = GetEntrySignal_118();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":54,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Directional Indicators","listIndexes":[1,0,0,0,0],"numValues":[1,0,0,0,0,0]},{"name":"Bears Power","listIndexes":[6,0,0,0,0],"numValues":[27,0,0,0,0,0]}],"closeFilters":[{"name":"Average True Range","listIndexes":[5,0,0,0,0],"numValues":[30,0.3,0,0,0,0]},{"name":"DeMarker","listIndexes":[0,0,0,0,0],"numValues":[1,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[3,0,0,0,0],"numValues":[6,0.2,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_119();
   signalList[i++] = GetEntrySignal_119();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Envelopes","listIndexes":[4,3,0,0,0],"numValues":[7,0.46,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[7,5,0,0,0],"numValues":[23,0,0,0,0,0]}],"closeFilters":[{"name":"Bollinger Bands","listIndexes":[4,3,0,0,0],"numValues":[12,1.24,0,0,0,0]},{"name":"Moving Average","listIndexes":[3,0,3,0,0],"numValues":[8,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_120();
   signalList[i++] = GetEntrySignal_120();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average","listIndexes":[4,0,3,0,0],"numValues":[24,0,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[3,0,0,0,0],"numValues":[8,5,2,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[5,3,0,0,0],"numValues":[17,41,10,0,0,0]}],"closeFilters":[{"name":"Bulls Power","listIndexes":[0,0,0,0,0],"numValues":[12,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_121();
   signalList[i++] = GetEntrySignal_121();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,34,0,0,0,0]}],"closeFilters":[{"name":"Accelerator Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"DeMarker","listIndexes":[2,0,0,0,0],"numValues":[19,0.93,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_122();
   signalList[i++] = GetEntrySignal_122();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":65,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Averages Crossover","listIndexes":[1,0,0,0,0],"numValues":[14,22,0,0,0,0]},{"name":"ADX","listIndexes":[3,0,0,0,0],"numValues":[14,17,0,0,0,0]}],"closeFilters":[{"name":"Stochastic","listIndexes":[3,0,0,0,0],"numValues":[6,3,1,41,0,0]}]} */
   signalList[i++] = GetExitSignal_123();
   signalList[i++] = GetEntrySignal_123();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average","listIndexes":[4,0,3,0,0],"numValues":[25,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[7,0,0,0,0],"numValues":[2,0.01,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[6,3,0,0,0],"numValues":[28,0,0,0,0,0]}],"closeFilters":[{"name":"ADX","listIndexes":[0,0,0,0,0],"numValues":[41,0,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[4,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[32,0.51,0,0,0,0]},{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[11,5,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_124();
   signalList[i++] = GetEntrySignal_124();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":82,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Alligator","listIndexes":[10,3,4,0,0],"numValues":[19,6,6,3,3,1]},{"name":"Directional Indicators","listIndexes":[2,0,0,0,0],"numValues":[10,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[0,0,0,0,0],"numValues":[36,0.01,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[1,0,0,0,0],"numValues":[0,0,0,0,0,0]}],"closeFilters":[{"name":"Bollinger Bands","listIndexes":[0,3,0,0,0],"numValues":[41,2.75,0,0,0,0]},{"name":"Alligator","listIndexes":[4,3,4,0,0],"numValues":[19,8,8,5,5,3]}]} */
   signalList[i++] = GetExitSignal_125();
   signalList[i++] = GetEntrySignal_125();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Averages Crossover","listIndexes":[0,0,0,0,0],"numValues":[12,21,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[3,0,0,0,0],"numValues":[41,0,0,0,0,0]},{"name":"Alligator","listIndexes":[0,3,4,0,0],"numValues":[10,6,6,5,5,1]},{"name":"Commodity Channel Index","listIndexes":[5,5,0,0,0],"numValues":[33,0,0,0,0,0]}],"closeFilters":[{"name":"Awesome Oscillator","listIndexes":[2,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_126();
   signalList[i++] = GetEntrySignal_126();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":41,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Average True Range","listIndexes":[4,0,0,0,0],"numValues":[2,7.1,0,0,0,0]},{"name":"MACD","listIndexes":[4,3,0,0,0],"numValues":[14,29,9,0,0,0]}],"closeFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[8,34,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[0,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_127();
   signalList[i++] = GetEntrySignal_127();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":14,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[49,0.66,0,0,0,0]}],"closeFilters":[{"name":"Average True Range","listIndexes":[2,0,0,0,0],"numValues":[34,12.6,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[4,5,0,0,0],"numValues":[48,0,0,0,0,0]},{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[24,4,0,0,0,0]},{"name":"Bulls Power","listIndexes":[5,0,0,0,0],"numValues":[46,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_128();
   signalList[i++] = GetEntrySignal_128();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[12,2,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[3,3,0,0,0],"numValues":[47,5.8,0,0,0,0]},{"name":"MACD Signal","listIndexes":[1,3,0,0,0],"numValues":[21,27,12,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[7,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[2,5,0,0,0],"numValues":[41,0,0,0,0,0]}],"closeFilters":[{"name":"Bears Power","listIndexes":[7,0,0,0,0],"numValues":[39,0,0,0,0,0]},{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[7,1,0,0,0,0]},{"name":"Alligator","listIndexes":[8,3,4,0,0],"numValues":[23,10,10,9,9,5]}]} */
   signalList[i++] = GetExitSignal_129();
   signalList[i++] = GetEntrySignal_129();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average of Oscillator","listIndexes":[1,3,0,0,0],"numValues":[15,45,4,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[7,0,0,0,0],"numValues":[45,-20,0,0,0,0]},{"name":"DeMarker","listIndexes":[4,0,0,0,0],"numValues":[5,0.38,0,0,0,0]},{"name":"Stochastic","listIndexes":[7,0,0,0,0],"numValues":[17,1,8,20,0,0]}],"closeFilters":[{"name":"Alligator","listIndexes":[8,3,4,0,0],"numValues":[33,11,11,9,9,3]},{"name":"Accelerator Oscillator","listIndexes":[1,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_130();
   signalList[i++] = GetEntrySignal_130();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"MACD Signal","listIndexes":[1,3,0,0,0],"numValues":[10,35,9,0,0,0]},{"name":"Envelopes","listIndexes":[1,3,0,0,0],"numValues":[39,0.91,0,0,0,0]}],"closeFilters":[{"name":"Bears Power","listIndexes":[3,0,0,0,0],"numValues":[29,0,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[3,0,0,0,0],"numValues":[6,38,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_131();
   signalList[i++] = GetEntrySignal_131();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":37,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bears Power","listIndexes":[6,0,0,0,0],"numValues":[32,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[4,0,0,0,0],"numValues":[1,17.5,0,0,0,0]}],"closeFilters":[{"name":"Awesome Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[2,0,0,0,0],"numValues":[9,1,6,0,0,0]},{"name":"Moving Average","listIndexes":[1,0,3,0,0],"numValues":[10,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_132();
   signalList[i++] = GetEntrySignal_132();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":22,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Alligator","listIndexes":[2,3,4,0,0],"numValues":[32,24,24,8,8,3]},{"name":"Average True Range","listIndexes":[6,0,0,0,0],"numValues":[49,0.01,0,0,0,0]},{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[13,0.43,0,0,0,0]}],"closeFilters":[{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[31,4,0,0,0,0]},{"name":"Alligator","listIndexes":[3,3,4,0,0],"numValues":[16,15,15,7,7,5]}]} */
   signalList[i++] = GetExitSignal_133();
   signalList[i++] = GetEntrySignal_133();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[8,37,0,0,0,0]}],"closeFilters":[{"name":"Alligator","listIndexes":[3,3,4,0,0],"numValues":[47,21,21,6,6,1]}]} */
   signalList[i++] = GetExitSignal_134();
   signalList[i++] = GetEntrySignal_134();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":71,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Envelopes","listIndexes":[2,3,0,0,0],"numValues":[48,0.94,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[2,0,0,0,0],"numValues":[28,0,0,0,0,0]},{"name":"Bulls Power","listIndexes":[1,0,0,0,0],"numValues":[7,0,0,0,0,0]},{"name":"MACD","listIndexes":[1,3,0,0,0],"numValues":[22,42,9,0,0,0]}],"closeFilters":[{"name":"Momentum","listIndexes":[7,3,0,0,0],"numValues":[32,100,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_135();
   signalList[i++] = GetEntrySignal_135();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":83,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[4,3,0,0,0],"numValues":[34,100,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[3,3,0,0,0],"numValues":[42,2.91,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[0,3,0,0,0],"numValues":[40,0,0,0,0,0]}],"closeFilters":[{"name":"ADX","listIndexes":[5,0,0,0,0],"numValues":[25,42,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_136();
   signalList[i++] = GetEntrySignal_136();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":49,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Accelerator Oscillator","listIndexes":[7,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Momentum","listIndexes":[4,3,0,0,0],"numValues":[30,101,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[1,5,0,0,0],"numValues":[17,0,0,0,0,0]}],"closeFilters":[{"name":"Directional Indicators","listIndexes":[1,0,0,0,0],"numValues":[31,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_137();
   signalList[i++] = GetEntrySignal_137();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":79,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bears Power","listIndexes":[0,0,0,0,0],"numValues":[23,0,0,0,0,0]},{"name":"Bulls Power","listIndexes":[5,0,0,0,0],"numValues":[46,0,0,0,0,0]},{"name":"Momentum","listIndexes":[6,3,0,0,0],"numValues":[36,100,0,0,0,0]},{"name":"Alligator","listIndexes":[5,3,4,0,0],"numValues":[45,20,20,6,6,4]}],"closeFilters":[{"name":"Average True Range","listIndexes":[5,0,0,0,0],"numValues":[7,11.8,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_138();
   signalList[i++] = GetEntrySignal_138();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":84,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Accelerator Oscillator","listIndexes":[6,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[28,0.06,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[0,3,0,0,0],"numValues":[48,1.34,0,0,0,0]}],"closeFilters":[{"name":"Momentum","listIndexes":[5,3,0,0,0],"numValues":[21,100,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[0,0,0,0,0],"numValues":[18,21,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[3,0,0,0,0],"numValues":[3,1,1,0,0,0]}]} */
   signalList[i++] = GetExitSignal_139();
   signalList[i++] = GetEntrySignal_139();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":14,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Average True Range","listIndexes":[4,0,0,0,0],"numValues":[3,15.7,0,0,0,0]},{"name":"Alligator","listIndexes":[4,3,4,0,0],"numValues":[26,15,15,6,6,3]}],"closeFilters":[{"name":"Standard Deviation","listIndexes":[3,3,0,0,0],"numValues":[49,44.4,0,0,0,0]},{"name":"Envelopes","listIndexes":[4,3,0,0,0],"numValues":[50,0.22,0,0,0,0]},{"name":"Bears Power","listIndexes":[5,0,0,0,0],"numValues":[47,0,0,0,0,0]},{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,22,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_140();
   signalList[i++] = GetEntrySignal_140();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":82,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bollinger Bands","listIndexes":[3,3,0,0,0],"numValues":[4,3.47,0,0,0,0]}],"closeFilters":[{"name":"Envelopes","listIndexes":[1,3,0,0,0],"numValues":[20,0.88,0,0,0,0]},{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[50,4,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_141();
   signalList[i++] = GetEntrySignal_141();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":72,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[4,3,0,0,0],"numValues":[43,102,0,0,0,0]},{"name":"Stochastic","listIndexes":[1,0,0,0,0],"numValues":[3,3,1,20,0,0]}],"closeFilters":[{"name":"Standard Deviation","listIndexes":[6,3,0,0,0],"numValues":[36,0,0,0,0,0]},{"name":"RSI","listIndexes":[2,3,0,0,0],"numValues":[11,82,0,0,0,0]},{"name":"RSI","listIndexes":[4,3,0,0,0],"numValues":[6,50,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_142();
   signalList[i++] = GetEntrySignal_142();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":54,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bears Power","listIndexes":[4,0,0,0,0],"numValues":[4,0,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[2,0,0,0,0],"numValues":[5.7,0,0,0,0,0]}],"closeFilters":[{"name":"Commodity Channel Index","listIndexes":[3,5,0,0,0],"numValues":[27,0,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[2,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[0,3,0,0,0],"numValues":[48,2.53,0,0,0,0]},{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[8,5,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_143();
   signalList[i++] = GetEntrySignal_143();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":84,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,37,0,0,0,0]}],"closeFilters":[{"name":"Moving Average","listIndexes":[5,0,3,0,0],"numValues":[28,0,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_144();
   signalList[i++] = GetEntrySignal_144();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Accelerator Oscillator","listIndexes":[3,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[1,0,0,0,0],"numValues":[34,-20,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[3,3,0,0,0],"numValues":[14,1.37,0,0,0,0]}],"closeFilters":[{"name":"ADX","listIndexes":[6,0,0,0,0],"numValues":[46,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_145();
   signalList[i++] = GetEntrySignal_145();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":14,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[46,0.98,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[6,5,0,0,0],"numValues":[32,0,0,0,0,0]}],"closeFilters":[{"name":"Moving Averages Crossover","listIndexes":[3,0,0,0,0],"numValues":[21,38,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_146();
   signalList[i++] = GetEntrySignal_146();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Alligator","listIndexes":[8,3,4,0,0],"numValues":[27,13,13,9,9,1]},{"name":"Bears Power","listIndexes":[3,0,0,0,0],"numValues":[3,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[0,0,3,0,0],"numValues":[45,0,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[1,0,0,0,0],"numValues":[33,-20,0,0,0,0]}],"closeFilters":[{"name":"DeMarker","listIndexes":[3,0,0,0,0],"numValues":[9,0.05,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[7,5,0,0,0],"numValues":[34,0,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[2,3,0,0,0],"numValues":[9,8.7,0,0,0,0]},{"name":"Moving Average","listIndexes":[7,0,3,0,0],"numValues":[41,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_147();
   signalList[i++] = GetEntrySignal_147();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"MACD","listIndexes":[5,3,0,0,0],"numValues":[11,27,9,0,0,0]},{"name":"DeMarker","listIndexes":[3,0,0,0,0],"numValues":[22,0.44,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[1,5,0,0,0],"numValues":[34,0,0,0,0,0]}],"closeFilters":[{"name":"Standard Deviation","listIndexes":[7,3,0,0,0],"numValues":[32,0,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[1,0,0,0,0],"numValues":[17,9,5,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[6,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[1,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_148();
   signalList[i++] = GetEntrySignal_148();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":64,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"RSI","listIndexes":[5,3,0,0,0],"numValues":[50,30,0,0,0,0]}],"closeFilters":[{"name":"Moving Averages Crossover","listIndexes":[2,0,0,0,0],"numValues":[13,32,0,0,0,0]},{"name":"Stochastic","listIndexes":[7,0,0,0,0],"numValues":[9,9,2,20,0,0]}]} */
   signalList[i++] = GetExitSignal_149();
   signalList[i++] = GetEntrySignal_149();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":24,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Commodity Channel Index","listIndexes":[0,5,0,0,0],"numValues":[9,0,0,0,0,0]},{"name":"DeMarker","listIndexes":[2,0,0,0,0],"numValues":[25,0.63,0,0,0,0]},{"name":"Average True Range","listIndexes":[3,0,0,0,0],"numValues":[48,6.6,0,0,0,0]},{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[13,0.68,0,0,0,0]}],"closeFilters":[{"name":"Bulls Power","listIndexes":[3,0,0,0,0],"numValues":[22,0,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[0,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_150();
   signalList[i++] = GetEntrySignal_150();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":66,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,49,0,0,0,0]}],"closeFilters":[{"name":"Moving Averages Crossover","listIndexes":[0,0,0,0,0],"numValues":[16,32,0,0,0,0]},{"name":"DeMarker","listIndexes":[1,0,0,0,0],"numValues":[27,0,0,0,0,0]},{"name":"Stochastic","listIndexes":[3,0,0,0,0],"numValues":[5,4,5,4,0,0]}]} */
   signalList[i++] = GetExitSignal_151();
   signalList[i++] = GetEntrySignal_151();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":98,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average of Oscillator","listIndexes":[4,3,0,0,0],"numValues":[12,17,13,0,0,0]},{"name":"Alligator","listIndexes":[2,3,4,0,0],"numValues":[26,15,15,12,12,2]},{"name":"Commodity Channel Index","listIndexes":[6,5,0,0,0],"numValues":[2,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[2,0,3,0,0],"numValues":[13,0,0,0,0,0]},{"name":"MACD Signal","listIndexes":[2,3,0,0,0],"numValues":[11,30,5,0,0,0]}],"closeFilters":[{"name":"DeMarker","listIndexes":[1,0,0,0,0],"numValues":[43,0,0,0,0,0]},{"name":"MACD","listIndexes":[3,3,0,0,0],"numValues":[5,24,9,0,0,0]},{"name":"Average True Range","listIndexes":[7,0,0,0,0],"numValues":[30,0.01,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[4,3,0,0,0],"numValues":[19,1.67,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_152();
   signalList[i++] = GetEntrySignal_152();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Awesome Oscillator","listIndexes":[4,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"ADX","listIndexes":[0,0,0,0,0],"numValues":[42,0,0,0,0,0]},{"name":"Stochastic","listIndexes":[5,0,0,0,0],"numValues":[4,2,3,69,0,0]}],"closeFilters":[{"name":"Moving Average","listIndexes":[6,0,3,0,0],"numValues":[31,0,0,0,0,0]},{"name":"MACD Signal","listIndexes":[3,3,0,0,0],"numValues":[19,24,9,0,0,0]},{"name":"Moving Average","listIndexes":[2,0,3,0,0],"numValues":[14,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_153();
   signalList[i++] = GetEntrySignal_153();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Averages Crossover","listIndexes":[1,0,0,0,0],"numValues":[16,50,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[1,5,0,0,0],"numValues":[12,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[4,0,3,0,0],"numValues":[1,0,0,0,0,0]}],"closeFilters":[{"name":"Bears Power","listIndexes":[3,0,0,0,0],"numValues":[15,-33.9,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[1,0,0,0,0],"numValues":[8,5,2,0,0,0]},{"name":"Stochastic Signal","listIndexes":[0,0,0,0,0],"numValues":[12,7,9,0,0,0]}]} */
   signalList[i++] = GetExitSignal_154();
   signalList[i++] = GetEntrySignal_154();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":41,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"RSI","listIndexes":[4,3,0,0,0],"numValues":[48,30,0,0,0,0]},{"name":"ADX","listIndexes":[0,0,0,0,0],"numValues":[30,0,0,0,0,0]}],"closeFilters":[{"name":"RSI","listIndexes":[0,3,0,0,0],"numValues":[42,30,0,0,0,0]},{"name":"Moving Average","listIndexes":[7,0,3,0,0],"numValues":[50,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_155();
   signalList[i++] = GetEntrySignal_155();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":63,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"MACD","listIndexes":[5,3,0,0,0],"numValues":[12,38,9,0,0,0]},{"name":"Standard Deviation","listIndexes":[1,3,0,0,0],"numValues":[47,0,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[3,0,0,0,0],"numValues":[13,0,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[6,3,0,0,0],"numValues":[46,0,0,0,0,0]}],"closeFilters":[{"name":"DeMarker","listIndexes":[5,0,0,0,0],"numValues":[42,0.19,0,0,0,0]},{"name":"MACD Signal","listIndexes":[3,3,0,0,0],"numValues":[21,38,8,0,0,0]}]} */
   signalList[i++] = GetExitSignal_156();
   signalList[i++] = GetEntrySignal_156();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":84,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,37,0,0,0,0]}],"closeFilters":[{"name":"Moving Average","listIndexes":[5,0,3,0,0],"numValues":[28,0,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"ADX","listIndexes":[2,0,0,0,0],"numValues":[23,34,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_157();
   signalList[i++] = GetEntrySignal_157();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Stochastic","listIndexes":[3,0,0,0,0],"numValues":[4,3,1,37,0,0]},{"name":"Stochastic","listIndexes":[2,0,0,0,0],"numValues":[2,1,2,60,0,0]},{"name":"Stochastic Signal","listIndexes":[1,0,0,0,0],"numValues":[5,2,1,0,0,0]},{"name":"Standard Deviation","listIndexes":[0,3,0,0,0],"numValues":[2,0,0,0,0,0]}],"closeFilters":[{"name":"Awesome Oscillator","listIndexes":[1,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"MACD Signal","listIndexes":[0,3,0,0,0],"numValues":[7,49,7,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[1,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[3,0,3,0,0],"numValues":[43,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_158();
   signalList[i++] = GetEntrySignal_158();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Alligator","listIndexes":[6,3,4,0,0],"numValues":[22,11,11,6,6,2]},{"name":"Moving Average of Oscillator","listIndexes":[0,3,0,0,0],"numValues":[11,13,3,0,0,0]},{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[45,2,0,0,0,0]}],"closeFilters":[{"name":"Bears Power","listIndexes":[0,0,0,0,0],"numValues":[2,0,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[1,0,0,0,0],"numValues":[9,0,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[1,0,0,0,0],"numValues":[49,-20,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_159();
   signalList[i++] = GetEntrySignal_159();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":92,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,49,0,0,0,0]}],"closeFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[7,49,0,0,0,0]},{"name":"DeMarker","listIndexes":[1,0,0,0,0],"numValues":[27,0,0,0,0,0]},{"name":"Stochastic","listIndexes":[3,0,0,0,0],"numValues":[5,4,5,4,0,0]},{"name":"Williams' Percent Range","listIndexes":[4,0,0,0,0],"numValues":[3,-98,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_160();
   signalList[i++] = GetEntrySignal_160();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":64,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Standard Deviation","listIndexes":[4,3,0,0,0],"numValues":[6,9.3,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[3,0,0,0,0],"numValues":[3,2,1,0,0,0]}],"closeFilters":[{"name":"MACD Signal","listIndexes":[0,3,0,0,0],"numValues":[11,15,9,0,0,0]},{"name":"DeMarker","listIndexes":[4,0,0,0,0],"numValues":[2,0.88,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[4,3,0,0,0],"numValues":[5,3.49,0,0,0,0]},{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[15,3,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_161();
   signalList[i++] = GetEntrySignal_161();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":93,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bollinger Bands","listIndexes":[3,3,0,0,0],"numValues":[34,3.51,0,0,0,0]}],"closeFilters":[{"name":"Directional Indicators","listIndexes":[3,0,0,0,0],"numValues":[29,0,0,0,0,0]},{"name":"Envelopes","listIndexes":[1,3,0,0,0],"numValues":[38,0.96,0,0,0,0]},{"name":"Average True Range","listIndexes":[1,0,0,0,0],"numValues":[23,0.01,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_162();
   signalList[i++] = GetEntrySignal_162();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":90,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Accelerator Oscillator","listIndexes":[5,0,0,0,0],"numValues":[8.2,0,0,0,0,0]},{"name":"Momentum","listIndexes":[1,3,0,0,0],"numValues":[48,100,0,0,0,0]}],"closeFilters":[{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[34,0.1,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[3,0,0,0,0],"numValues":[11,5,8,0,0,0]}]} */
   signalList[i++] = GetExitSignal_163();
   signalList[i++] = GetEntrySignal_163();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":75,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[34,0.97,0,0,0,0]},{"name":"Bears Power","listIndexes":[2,0,0,0,0],"numValues":[50,0,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[0,3,0,0,0],"numValues":[22,2.68,0,0,0,0]}],"closeFilters":[{"name":"MACD Signal","listIndexes":[1,3,0,0,0],"numValues":[22,40,11,0,0,0]},{"name":"Moving Average","listIndexes":[3,0,3,0,0],"numValues":[17,0,0,0,0,0]},{"name":"MACD","listIndexes":[0,3,0,0,0],"numValues":[25,43,9,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[6,5,0,0,0],"numValues":[21,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_164();
   signalList[i++] = GetEntrySignal_164();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":99,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"MACD Signal","listIndexes":[1,3,0,0,0],"numValues":[21,28,11,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[5,3,0,0,0],"numValues":[6,43,5,-3.4,0,0]},{"name":"Commodity Channel Index","listIndexes":[1,5,0,0,0],"numValues":[27,0,0,0,0,0]}],"closeFilters":[{"name":"Moving Averages Crossover","listIndexes":[0,0,0,0,0],"numValues":[20,30,0,0,0,0]},{"name":"Envelopes","listIndexes":[2,3,0,0,0],"numValues":[16,0.78,0,0,0,0]},{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[14,1,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_165();
   signalList[i++] = GetEntrySignal_165();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":95,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"RSI","listIndexes":[5,3,0,0,0],"numValues":[50,30,0,0,0,0]}],"closeFilters":[{"name":"Moving Averages Crossover","listIndexes":[2,0,0,0,0],"numValues":[13,32,0,0,0,0]},{"name":"Stochastic","listIndexes":[7,0,0,0,0],"numValues":[9,9,2,20,0,0]}]} */
   signalList[i++] = GetExitSignal_166();
   signalList[i++] = GetEntrySignal_166();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":81,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Commodity Channel Index","listIndexes":[4,5,0,0,0],"numValues":[34,0,0,0,0,0]},{"name":"Momentum","listIndexes":[1,3,0,0,0],"numValues":[48,100,0,0,0,0]},{"name":"Moving Average","listIndexes":[2,0,3,0,0],"numValues":[14,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[6,0,0,0,0],"numValues":[49,0.01,0,0,0,0]}],"closeFilters":[{"name":"Williams' Percent Range","listIndexes":[7,0,0,0,0],"numValues":[19,-20,0,0,0,0]},{"name":"Envelopes","listIndexes":[0,3,0,0,0],"numValues":[18,0.2,0,0,0,0]},{"name":"Envelopes","listIndexes":[2,3,0,0,0],"numValues":[2,0.63,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_167();
   signalList[i++] = GetEntrySignal_167();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[22,2,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[1,0,0,0,0],"numValues":[5,0,0,0,0,0]}],"closeFilters":[{"name":"Awesome Oscillator","listIndexes":[6,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_168();
   signalList[i++] = GetEntrySignal_168();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":49,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Alligator","listIndexes":[6,3,4,0,0],"numValues":[31,27,27,11,11,2]},{"name":"Moving Averages Crossover","listIndexes":[2,0,0,0,0],"numValues":[20,44,0,0,0,0]},{"name":"Alligator","listIndexes":[0,3,4,0,0],"numValues":[12,11,11,2,2,1]}],"closeFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,50,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_169();
   signalList[i++] = GetEntrySignal_169();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Stochastic Signal","listIndexes":[0,0,0,0,0],"numValues":[16,8,10,0,0,0]},{"name":"Moving Average","listIndexes":[1,0,3,0,0],"numValues":[16,0,0,0,0,0]},{"name":"MACD Signal","listIndexes":[3,3,0,0,0],"numValues":[23,34,4,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[1,5,0,0,0],"numValues":[24,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[0,0,3,0,0],"numValues":[10,0,0,0,0,0]},{"name":"Stochastic","listIndexes":[1,0,0,0,0],"numValues":[4,1,1,20,0,0]}],"closeFilters":[{"name":"Bears Power","listIndexes":[4,0,0,0,0],"numValues":[41,0,0,0,0,0]},{"name":"Envelopes","listIndexes":[1,3,0,0,0],"numValues":[17,0.47,0,0,0,0]},{"name":"Envelopes","listIndexes":[1,3,0,0,0],"numValues":[22,0.91,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_170();
   signalList[i++] = GetEntrySignal_170();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Stochastic Signal","listIndexes":[1,0,0,0,0],"numValues":[8,2,5,0,0,0]},{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[11,0.06,0,0,0,0]},{"name":"Momentum","listIndexes":[6,3,0,0,0],"numValues":[49,100,0,0,0,0]}],"closeFilters":[{"name":"RSI","listIndexes":[5,3,0,0,0],"numValues":[35,59,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_171();
   signalList[i++] = GetEntrySignal_171();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":11,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[4,3,0,0,0],"numValues":[34,102,0,0,0,0]},{"name":"DeMarker","listIndexes":[0,0,0,0,0],"numValues":[39,0,0,0,0,0]}],"closeFilters":[{"name":"MACD","listIndexes":[1,3,0,0,0],"numValues":[21,24,9,0,0,0]}]} */
   signalList[i++] = GetExitSignal_172();
   signalList[i++] = GetEntrySignal_172();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Stochastic","listIndexes":[5,0,0,0,0],"numValues":[11,4,11,71,0,0]},{"name":"Stochastic","listIndexes":[4,0,0,0,0],"numValues":[5,3,1,49,0,0]}],"closeFilters":[{"name":"RSI","listIndexes":[2,3,0,0,0],"numValues":[50,65,0,0,0,0]},{"name":"Average True Range","listIndexes":[2,0,0,0,0],"numValues":[28,3,0,0,0,0]},{"name":"Envelopes","listIndexes":[4,3,0,0,0],"numValues":[39,0.18,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_173();
   signalList[i++] = GetEntrySignal_173();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":70,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Envelopes","listIndexes":[4,3,0,0,0],"numValues":[3,0.56,0,0,0,0]}],"closeFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[7,49,0,0,0,0]},{"name":"DeMarker","listIndexes":[1,0,0,0,0],"numValues":[27,0,0,0,0,0]},{"name":"Alligator","listIndexes":[8,3,4,0,0],"numValues":[42,22,22,11,11,1]},{"name":"RSI","listIndexes":[2,3,0,0,0],"numValues":[23,63,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_174();
   signalList[i++] = GetEntrySignal_174();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bulls Power","listIndexes":[4,0,0,0,0],"numValues":[44,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[2,0,3,0,0],"numValues":[29,0,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[1,3,0,0,0],"numValues":[21,0,0,0,0,0]},{"name":"MACD","listIndexes":[6,3,0,0,0],"numValues":[8,42,9,0,0,0]},{"name":"MACD","listIndexes":[0,3,0,0,0],"numValues":[20,22,9,0,0,0]},{"name":"Bears Power","listIndexes":[1,0,0,0,0],"numValues":[4,0,0,0,0,0]}],"closeFilters":[{"name":"Moving Average of Oscillator","listIndexes":[7,3,0,0,0],"numValues":[22,31,9,0,0,0]},{"name":"Stochastic","listIndexes":[1,0,0,0,0],"numValues":[14,9,13,20,0,0]},{"name":"RSI","listIndexes":[3,3,0,0,0],"numValues":[31,37,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_175();
   signalList[i++] = GetEntrySignal_175();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":51,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[39,1,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[5,0,0,0,0],"numValues":[42,-20,0,0,0,0]}],"closeFilters":[{"name":"Stochastic","listIndexes":[0,0,0,0,0],"numValues":[12,6,3,20,0,0]}]} */
   signalList[i++] = GetExitSignal_176();
   signalList[i++] = GetEntrySignal_176();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,46,0,0,0,0]}],"closeFilters":[{"name":"Momentum","listIndexes":[6,3,0,0,0],"numValues":[36,100,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_177();
   signalList[i++] = GetEntrySignal_177();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,41,0,0,0,0]}],"closeFilters":[{"name":"Commodity Channel Index","listIndexes":[6,5,0,0,0],"numValues":[21,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_178();
   signalList[i++] = GetEntrySignal_178();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":26,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bears Power","listIndexes":[4,0,0,0,0],"numValues":[2,0,0,0,0,0]}],"closeFilters":[{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[35,3,0,0,0,0]},{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,30,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_179();
   signalList[i++] = GetEntrySignal_179();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":71,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Envelopes","listIndexes":[2,3,0,0,0],"numValues":[48,0.94,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[2,0,0,0,0],"numValues":[28,0,0,0,0,0]},{"name":"Bulls Power","listIndexes":[1,0,0,0,0],"numValues":[7,0,0,0,0,0]},{"name":"MACD","listIndexes":[1,3,0,0,0],"numValues":[22,42,9,0,0,0]}],"closeFilters":[{"name":"Envelopes","listIndexes":[2,3,0,0,0],"numValues":[13,0.28,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_180();
   signalList[i++] = GetEntrySignal_180();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":49,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Alligator","listIndexes":[11,3,4,0,0],"numValues":[15,10,10,4,4,1]},{"name":"Moving Averages Crossover","listIndexes":[2,0,0,0,0],"numValues":[20,44,0,0,0,0]},{"name":"Alligator","listIndexes":[0,3,4,0,0],"numValues":[12,11,11,2,2,1]}],"closeFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,50,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_181();
   signalList[i++] = GetEntrySignal_181();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":94,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[5,0.8,0,0,0,0]}],"closeFilters":[{"name":"DeMarker","listIndexes":[0,0,0,0,0],"numValues":[39,0,0,0,0,0]},{"name":"Bulls Power","listIndexes":[3,0,0,0,0],"numValues":[5,0,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[2,3,0,0,0],"numValues":[41,2.15,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_182();
   signalList[i++] = GetEntrySignal_182();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":96,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bears Power","listIndexes":[7,0,0,0,0],"numValues":[29,0,0,0,0,0]},{"name":"MACD Signal","listIndexes":[1,3,0,0,0],"numValues":[13,44,9,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[0,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[7,0,0,0,0],"numValues":[35,-20,0,0,0,0]}],"closeFilters":[{"name":"MACD","listIndexes":[3,3,0,0,0],"numValues":[24,38,9,0,0,0]},{"name":"DeMarker","listIndexes":[3,0,0,0,0],"numValues":[10,0.09,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_183();
   signalList[i++] = GetEntrySignal_183();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":54,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average of Oscillator","listIndexes":[5,3,0,0,0],"numValues":[22,26,6,0,0,0]},{"name":"MACD Signal","listIndexes":[3,3,0,0,0],"numValues":[24,31,10,0,0,0]},{"name":"Directional Indicators","listIndexes":[3,0,0,0,0],"numValues":[9,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[2,0,3,0,0],"numValues":[34,0,0,0,0,0]}],"closeFilters":[{"name":"Commodity Channel Index","listIndexes":[3,5,0,0,0],"numValues":[29,-60,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_184();
   signalList[i++] = GetEntrySignal_184();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"RSI","listIndexes":[5,3,0,0,0],"numValues":[38,30,0,0,0,0]}],"closeFilters":[{"name":"ADX","listIndexes":[7,0,0,0,0],"numValues":[14,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[4,0,3,0,0],"numValues":[50,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_185();
   signalList[i++] = GetEntrySignal_185();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":60,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average of Oscillator","listIndexes":[2,3,0,0,0],"numValues":[7,40,13,5.2,0,0]},{"name":"Envelopes","listIndexes":[0,3,0,0,0],"numValues":[33,0.06,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[3,3,0,0,0],"numValues":[9,1.03,0,0,0,0]}],"closeFilters":[{"name":"Awesome Oscillator","listIndexes":[2,0,0,0,0],"numValues":[3.6,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_186();
   signalList[i++] = GetEntrySignal_186();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":66,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Standard Deviation","listIndexes":[5,3,0,0,0],"numValues":[4,2.4,0,0,0,0]},{"name":"Moving Average","listIndexes":[6,0,3,0,0],"numValues":[48,0,0,0,0,0]}],"closeFilters":[{"name":"Bollinger Bands","listIndexes":[1,3,0,0,0],"numValues":[24,2.07,0,0,0,0]},{"name":"Moving Average","listIndexes":[5,0,3,0,0],"numValues":[42,0,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[0,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_187();
   signalList[i++] = GetEntrySignal_187();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":77,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average","listIndexes":[5,0,3,0,0],"numValues":[17,0,0,0,0,0]},{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[42,2,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[1,0,0,0,0],"numValues":[5,0,0,0,0,0]},{"name":"Alligator","listIndexes":[4,3,4,0,0],"numValues":[23,21,21,7,7,2]},{"name":"Stochastic","listIndexes":[5,0,0,0,0],"numValues":[13,5,3,54,0,0]},{"name":"Commodity Channel Index","listIndexes":[5,5,0,0,0],"numValues":[5,0,0,0,0,0]},{"name":"Bears Power","listIndexes":[1,0,0,0,0],"numValues":[8,0,0,0,0,0]}],"closeFilters":[{"name":"MACD Signal","listIndexes":[1,3,0,0,0],"numValues":[20,27,6,0,0,0]}]} */
   signalList[i++] = GetExitSignal_188();
   signalList[i++] = GetEntrySignal_188();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":37,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bulls Power","listIndexes":[2,0,0,0,0],"numValues":[12,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[4,0,0,0,0],"numValues":[1,17.5,0,0,0,0]}],"closeFilters":[{"name":"Awesome Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[2,0,0,0,0],"numValues":[9,1,6,0,0,0]},{"name":"Moving Average","listIndexes":[1,0,3,0,0],"numValues":[10,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_189();
   signalList[i++] = GetEntrySignal_189();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":37,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Average True Range","listIndexes":[4,0,0,0,0],"numValues":[1,17.5,0,0,0,0]},{"name":"Bulls Power","listIndexes":[2,0,0,0,0],"numValues":[3,0,0,0,0,0]}],"closeFilters":[{"name":"Awesome Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"DeMarker","listIndexes":[0,0,0,0,0],"numValues":[33,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[1,0,3,0,0],"numValues":[10,0,0,0,0,0]},{"name":"Momentum","listIndexes":[2,3,0,0,0],"numValues":[37,100,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_190();
   signalList[i++] = GetEntrySignal_190();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":88,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"MACD","listIndexes":[2,3,0,0,0],"numValues":[16,36,9,0,0,0]},{"name":"Average True Range","listIndexes":[7,0,0,0,0],"numValues":[15,0.01,0,0,0,0]},{"name":"Moving Average","listIndexes":[4,0,3,0,0],"numValues":[18,0,0,0,0,0]},{"name":"MACD Signal","listIndexes":[0,3,0,0,0],"numValues":[13,17,3,0,0,0]}],"closeFilters":[{"name":"Envelopes","listIndexes":[4,3,0,0,0],"numValues":[41,0.31,0,0,0,0]},{"name":"Momentum","listIndexes":[0,3,0,0,0],"numValues":[45,100,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_191();
   signalList[i++] = GetEntrySignal_191();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":58,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bollinger Bands","listIndexes":[2,3,0,0,0],"numValues":[32,2.5,0,0,0,0]},{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[48,2,0,0,0,0]},{"name":"Alligator","listIndexes":[0,3,4,0,0],"numValues":[31,24,24,15,15,5]}],"closeFilters":[{"name":"Commodity Channel Index","listIndexes":[2,5,0,0,0],"numValues":[20,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_192();
   signalList[i++] = GetEntrySignal_192();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Alligator","listIndexes":[11,3,4,0,0],"numValues":[28,12,12,7,7,3]},{"name":"Moving Averages Crossover","listIndexes":[3,0,0,0,0],"numValues":[9,20,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[7,5,0,0,0],"numValues":[20,0,0,0,0,0]}],"closeFilters":[{"name":"Directional Indicators","listIndexes":[3,0,0,0,0],"numValues":[38,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_193();
   signalList[i++] = GetEntrySignal_193();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":66,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"RSI","listIndexes":[5,3,0,0,0],"numValues":[31,30,0,0,0,0]}],"closeFilters":[{"name":"Bulls Power","listIndexes":[3,0,0,0,0],"numValues":[35,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_194();
   signalList[i++] = GetEntrySignal_194();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"MACD","listIndexes":[7,3,0,0,0],"numValues":[18,38,9,0,0,0]},{"name":"Alligator","listIndexes":[2,3,4,0,0],"numValues":[22,18,18,7,7,4]},{"name":"Moving Averages Crossover","listIndexes":[0,0,0,0,0],"numValues":[10,23,0,0,0,0]}],"closeFilters":[{"name":"MACD Signal","listIndexes":[2,3,0,0,0],"numValues":[20,32,8,0,0,0]},{"name":"Stochastic","listIndexes":[7,0,0,0,0],"numValues":[9,6,7,20,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[4,3,0,0,0],"numValues":[18,36,13,0,0,0]},{"name":"Bulls Power","listIndexes":[0,0,0,0,0],"numValues":[17,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_195();
   signalList[i++] = GetEntrySignal_195();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average","listIndexes":[5,0,3,0,0],"numValues":[16,0,0,0,0,0]},{"name":"RSI","listIndexes":[7,3,0,0,0],"numValues":[22,30,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[2,0,0,0,0],"numValues":[46,0,0,0,0,0]},{"name":"Bears Power","listIndexes":[3,0,0,0,0],"numValues":[40,0,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[1,3,0,0,0],"numValues":[9,0,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[1,0,0,0,0],"numValues":[0,0,0,0,0,0]}],"closeFilters":[{"name":"Stochastic Signal","listIndexes":[1,0,0,0,0],"numValues":[8,5,2,0,0,0]}]} */
   signalList[i++] = GetExitSignal_196();
   signalList[i++] = GetEntrySignal_196();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,34,0,0,0,0]}],"closeFilters":[{"name":"MACD Signal","listIndexes":[3,3,0,0,0],"numValues":[13,46,11,0,0,0]},{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[4,32,0,0,0,0]},{"name":"ADX","listIndexes":[1,0,0,0,0],"numValues":[19,0,0,0,0,0]},{"name":"RSI","listIndexes":[3,3,0,0,0],"numValues":[20,41,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_197();
   signalList[i++] = GetEntrySignal_197();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Alligator","listIndexes":[6,3,4,0,0],"numValues":[12,11,11,7,7,4]},{"name":"Commodity Channel Index","listIndexes":[1,5,0,0,0],"numValues":[7,0,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[7,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[3,0,0,0,0],"numValues":[12,10,8,0,0,0]}],"closeFilters":[{"name":"Bears Power","listIndexes":[7,0,0,0,0],"numValues":[5,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_198();
   signalList[i++] = GetEntrySignal_198();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Accelerator Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[1,0,0,0,0],"numValues":[6,45,0,0,0,0]}],"closeFilters":[{"name":"Commodity Channel Index","listIndexes":[3,5,0,0,0],"numValues":[31,-8,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[4,3,0,0,0],"numValues":[47,1.3,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[0,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[4,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_199();
   signalList[i++] = GetEntrySignal_199();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Commodity Channel Index","listIndexes":[1,5,0,0,0],"numValues":[37,0,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[1,0,0,0,0],"numValues":[40,0,0,0,0,0]},{"name":"RSI","listIndexes":[2,3,0,0,0],"numValues":[27,52,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[7,5,0,0,0],"numValues":[21,0,0,0,0,0]}],"closeFilters":[{"name":"Moving Average","listIndexes":[5,0,3,0,0],"numValues":[29,0,0,0,0,0]},{"name":"Envelopes","listIndexes":[2,3,0,0,0],"numValues":[22,0.76,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[2,0,0,0,0],"numValues":[7,34,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[3,3,0,0,0],"numValues":[36,3.31,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_200();
   signalList[i++] = GetEntrySignal_200();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":73,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bulls Power","listIndexes":[4,0,0,0,0],"numValues":[33,16.3,0,0,0,0]}],"closeFilters":[{"name":"Stochastic Signal","listIndexes":[3,0,0,0,0],"numValues":[16,5,4,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[3,5,0,0,0],"numValues":[37,-39,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_201();
   signalList[i++] = GetEntrySignal_201();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bears Power","listIndexes":[1,0,0,0,0],"numValues":[42,0,0,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[5,3,0,0,0],"numValues":[22,48,4,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[1,0,0,0,0],"numValues":[19,24,0,0,0,0]}],"closeFilters":[{"name":"Stochastic","listIndexes":[0,0,0,0,0],"numValues":[6,2,1,20,0,0]},{"name":"RSI","listIndexes":[6,3,0,0,0],"numValues":[5,30,0,0,0,0]},{"name":"RSI","listIndexes":[3,3,0,0,0],"numValues":[3,32,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_202();
   signalList[i++] = GetEntrySignal_202();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[49,1,0,0,0,0]},{"name":"Momentum","listIndexes":[7,3,0,0,0],"numValues":[26,100,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[0,3,0,0,0],"numValues":[13,0,0,0,0,0]},{"name":"DeMarker","listIndexes":[0,0,0,0,0],"numValues":[45,0,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[4,0,0,0,0],"numValues":[12,-69,0,0,0,0]}],"closeFilters":[{"name":"Moving Average","listIndexes":[2,0,3,0,0],"numValues":[24,0,0,0,0,0]},{"name":"MACD","listIndexes":[7,3,0,0,0],"numValues":[4,49,9,0,0,0]}]} */
   signalList[i++] = GetExitSignal_203();
   signalList[i++] = GetEntrySignal_203();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average","listIndexes":[5,0,3,0,0],"numValues":[16,0,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[3,0,0,0,0],"numValues":[11,17,0,0,0,0]},{"name":"Stochastic","listIndexes":[2,0,0,0,0],"numValues":[13,3,5,52,0,0]},{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[14,2,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[7,3,0,0,0],"numValues":[10,0,0,0,0,0]}],"closeFilters":[{"name":"Stochastic","listIndexes":[1,0,0,0,0],"numValues":[10,7,2,20,0,0]},{"name":"Bulls Power","listIndexes":[3,0,0,0,0],"numValues":[18,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_204();
   signalList[i++] = GetEntrySignal_204();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[5,3,0,0,0],"numValues":[45,100,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[6,3,0,0,0],"numValues":[28,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[6,0,0,0,0],"numValues":[44,0.01,0,0,0,0]}],"closeFilters":[{"name":"RSI","listIndexes":[0,3,0,0,0],"numValues":[48,30,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[1,0,0,0,0],"numValues":[28,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_205();
   signalList[i++] = GetEntrySignal_205();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":96,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Accelerator Oscillator","listIndexes":[4,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[2,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[1,0,0,0,0],"numValues":[50,0,0,0,0,0]},{"name":"Bears Power","listIndexes":[1,0,0,0,0],"numValues":[5,0,0,0,0,0]}],"closeFilters":[{"name":"Average True Range","listIndexes":[2,0,0,0,0],"numValues":[35,9.6,0,0,0,0]},{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[8,26,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_206();
   signalList[i++] = GetEntrySignal_206();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[48,1,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[3,0,0,0,0],"numValues":[10,0,0,0,0,0]},{"name":"Stochastic","listIndexes":[4,0,0,0,0],"numValues":[7,3,4,64,0,0]}],"closeFilters":[{"name":"Williams' Percent Range","listIndexes":[0,0,0,0,0],"numValues":[10,-20,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_207();
   signalList[i++] = GetEntrySignal_207();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":67,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[5,3,0,0,0],"numValues":[47,97,0,0,0,0]}],"closeFilters":[{"name":"Standard Deviation","listIndexes":[1,3,0,0,0],"numValues":[48,0,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[7,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_208();
   signalList[i++] = GetEntrySignal_208();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[12,2,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[3,3,0,0,0],"numValues":[47,5.8,0,0,0,0]},{"name":"MACD Signal","listIndexes":[1,3,0,0,0],"numValues":[21,27,12,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[7,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[2,5,0,0,0],"numValues":[41,0,0,0,0,0]}],"closeFilters":[{"name":"Awesome Oscillator","listIndexes":[4,0,0,0,0],"numValues":[-17.3,0,0,0,0,0]},{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[7,1,0,0,0,0]},{"name":"Alligator","listIndexes":[8,3,4,0,0],"numValues":[23,10,10,9,9,5]}]} */
   signalList[i++] = GetExitSignal_209();
   signalList[i++] = GetEntrySignal_209();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":89,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,39,0,0,0,0]}],"closeFilters":[{"name":"Envelopes","listIndexes":[0,3,0,0,0],"numValues":[20,0.75,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_210();
   signalList[i++] = GetEntrySignal_210();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"RSI","listIndexes":[5,3,0,0,0],"numValues":[38,30,0,0,0,0]}],"closeFilters":[{"name":"ADX","listIndexes":[7,0,0,0,0],"numValues":[14,0,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[0,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_211();
   signalList[i++] = GetEntrySignal_211();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bollinger Bands","listIndexes":[4,3,0,0,0],"numValues":[24,1.98,0,0,0,0]},{"name":"DeMarker","listIndexes":[3,0,0,0,0],"numValues":[35,0.34,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[1,5,0,0,0],"numValues":[48,0,0,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[5,3,0,0,0],"numValues":[21,41,11,0,0,0]}],"closeFilters":[{"name":"Accelerator Oscillator","listIndexes":[4,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"RSI","listIndexes":[6,3,0,0,0],"numValues":[12,30,0,0,0,0]},{"name":"RSI","listIndexes":[5,3,0,0,0],"numValues":[25,40,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_212();
   signalList[i++] = GetEntrySignal_212();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":49,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Accelerator Oscillator","listIndexes":[7,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Momentum","listIndexes":[4,3,0,0,0],"numValues":[30,101,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[1,5,0,0,0],"numValues":[17,0,0,0,0,0]}],"closeFilters":[{"name":"DeMarker","listIndexes":[1,0,0,0,0],"numValues":[20,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_213();
   signalList[i++] = GetEntrySignal_213();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average of Oscillator","listIndexes":[4,3,0,0,0],"numValues":[14,43,8,-3.65,0,0]}],"closeFilters":[{"name":"Commodity Channel Index","listIndexes":[2,5,0,0,0],"numValues":[32,0,0,0,0,0]},{"name":"ADX","listIndexes":[3,0,0,0,0],"numValues":[23,39,0,0,0,0]},{"name":"MACD Signal","listIndexes":[0,3,0,0,0],"numValues":[8,43,13,0,0,0]},{"name":"Standard Deviation","listIndexes":[3,3,0,0,0],"numValues":[18,22.8,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_214();
   signalList[i++] = GetEntrySignal_214();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":74,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"MACD","listIndexes":[5,3,0,0,0],"numValues":[22,33,9,0,0,0]},{"name":"Momentum","listIndexes":[1,3,0,0,0],"numValues":[42,100,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[3,3,0,0,0],"numValues":[17,7,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[0,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[7,5,0,0,0],"numValues":[20,0,0,0,0,0]}],"closeFilters":[{"name":"Directional Indicators","listIndexes":[1,0,0,0,0],"numValues":[12,0,0,0,0,0]},{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[7,45,0,0,0,0]},{"name":"Envelopes","listIndexes":[5,3,0,0,0],"numValues":[44,0.52,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[5,3,0,0,0],"numValues":[16,1.84,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_215();
   signalList[i++] = GetEntrySignal_215();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":70,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Averages Crossover","listIndexes":[1,0,0,0,0],"numValues":[22,32,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[1,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"MACD Signal","listIndexes":[3,3,0,0,0],"numValues":[19,31,5,0,0,0]},{"name":"Bulls Power","listIndexes":[0,0,0,0,0],"numValues":[30,0,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[1,3,0,0,0],"numValues":[31,2.29,0,0,0,0]}],"closeFilters":[{"name":"Stochastic Signal","listIndexes":[2,0,0,0,0],"numValues":[3,2,2,0,0,0]},{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[25,0.33,0,0,0,0]},{"name":"Average True Range","listIndexes":[7,0,0,0,0],"numValues":[30,0.01,0,0,0,0]},{"name":"Envelopes","listIndexes":[0,3,0,0,0],"numValues":[42,0.79,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_216();
   signalList[i++] = GetEntrySignal_216();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"MACD Signal","listIndexes":[0,3,0,0,0],"numValues":[23,24,13,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[0,0,0,0,0],"numValues":[24,27,0,0,0,0]}],"closeFilters":[{"name":"Bulls Power","listIndexes":[3,0,0,0,0],"numValues":[40,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[5,0,3,0,0],"numValues":[31,0,0,0,0,0]},{"name":"Momentum","listIndexes":[3,3,0,0,0],"numValues":[3,95,0,0,0,0]},{"name":"DeMarker","listIndexes":[4,0,0,0,0],"numValues":[24,0.24,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_217();
   signalList[i++] = GetEntrySignal_217();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":94,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bollinger Bands","listIndexes":[2,3,0,0,0],"numValues":[44,1.77,0,0,0,0]},{"name":"MACD","listIndexes":[0,3,0,0,0],"numValues":[11,20,9,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[2,3,0,0,0],"numValues":[21,34,8,0,0,0]},{"name":"MACD","listIndexes":[2,3,0,0,0],"numValues":[18,19,9,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[3,0,0,0,0],"numValues":[19,31,0,0,0,0]}],"closeFilters":[{"name":"MACD","listIndexes":[1,3,0,0,0],"numValues":[20,48,9,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[0,3,0,0,0],"numValues":[12,21,4,0,0,0]}]} */
   signalList[i++] = GetExitSignal_218();
   signalList[i++] = GetEntrySignal_218();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"RSI","listIndexes":[5,3,0,0,0],"numValues":[8,80,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[0,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[1,3,0,0,0],"numValues":[23,0,0,0,0,0]}],"closeFilters":[{"name":"Stochastic","listIndexes":[5,0,0,0,0],"numValues":[11,3,11,70,0,0]},{"name":"DeMarker","listIndexes":[5,0,0,0,0],"numValues":[28,0.63,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[4,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_219();
   signalList[i++] = GetEntrySignal_219();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":49,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"RSI","listIndexes":[5,3,0,0,0],"numValues":[33,30,0,0,0,0]}],"closeFilters":[{"name":"Average True Range","listIndexes":[2,0,0,0,0],"numValues":[4,0.7,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_220();
   signalList[i++] = GetEntrySignal_220();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":79,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average","listIndexes":[1,0,3,0,0],"numValues":[33,0,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[0,5,0,0,0],"numValues":[6,0,0,0,0,0]},{"name":"Bulls Power","listIndexes":[7,0,0,0,0],"numValues":[22,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[0,0,0,0,0],"numValues":[17,0.01,0,0,0,0]},{"name":"Stochastic","listIndexes":[7,0,0,0,0],"numValues":[9,8,8,20,0,0]}],"closeFilters":[{"name":"Bollinger Bands","listIndexes":[2,3,0,0,0],"numValues":[37,1.88,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_221();
   signalList[i++] = GetEntrySignal_221();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":94,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"MACD","listIndexes":[4,3,0,0,0],"numValues":[10,39,9,0,0,0]},{"name":"Bears Power","listIndexes":[2,0,0,0,0],"numValues":[29,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[3,0,0,0,0],"numValues":[3,1.4,0,0,0,0]},{"name":"Bears Power","listIndexes":[6,0,0,0,0],"numValues":[3,0,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[2,0,0,0,0],"numValues":[8,0,0,0,0,0]}],"closeFilters":[{"name":"Moving Average of Oscillator","listIndexes":[7,3,0,0,0],"numValues":[20,49,8,0,0,0]},{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[15,1,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_222();
   signalList[i++] = GetEntrySignal_222();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bollinger Bands","listIndexes":[4,3,0,0,0],"numValues":[36,3.59,0,0,0,0]},{"name":"DeMarker","listIndexes":[7,0,0,0,0],"numValues":[11,0,0,0,0,0]}],"closeFilters":[{"name":"Average True Range","listIndexes":[1,0,0,0,0],"numValues":[14,0.01,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[4,0,0,0,0],"numValues":[-4.2,0,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[1,0,0,0,0],"numValues":[6,5,2,0,0,0]}]} */
   signalList[i++] = GetExitSignal_223();
   signalList[i++] = GetEntrySignal_223();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":49,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average of Oscillator","listIndexes":[5,3,0,0,0],"numValues":[17,20,10,0,0,0]},{"name":"RSI","listIndexes":[1,3,0,0,0],"numValues":[45,30,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[1,0,0,0,0],"numValues":[32,-20,0,0,0,0]},{"name":"DeMarker","listIndexes":[2,0,0,0,0],"numValues":[19,0.62,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[7,0,0,0,0],"numValues":[0,0,0,0,0,0]}],"closeFilters":[{"name":"RSI","listIndexes":[7,3,0,0,0],"numValues":[29,30,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_224();
   signalList[i++] = GetEntrySignal_224();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":71,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,39,0,0,0,0]},{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,30,0,0,0,0]}],"closeFilters":[{"name":"Standard Deviation","listIndexes":[4,3,0,0,0],"numValues":[18,3.1,0,0,0,0]},{"name":"Momentum","listIndexes":[3,3,0,0,0],"numValues":[3,97,0,0,0,0]},{"name":"Moving Average","listIndexes":[5,0,3,0,0],"numValues":[35,0,0,0,0,0]},{"name":"DeMarker","listIndexes":[4,0,0,0,0],"numValues":[49,0.92,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_225();
   signalList[i++] = GetEntrySignal_225();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":23,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average","listIndexes":[5,0,3,0,0],"numValues":[5,0,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[6,5,0,0,0],"numValues":[9,0,0,0,0,0]},{"name":"Bulls Power","listIndexes":[0,0,0,0,0],"numValues":[19,0,0,0,0,0]},{"name":"MACD Signal","listIndexes":[3,3,0,0,0],"numValues":[11,37,12,0,0,0]}],"closeFilters":[{"name":"Awesome Oscillator","listIndexes":[3,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_226();
   signalList[i++] = GetEntrySignal_226();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":79,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Williams' Percent Range","listIndexes":[2,0,0,0,0],"numValues":[21,-49,0,0,0,0]},{"name":"MACD Signal","listIndexes":[3,3,0,0,0],"numValues":[15,45,7,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]}],"closeFilters":[{"name":"Stochastic","listIndexes":[1,0,0,0,0],"numValues":[14,4,1,20,0,0]},{"name":"Directional Indicators","listIndexes":[3,0,0,0,0],"numValues":[1,0,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[1,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_227();
   signalList[i++] = GetEntrySignal_227();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":62,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"MACD","listIndexes":[4,3,0,0,0],"numValues":[21,38,9,0,0,0]},{"name":"Momentum","listIndexes":[0,3,0,0,0],"numValues":[22,100,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[0,0,0,0,0],"numValues":[9,8,4,0,0,0]}],"closeFilters":[{"name":"Momentum","listIndexes":[1,3,0,0,0],"numValues":[43,100,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Bulls Power","listIndexes":[2,0,0,0,0],"numValues":[44,0,0,0,0,0]},{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[6,31,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_228();
   signalList[i++] = GetEntrySignal_228();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Directional Indicators","listIndexes":[1,0,0,0,0],"numValues":[19,0,0,0,0,0]},{"name":"ADX","listIndexes":[4,0,0,0,0],"numValues":[9,24,0,0,0,0]}],"closeFilters":[{"name":"ADX","listIndexes":[3,0,0,0,0],"numValues":[13,36,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[5,3,0,0,0],"numValues":[23,3.5,0,0,0,0]},{"name":"MACD Signal","listIndexes":[0,3,0,0,0],"numValues":[18,36,10,0,0,0]}]} */
   signalList[i++] = GetExitSignal_229();
   signalList[i++] = GetEntrySignal_229();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average of Oscillator","listIndexes":[5,3,0,0,0],"numValues":[4,18,9,0,0,0]},{"name":"Stochastic","listIndexes":[2,0,0,0,0],"numValues":[6,3,3,75,0,0]}],"closeFilters":[{"name":"Stochastic","listIndexes":[6,0,0,0,0],"numValues":[2,1,1,20,0,0]},{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[15,0.9,0,0,0,0]},{"name":"MACD Signal","listIndexes":[0,3,0,0,0],"numValues":[5,11,8,0,0,0]}]} */
   signalList[i++] = GetExitSignal_230();
   signalList[i++] = GetEntrySignal_230();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":75,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[34,0.97,0,0,0,0]},{"name":"Bears Power","listIndexes":[2,0,0,0,0],"numValues":[50,0,0,0,0,0]}],"closeFilters":[{"name":"MACD Signal","listIndexes":[1,3,0,0,0],"numValues":[22,40,11,0,0,0]},{"name":"Moving Average","listIndexes":[3,0,3,0,0],"numValues":[17,0,0,0,0,0]},{"name":"MACD","listIndexes":[0,3,0,0,0],"numValues":[25,43,9,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[6,5,0,0,0],"numValues":[21,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_231();
   signalList[i++] = GetEntrySignal_231();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":65,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Momentum","listIndexes":[5,3,0,0,0],"numValues":[44,97,0,0,0,0]}],"closeFilters":[{"name":"Stochastic Signal","listIndexes":[0,0,0,0,0],"numValues":[13,9,1,0,0,0]},{"name":"Directional Indicators","listIndexes":[2,0,0,0,0],"numValues":[49,0,0,0,0,0]},{"name":"RSI","listIndexes":[3,3,0,0,0],"numValues":[19,11,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_232();
   signalList[i++] = GetEntrySignal_232();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[31,5,0,0,0,0]},{"name":"ADX","listIndexes":[4,0,0,0,0],"numValues":[7,39,0,0,0,0]}],"closeFilters":[{"name":"Bears Power","listIndexes":[3,0,0,0,0],"numValues":[35,0,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[3,5,0,0,0],"numValues":[44,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[3,0,0,0,0],"numValues":[20,19.6,0,0,0,0]},{"name":"Average True Range","listIndexes":[7,0,0,0,0],"numValues":[43,0.01,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_233();
   signalList[i++] = GetEntrySignal_233();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"MACD Signal","listIndexes":[1,3,0,0,0],"numValues":[4,40,10,0,0,0]},{"name":"ADX","listIndexes":[3,0,0,0,0],"numValues":[36,30,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[1,3,0,0,0],"numValues":[20,2.82,0,0,0,0]}],"closeFilters":[{"name":"ADX","listIndexes":[7,0,0,0,0],"numValues":[19,0,0,0,0,0]},{"name":"DeMarker","listIndexes":[2,0,0,0,0],"numValues":[40,0.89,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[3,0,0,0,0],"numValues":[27,-60,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_234();
   signalList[i++] = GetEntrySignal_234();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":33,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[37,0.83,0,0,0,0]}],"closeFilters":[{"name":"Average True Range","listIndexes":[6,0,0,0,0],"numValues":[7,0.01,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[0,0,0,0,0],"numValues":[4,2,1,0,0,0]},{"name":"Moving Average","listIndexes":[1,0,3,0,0],"numValues":[32,0,0,0,0,0]},{"name":"Envelopes","listIndexes":[5,3,0,0,0],"numValues":[44,0.65,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_235();
   signalList[i++] = GetEntrySignal_235();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Average","listIndexes":[7,0,3,0,0],"numValues":[23,0,0,0,0,0]},{"name":"MACD Signal","listIndexes":[3,3,0,0,0],"numValues":[16,42,13,0,0,0]},{"name":"Envelopes","listIndexes":[4,3,0,0,0],"numValues":[18,0.06,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[7,0,0,0,0],"numValues":[0,0,0,0,0,0]}],"closeFilters":[{"name":"Awesome Oscillator","listIndexes":[1,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[5,0,0,0,0],"numValues":[31,-58,0,0,0,0]},{"name":"MACD","listIndexes":[6,3,0,0,0],"numValues":[12,15,9,0,0,0]}]} */
   signalList[i++] = GetExitSignal_236();
   signalList[i++] = GetEntrySignal_236();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":21,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Bears Power","listIndexes":[6,0,0,0,0],"numValues":[46,0,0,0,0,0]},{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[50,0.8,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[3,3,0,0,0],"numValues":[9,20.6,0,0,0,0]},{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[49,0.76,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[0,0,0,0,0],"numValues":[0,0,0,0,0,0]}],"closeFilters":[{"name":"Alligator","listIndexes":[2,3,4,0,0],"numValues":[31,14,14,6,6,5]},{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,22,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[3,0,0,0,0],"numValues":[20,43,0,0,0,0]},{"name":"RSI","listIndexes":[3,3,0,0,0],"numValues":[43,33,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_237();
   signalList[i++] = GetEntrySignal_237();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":89,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,39,0,0,0,0]}],"closeFilters":[{"name":"Alligator","listIndexes":[4,3,4,0,0],"numValues":[39,19,19,5,5,4]}]} */
   signalList[i++] = GetExitSignal_238();
   signalList[i++] = GetEntrySignal_238();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Alligator","listIndexes":[10,3,4,0,0],"numValues":[36,20,20,6,6,1]},{"name":"Stochastic","listIndexes":[4,0,0,0,0],"numValues":[4,4,4,48,0,0]}],"closeFilters":[{"name":"Bears Power","listIndexes":[7,0,0,0,0],"numValues":[35,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[7,0,3,0,0],"numValues":[45,0,0,0,0,0]},{"name":"Bulls Power","listIndexes":[5,0,0,0,0],"numValues":[2,-69.2,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_239();
   signalList[i++] = GetEntrySignal_239();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":83,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"RSI","listIndexes":[5,3,0,0,0],"numValues":[43,30,0,0,0,0]}],"closeFilters":[{"name":"Average True Range","listIndexes":[0,0,0,0,0],"numValues":[15,0.01,0,0,0,0]},{"name":"Alligator","listIndexes":[3,3,4,0,0],"numValues":[33,9,9,5,5,2]}]} */
   signalList[i++] = GetExitSignal_240();
   signalList[i++] = GetEntrySignal_240();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":92,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Commodity Channel Index","listIndexes":[5,5,0,0,0],"numValues":[20,0,0,0,0,0]},{"name":"Alligator","listIndexes":[0,3,4,0,0],"numValues":[40,15,15,5,5,2]},{"name":"Bollinger Bands","listIndexes":[1,3,0,0,0],"numValues":[12,1.93,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[3,0,0,0,0],"numValues":[17,20,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[0,3,0,0,0],"numValues":[42,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[3,0,3,0,0],"numValues":[21,0,0,0,0,0]}],"closeFilters":[{"name":"Envelopes","listIndexes":[4,3,0,0,0],"numValues":[17,0.08,0,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[0,3,0,0,0],"numValues":[20,39,8,0,0,0]},{"name":"Alligator","listIndexes":[11,3,4,0,0],"numValues":[24,17,17,9,9,1]}]} */
   signalList[i++] = GetExitSignal_241();
   signalList[i++] = GetEntrySignal_241();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":47,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[39,3,0,0,0,0]},{"name":"Alligator","listIndexes":[8,3,4,0,0],"numValues":[26,12,12,5,5,2]}],"closeFilters":[{"name":"Stochastic Signal","listIndexes":[2,0,0,0,0],"numValues":[4,3,1,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[4,0,0,0,0],"numValues":[8.5,0,0,0,0,0]},{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[8,29,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_242();
   signalList[i++] = GetEntrySignal_242();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":48,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bears Power","listIndexes":[4,0,0,0,0],"numValues":[43,1.71,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[1,5,0,0,0],"numValues":[14,0,0,0,0,0]},{"name":"Bears Power","listIndexes":[3,0,0,0,0],"numValues":[7,-0.15,0,0,0,0]}],"closeFilters":[{"name":"Williams' Percent Range","listIndexes":[3,0,0,0,0],"numValues":[21,-96,0,0,0,0]},{"name":"Alligator","listIndexes":[10,3,4,0,0],"numValues":[33,7,7,5,5,2]},{"name":"Moving Averages Crossover","listIndexes":[0,0,0,0,0],"numValues":[19,20,0,0,0,0]},{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[33,3,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_243();
   signalList[i++] = GetEntrySignal_243();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":67,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[5,3,0,0,0],"numValues":[47,97,0,0,0,0]}],"closeFilters":[{"name":"Stochastic Signal","listIndexes":[1,0,0,0,0],"numValues":[2,1,1,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[7,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_244();
   signalList[i++] = GetEntrySignal_244();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":70,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Moving Average of Oscillator","listIndexes":[5,3,0,0,0],"numValues":[15,41,13,0,0,0]},{"name":"Envelopes","listIndexes":[1,3,0,0,0],"numValues":[3,0.44,0,0,0,0]}],"closeFilters":[{"name":"Moving Average of Oscillator","listIndexes":[5,3,0,0,0],"numValues":[16,24,8,0,0,0]}]} */
   signalList[i++] = GetExitSignal_245();
   signalList[i++] = GetEntrySignal_245();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":43,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bulls Power","listIndexes":[2,0,0,0,0],"numValues":[7,0,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[7,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[1,0,0,0,0],"numValues":[14,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[2,0,3,0,0],"numValues":[28,0,0,0,0,0]}],"closeFilters":[{"name":"Moving Averages Crossover","listIndexes":[3,0,0,0,0],"numValues":[23,49,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_246();
   signalList[i++] = GetEntrySignal_246();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":12,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[4,3,0,0,0],"numValues":[21,102,0,0,0,0]}],"closeFilters":[{"name":"Commodity Channel Index","listIndexes":[5,5,0,0,0],"numValues":[18,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_247();
   signalList[i++] = GetEntrySignal_247();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":37,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Stochastic Signal","listIndexes":[2,0,0,0,0],"numValues":[16,11,10,0,0,0]},{"name":"Average True Range","listIndexes":[4,0,0,0,0],"numValues":[1,17.5,0,0,0,0]},{"name":"Bulls Power","listIndexes":[2,0,0,0,0],"numValues":[3,0,0,0,0,0]}],"closeFilters":[{"name":"Awesome Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"DeMarker","listIndexes":[0,0,0,0,0],"numValues":[33,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[1,0,3,0,0],"numValues":[10,0,0,0,0,0]},{"name":"Momentum","listIndexes":[2,3,0,0,0],"numValues":[37,100,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_248();
   signalList[i++] = GetEntrySignal_248();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Accelerator Oscillator","listIndexes":[4,0,0,0,0],"numValues":[-9.8,0,0,0,0,0]}],"closeFilters":[{"name":"Envelopes","listIndexes":[0,3,0,0,0],"numValues":[32,0.06,0,0,0,0]},{"name":"Bulls Power","listIndexes":[1,0,0,0,0],"numValues":[41,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_249();
   signalList[i++] = GetEntrySignal_249();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Stochastic","listIndexes":[4,0,0,0,0],"numValues":[14,1,4,77,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[1,3,0,0,0],"numValues":[20,22,12,0,0,0]},{"name":"Alligator","listIndexes":[3,3,4,0,0],"numValues":[21,18,18,12,12,3]}],"closeFilters":[{"name":"Awesome Oscillator","listIndexes":[2,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[29,5,0,0,0,0]},{"name":"Envelopes","listIndexes":[2,3,0,0,0],"numValues":[50,0.43,0,0,0,0]},{"name":"Envelopes","listIndexes":[4,3,0,0,0],"numValues":[23,0.87,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_250();
   signalList[i++] = GetEntrySignal_250();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Alligator","listIndexes":[9,3,4,0,0],"numValues":[23,15,15,11,11,1]},{"name":"Directional Indicators","listIndexes":[0,0,0,0,0],"numValues":[9,0,0,0,0,0]}],"closeFilters":[{"name":"Moving Average","listIndexes":[2,0,3,0,0],"numValues":[24,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_251();
   signalList[i++] = GetEntrySignal_251();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Commodity Channel Index","listIndexes":[5,5,0,0,0],"numValues":[14,0,0,0,0,0]},{"name":"MACD","listIndexes":[2,3,0,0,0],"numValues":[25,32,9,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[6,0,0,0,0],"numValues":[0,0,0,0,0,0]}],"closeFilters":[{"name":"Momentum","listIndexes":[2,3,0,0,0],"numValues":[5,101,0,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[3,3,0,0,0],"numValues":[5,23,12,0,0,0]}]} */
   signalList[i++] = GetExitSignal_252();
   signalList[i++] = GetEntrySignal_252();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":75,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[11,2,0,0,0,0]},{"name":"Moving Average","listIndexes":[5,0,3,0,0],"numValues":[21,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[7,0,0,0,0],"numValues":[18,0.01,0,0,0,0]}],"closeFilters":[{"name":"MACD","listIndexes":[1,3,0,0,0],"numValues":[20,49,9,0,0,0]}]} */
   signalList[i++] = GetExitSignal_253();
   signalList[i++] = GetEntrySignal_253();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"RSI","listIndexes":[4,3,0,0,0],"numValues":[43,30,0,0,0,0]}],"closeFilters":[{"name":"Directional Indicators","listIndexes":[2,0,0,0,0],"numValues":[24,0,0,0,0,0]},{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[15,3,0,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[2,3,0,0,0],"numValues":[18,25,9,4.25,0,0]},{"name":"Commodity Channel Index","listIndexes":[6,5,0,0,0],"numValues":[15,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_254();
   signalList[i++] = GetEntrySignal_254();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":36,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Alligator","listIndexes":[3,3,4,0,0],"numValues":[37,12,12,10,10,4]},{"name":"Alligator","listIndexes":[5,3,4,0,0],"numValues":[37,17,17,8,8,5]},{"name":"Accelerator Oscillator","listIndexes":[1,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[1,0,0,0,0],"numValues":[12,6,2,0,0,0]},{"name":"Momentum","listIndexes":[7,3,0,0,0],"numValues":[12,100,0,0,0,0]},{"name":"DeMarker","listIndexes":[6,0,0,0,0],"numValues":[36,0,0,0,0,0]}],"closeFilters":[{"name":"RSI","listIndexes":[5,3,0,0,0],"numValues":[13,84,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_255();
   signalList[i++] = GetEntrySignal_255();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Commodity Channel Index","listIndexes":[4,5,0,0,0],"numValues":[49,0,0,0,0,0]},{"name":"Alligator","listIndexes":[3,3,4,0,0],"numValues":[27,18,18,8,8,1]},{"name":"Directional Indicators","listIndexes":[2,0,0,0,0],"numValues":[44,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[4,0,3,0,0],"numValues":[5,0,0,0,0,0]},{"name":"Alligator","listIndexes":[1,3,4,0,0],"numValues":[40,23,23,12,12,5]}],"closeFilters":[{"name":"Average True Range","listIndexes":[1,0,0,0,0],"numValues":[45,0.01,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_256();
   signalList[i++] = GetEntrySignal_256();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":67,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Stochastic","listIndexes":[6,0,0,0,0],"numValues":[11,8,1,58,0,0]},{"name":"ADX","listIndexes":[2,0,0,0,0],"numValues":[7,18,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[0,3,0,0,0],"numValues":[44,3.54,0,0,0,0]}],"closeFilters":[{"name":"Bulls Power","listIndexes":[4,0,0,0,0],"numValues":[25,0,0,0,0,0]},{"name":"Bulls Power","listIndexes":[7,0,0,0,0],"numValues":[5,0,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[1,5,0,0,0],"numValues":[8,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_257();
   signalList[i++] = GetEntrySignal_257();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Williams' Percent Range","listIndexes":[0,0,0,0,0],"numValues":[47,-20,0,0,0,0]},{"name":"Envelopes","listIndexes":[3,3,0,0,0],"numValues":[46,0.23,0,0,0,0]},{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[40,3,0,0,0,0]},{"name":"Moving Average","listIndexes":[6,0,3,0,0],"numValues":[18,0,0,0,0,0]},{"name":"Stochastic","listIndexes":[2,0,0,0,0],"numValues":[3,3,2,55,0,0]},{"name":"Bulls Power","listIndexes":[0,0,0,0,0],"numValues":[17,0,0,0,0,0]}],"closeFilters":[{"name":"Moving Averages Crossover","listIndexes":[3,0,0,0,0],"numValues":[23,30,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[2,0,0,0,0],"numValues":[15,41,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[2,5,0,0,0],"numValues":[17,77,0,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[7,3,0,0,0],"numValues":[11,19,6,0,0,0]}]} */
   signalList[i++] = GetExitSignal_258();
   signalList[i++] = GetEntrySignal_258();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Directional Indicators","listIndexes":[2,0,0,0,0],"numValues":[29,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[4,0,0,0,0],"numValues":[35,2.4,0,0,0,0]}],"closeFilters":[{"name":"Moving Average of Oscillator","listIndexes":[0,3,0,0,0],"numValues":[21,38,7,0,0,0]},{"name":"Bulls Power","listIndexes":[7,0,0,0,0],"numValues":[26,0,0,0,0,0]},{"name":"RSI","listIndexes":[7,3,0,0,0],"numValues":[28,30,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[1,5,0,0,0],"numValues":[45,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_259();
   signalList[i++] = GetEntrySignal_259();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":79,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"ADX","listIndexes":[4,0,0,0,0],"numValues":[27,41,0,0,0,0]},{"name":"Bulls Power","listIndexes":[6,0,0,0,0],"numValues":[46,0,0,0,0,0]}],"closeFilters":[{"name":"MACD","listIndexes":[4,3,0,0,0],"numValues":[7,50,9,0,0,0]}]} */
   signalList[i++] = GetExitSignal_260();
   signalList[i++] = GetEntrySignal_260();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":88,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Average True Range","listIndexes":[4,0,0,0,0],"numValues":[4,6.9,0,0,0,0]},{"name":"DeMarker","listIndexes":[1,0,0,0,0],"numValues":[31,0,0,0,0,0]},{"name":"Alligator","listIndexes":[2,3,4,0,0],"numValues":[36,16,16,13,13,4]}],"closeFilters":[{"name":"ADX","listIndexes":[4,0,0,0,0],"numValues":[31,25,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_261();
   signalList[i++] = GetEntrySignal_261();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":31,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bulls Power","listIndexes":[4,0,0,0,0],"numValues":[22,0,0,0,0,0]},{"name":"Average True Range","listIndexes":[0,0,0,0,0],"numValues":[2,0.01,0,0,0,0]},{"name":"Moving Average","listIndexes":[7,0,3,0,0],"numValues":[11,0,0,0,0,0]}],"closeFilters":[{"name":"Alligator","listIndexes":[6,3,4,0,0],"numValues":[20,8,8,5,5,2]},{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[28,1,0,0,0,0]},{"name":"Moving Average","listIndexes":[6,0,3,0,0],"numValues":[6,0,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[5,3,0,0,0],"numValues":[17,31.2,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_262();
   signalList[i++] = GetEntrySignal_262();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":79,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"ADX","listIndexes":[4,0,0,0,0],"numValues":[27,41,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[6,5,0,0,0],"numValues":[18,0,0,0,0,0]}],"closeFilters":[{"name":"MACD","listIndexes":[4,3,0,0,0],"numValues":[7,50,9,0,0,0]}]} */
   signalList[i++] = GetExitSignal_263();
   signalList[i++] = GetEntrySignal_263();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":72,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Average True Range","listIndexes":[0,0,0,0,0],"numValues":[7,0.01,0,0,0,0]},{"name":"Envelopes","listIndexes":[5,3,0,0,0],"numValues":[47,0.38,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[3,0,0,0,0],"numValues":[4,2,2,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[0,3,0,0,0],"numValues":[25,43,11,0,0,0]}],"closeFilters":[{"name":"DeMarker","listIndexes":[4,0,0,0,0],"numValues":[33,0.78,0,0,0,0]},{"name":"Momentum","listIndexes":[2,3,0,0,0],"numValues":[31,103,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_264();
   signalList[i++] = GetEntrySignal_264();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":90,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Accelerator Oscillator","listIndexes":[5,0,0,0,0],"numValues":[8.2,0,0,0,0,0]},{"name":"Momentum","listIndexes":[1,3,0,0,0],"numValues":[48,100,0,0,0,0]}],"closeFilters":[{"name":"Stochastic","listIndexes":[0,0,0,0,0],"numValues":[2,2,1,20,0,0]},{"name":"Stochastic Signal","listIndexes":[3,0,0,0,0],"numValues":[11,5,8,0,0,0]}]} */
   signalList[i++] = GetExitSignal_265();
   signalList[i++] = GetEntrySignal_265();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":32,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,40,0,0,0,0]}],"closeFilters":[{"name":"Moving Average","listIndexes":[1,0,3,0,0],"numValues":[14,0,0,0,0,0]},{"name":"Bulls Power","listIndexes":[4,0,0,0,0],"numValues":[8,0,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[2,3,0,0,0],"numValues":[31,3.1,0,0,0,0]},{"name":"Moving Average","listIndexes":[6,0,3,0,0],"numValues":[45,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_266();
   signalList[i++] = GetEntrySignal_266();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[8,49,0,0,0,0]}],"closeFilters":[{"name":"Moving Average","listIndexes":[5,0,3,0,0],"numValues":[9,0,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[3,3,0,0,0],"numValues":[26,1.61,0,0,0,0]},{"name":"Moving Average","listIndexes":[1,0,3,0,0],"numValues":[50,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_267();
   signalList[i++] = GetEntrySignal_267();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Directional Indicators","listIndexes":[1,0,0,0,0],"numValues":[23,0,0,0,0,0]},{"name":"Candle Color","listIndexes":[1,0,0,0,0],"numValues":[25,4,0,0,0,0]},{"name":"Stochastic","listIndexes":[1,0,0,0,0],"numValues":[4,1,3,20,0,0]}],"closeFilters":[{"name":"Commodity Channel Index","listIndexes":[0,5,0,0,0],"numValues":[34,0,0,0,0,0]},{"name":"Stochastic","listIndexes":[6,0,0,0,0],"numValues":[4,1,4,20,0,0]},{"name":"Average True Range","listIndexes":[0,0,0,0,0],"numValues":[7,0.01,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_268();
   signalList[i++] = GetEntrySignal_268();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":23,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"ADX","listIndexes":[4,0,0,0,0],"numValues":[41,33,0,0,0,0]},{"name":"Moving Average","listIndexes":[0,0,3,0,0],"numValues":[10,0,0,0,0,0]}],"closeFilters":[{"name":"Moving Average","listIndexes":[6,0,3,0,0],"numValues":[48,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_269();
   signalList[i++] = GetEntrySignal_269();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":66,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Stochastic Signal","listIndexes":[2,0,0,0,0],"numValues":[17,11,10,0,0,0]},{"name":"Envelopes","listIndexes":[0,3,0,0,0],"numValues":[23,0.68,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[0,0,0,0,0],"numValues":[10,7,4,0,0,0]}],"closeFilters":[{"name":"Stochastic","listIndexes":[1,0,0,0,0],"numValues":[5,2,4,20,0,0]}]} */
   signalList[i++] = GetExitSignal_270();
   signalList[i++] = GetEntrySignal_270();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":32,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[6,3,0,0,0],"numValues":[15,100,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[2,0,0,0,0],"numValues":[16,10,5,0,0,0]},{"name":"Alligator","listIndexes":[10,3,4,0,0],"numValues":[23,21,21,6,6,4]},{"name":"RSI","listIndexes":[6,3,0,0,0],"numValues":[31,30,0,0,0,0]}],"closeFilters":[{"name":"Bulls Power","listIndexes":[5,0,0,0,0],"numValues":[39,0,0,0,0,0]},{"name":"Momentum","listIndexes":[3,3,0,0,0],"numValues":[14,95,0,0,0,0]},{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[8,21,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_271();
   signalList[i++] = GetEntrySignal_271();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":79,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"MACD","listIndexes":[2,3,0,0,0],"numValues":[16,36,9,0,0,0]},{"name":"Average True Range","listIndexes":[7,0,0,0,0],"numValues":[15,0.01,0,0,0,0]},{"name":"Moving Average","listIndexes":[4,0,3,0,0],"numValues":[18,0,0,0,0,0]},{"name":"MACD Signal","listIndexes":[0,3,0,0,0],"numValues":[13,17,3,0,0,0]}],"closeFilters":[{"name":"Envelopes","listIndexes":[4,3,0,0,0],"numValues":[41,0.31,0,0,0,0]},{"name":"Momentum","listIndexes":[0,3,0,0,0],"numValues":[45,100,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_272();
   signalList[i++] = GetEntrySignal_272();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":31,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[9,50,0,0,0,0]}],"closeFilters":[{"name":"Williams' Percent Range","listIndexes":[4,0,0,0,0],"numValues":[20,-67,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_273();
   signalList[i++] = GetEntrySignal_273();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"MACD Signal","listIndexes":[0,3,0,0,0],"numValues":[21,37,8,0,0,0]},{"name":"MACD","listIndexes":[4,3,0,0,0],"numValues":[20,27,9,0,0,0]},{"name":"Moving Average","listIndexes":[2,0,3,0,0],"numValues":[48,0,0,0,0,0]}],"closeFilters":[{"name":"Commodity Channel Index","listIndexes":[0,5,0,0,0],"numValues":[6,0,0,0,0,0]},{"name":"Stochastic Signal","listIndexes":[3,0,0,0,0],"numValues":[17,3,7,0,0,0]},{"name":"Directional Indicators","listIndexes":[0,0,0,0,0],"numValues":[32,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_274();
   signalList[i++] = GetEntrySignal_274();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":88,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Moving Averages Crossover","listIndexes":[0,0,0,0,0],"numValues":[24,45,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[6,0,0,0,0],"numValues":[49,-20,0,0,0,0]}],"closeFilters":[{"name":"ADX","listIndexes":[4,0,0,0,0],"numValues":[31,25,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_275();
   signalList[i++] = GetEntrySignal_275();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"RSI","listIndexes":[5,3,0,0,0],"numValues":[17,30,0,0,0,0]},{"name":"Alligator","listIndexes":[5,3,4,0,0],"numValues":[25,24,24,15,15,5]},{"name":"Commodity Channel Index","listIndexes":[7,5,0,0,0],"numValues":[22,0,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[1,0,0,0,0],"numValues":[0,0,0,0,0,0]}],"closeFilters":[{"name":"DeMarker","listIndexes":[6,0,0,0,0],"numValues":[38,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_276();
   signalList[i++] = GetEntrySignal_276();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":82,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[10,20,0,0,0,0]}],"closeFilters":[{"name":"Moving Averages Crossover","listIndexes":[1,0,0,0,0],"numValues":[13,19,0,0,0,0]},{"name":"MACD Signal","listIndexes":[3,3,0,0,0],"numValues":[23,41,12,0,0,0]}]} */
   signalList[i++] = GetExitSignal_277();
   signalList[i++] = GetEntrySignal_277();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":79,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Awesome Oscillator","listIndexes":[7,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Bulls Power","listIndexes":[5,0,0,0,0],"numValues":[46,0,0,0,0,0]},{"name":"Momentum","listIndexes":[6,3,0,0,0],"numValues":[36,100,0,0,0,0]},{"name":"Alligator","listIndexes":[5,3,4,0,0],"numValues":[45,20,20,6,6,4]}],"closeFilters":[{"name":"Average True Range","listIndexes":[5,0,0,0,0],"numValues":[7,11.8,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_278();
   signalList[i++] = GetEntrySignal_278();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":66,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Stochastic","listIndexes":[4,0,0,0,0],"numValues":[7,7,7,33,0,0]},{"name":"Alligator","listIndexes":[7,3,4,0,0],"numValues":[27,12,12,10,10,4]}],"closeFilters":[{"name":"Bulls Power","listIndexes":[4,0,0,0,0],"numValues":[26,0,0,0,0,0]},{"name":"Bears Power","listIndexes":[2,0,0,0,0],"numValues":[17,3.92,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_279();
   signalList[i++] = GetEntrySignal_279();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":47,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[39,3,0,0,0,0]},{"name":"Alligator","listIndexes":[8,3,4,0,0],"numValues":[26,12,12,5,5,2]},{"name":"DeMarker","listIndexes":[2,0,0,0,0],"numValues":[6,0.82,0,0,0,0]}],"closeFilters":[{"name":"Stochastic Signal","listIndexes":[2,0,0,0,0],"numValues":[4,3,1,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[5,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[4,0,0,0,0],"numValues":[8.5,0,0,0,0,0]},{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[8,29,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_280();
   signalList[i++] = GetEntrySignal_280();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":49,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Accelerator Oscillator","listIndexes":[7,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Momentum","listIndexes":[4,3,0,0,0],"numValues":[30,101,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[1,5,0,0,0],"numValues":[17,0,0,0,0,0]}],"closeFilters":[{"name":"DeMarker","listIndexes":[1,0,0,0,0],"numValues":[20,0,0,0,0,0]},{"name":"RSI","listIndexes":[1,3,0,0,0],"numValues":[30,30,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_281();
   signalList[i++] = GetEntrySignal_281();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":58,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bollinger Bands","listIndexes":[3,3,0,0,0],"numValues":[47,3.65,0,0,0,0]}],"closeFilters":[{"name":"MACD Signal","listIndexes":[2,3,0,0,0],"numValues":[20,38,8,0,0,0]},{"name":"Alligator","listIndexes":[8,3,4,0,0],"numValues":[37,18,18,4,4,3]}]} */
   signalList[i++] = GetExitSignal_282();
   signalList[i++] = GetEntrySignal_282();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":39,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[0,3,0,0,0],"numValues":[16,100,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[0,0,0,0,0],"numValues":[10,41,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[2,0,0,0,0],"numValues":[12,-17,0,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[2,0,0,0,0],"numValues":[25,41,0,0,0,0]}],"closeFilters":[{"name":"Stochastic Signal","listIndexes":[1,0,0,0,0],"numValues":[9,8,6,0,0,0]}]} */
   signalList[i++] = GetExitSignal_283();
   signalList[i++] = GetEntrySignal_283();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":62,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"MACD","listIndexes":[4,3,0,0,0],"numValues":[21,38,9,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[1,0,0,0,0],"numValues":[21,-20,0,0,0,0]},{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[28,2,0,0,0,0]}],"closeFilters":[{"name":"Standard Deviation","listIndexes":[1,3,0,0,0],"numValues":[26,0,0,0,0,0]},{"name":"Stochastic","listIndexes":[0,0,0,0,0],"numValues":[5,4,2,20,0,0]},{"name":"Moving Average","listIndexes":[5,0,3,0,0],"numValues":[16,0,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[3,0,0,0,0],"numValues":[-31.2,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_284();
   signalList[i++] = GetEntrySignal_284();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Momentum","listIndexes":[0,3,0,0,0],"numValues":[1,100,0,0,0,0]},{"name":"Momentum","listIndexes":[1,3,0,0,0],"numValues":[11,100,0,0,0,0]},{"name":"Alligator","listIndexes":[4,3,4,0,0],"numValues":[48,27,27,12,12,3]},{"name":"MACD Signal","listIndexes":[0,3,0,0,0],"numValues":[21,25,5,0,0,0]},{"name":"Moving Average","listIndexes":[3,0,3,0,0],"numValues":[34,0,0,0,0,0]}],"closeFilters":[{"name":"Directional Indicators","listIndexes":[1,0,0,0,0],"numValues":[18,0,0,0,0,0]},{"name":"Bears Power","listIndexes":[3,0,0,0,0],"numValues":[36,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_285();
   signalList[i++] = GetEntrySignal_285();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Alligator","listIndexes":[8,3,4,0,0],"numValues":[27,13,13,9,9,1]},{"name":"Bears Power","listIndexes":[3,0,0,0,0],"numValues":[3,0,0,0,0,0]},{"name":"Moving Average","listIndexes":[0,0,3,0,0],"numValues":[45,0,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[1,0,0,0,0],"numValues":[33,-20,0,0,0,0]}],"closeFilters":[{"name":"DeMarker","listIndexes":[3,0,0,0,0],"numValues":[9,0.05,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[7,5,0,0,0],"numValues":[34,0,0,0,0,0]},{"name":"Standard Deviation","listIndexes":[2,3,0,0,0],"numValues":[9,8.7,0,0,0,0]},{"name":"Momentum","listIndexes":[3,3,0,0,0],"numValues":[50,98,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_286();
   signalList[i++] = GetEntrySignal_286();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Alligator","listIndexes":[6,3,4,0,0],"numValues":[28,23,23,9,9,5]},{"name":"Average True Range","listIndexes":[1,0,0,0,0],"numValues":[22,0.01,0,0,0,0]},{"name":"ADX","listIndexes":[0,0,0,0,0],"numValues":[46,0,0,0,0,0]}],"closeFilters":[{"name":"Accelerator Oscillator","listIndexes":[3,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_287();
   signalList[i++] = GetEntrySignal_287();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":41,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Directional Indicators","listIndexes":[0,0,0,0,0],"numValues":[18,0,0,0,0,0]},{"name":"Williams' Percent Range","listIndexes":[1,0,0,0,0],"numValues":[8,-20,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[0,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Commodity Channel Index","listIndexes":[3,5,0,0,0],"numValues":[49,-4,0,0,0,0]},{"name":"Bears Power","listIndexes":[3,0,0,0,0],"numValues":[49,-7.01,0,0,0,0]}],"closeFilters":[{"name":"Average True Range","listIndexes":[2,0,0,0,0],"numValues":[5,17.4,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_288();
   signalList[i++] = GetEntrySignal_288();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":42,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Stochastic","listIndexes":[3,0,0,0,0],"numValues":[3,2,2,20,0,0]},{"name":"Williams' Percent Range","listIndexes":[4,0,0,0,0],"numValues":[31,-98,0,0,0,0]},{"name":"Stochastic","listIndexes":[4,0,0,0,0],"numValues":[8,4,2,2,0,0]}],"closeFilters":[{"name":"Pin Bar","listIndexes":[0,0,0,0,0],"numValues":[10,34,0,0,0,0]},{"name":"ADX","listIndexes":[7,0,0,0,0],"numValues":[10,0,0,0,0,0]},{"name":"Momentum","listIndexes":[5,3,0,0,0],"numValues":[21,95,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[2,0,0,0,0],"numValues":[0,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_289();
   signalList[i++] = GetEntrySignal_289();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":83,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Accelerator Oscillator","listIndexes":[4,0,0,0,0],"numValues":[2.1,0,0,0,0,0]},{"name":"Bollinger Bands","listIndexes":[3,3,0,0,0],"numValues":[50,2.13,0,0,0,0]}],"closeFilters":[{"name":"Average True Range","listIndexes":[2,0,0,0,0],"numValues":[40,9,0,0,0,0]},{"name":"Awesome Oscillator","listIndexes":[1,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"MACD Signal","listIndexes":[3,3,0,0,0],"numValues":[9,29,13,0,0,0]}]} */
   signalList[i++] = GetExitSignal_290();
   signalList[i++] = GetEntrySignal_290();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":74,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"MACD","listIndexes":[4,3,0,0,0],"numValues":[15,50,9,0,0,0]},{"name":"Momentum","listIndexes":[0,3,0,0,0],"numValues":[30,100,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[0,0,0,0,0],"numValues":[21,0,0,0,0,0]}],"closeFilters":[{"name":"Williams' Percent Range","listIndexes":[1,0,0,0,0],"numValues":[40,-20,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_291();
   signalList[i++] = GetEntrySignal_291();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Williams' Percent Range","listIndexes":[4,0,0,0,0],"numValues":[1,-20,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[2,0,0,0,0],"numValues":[23,0,0,0,0,0]},{"name":"Alligator","listIndexes":[11,3,4,0,0],"numValues":[21,20,20,9,9,3]},{"name":"Stochastic","listIndexes":[0,0,0,0,0],"numValues":[5,4,1,20,0,0]}],"closeFilters":[{"name":"Commodity Channel Index","listIndexes":[4,5,0,0,0],"numValues":[32,0,0,0,0,0]},{"name":"MACD Signal","listIndexes":[1,3,0,0,0],"numValues":[15,27,10,0,0,0]}]} */
   signalList[i++] = GetExitSignal_292();
   signalList[i++] = GetEntrySignal_292();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":69,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":true},"openFilters":[{"name":"Stochastic","listIndexes":[0,0,0,0,0],"numValues":[2,1,1,20,0,0]},{"name":"Envelopes","listIndexes":[4,3,0,0,0],"numValues":[16,0.88,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[1,0,0,0,0],"numValues":[0,0,0,0,0,0]}],"closeFilters":[{"name":"Moving Average","listIndexes":[0,0,3,0,0],"numValues":[14,0,0,0,0,0]},{"name":"Momentum","listIndexes":[5,3,0,0,0],"numValues":[36,96,0,0,0,0]},{"name":"Envelopes","listIndexes":[1,3,0,0,0],"numValues":[50,0.33,0,0,0,0]},{"name":"Moving Average of Oscillator","listIndexes":[3,3,0,0,0],"numValues":[24,50,8,0,0,0]}]} */
   signalList[i++] = GetExitSignal_293();
   signalList[i++] = GetEntrySignal_293();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":100,"takeProfit":100,"useStopLoss":false,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Bollinger Bands","listIndexes":[0,3,0,0,0],"numValues":[8,1.9,0,0,0,0]},{"name":"Accelerator Oscillator","listIndexes":[4,0,0,0,0],"numValues":[0,0,0,0,0,0]},{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[30,4,0,0,0,0]}],"closeFilters":[{"name":"ADX","listIndexes":[1,0,0,0,0],"numValues":[18,0,0,0,0,0]},{"name":"Momentum","listIndexes":[2,3,0,0,0],"numValues":[24,101,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_294();
   signalList[i++] = GetEntrySignal_294();

   /*STRATEGY CODE {"properties":{"entryLots":0.01,"tradeDirectionMode":0,"oppositeEntrySignal":0,"stopLoss":43,"takeProfit":100,"useStopLoss":true,"useTakeProfit":false,"isTrailingStop":false},"openFilters":[{"name":"Stochastic","listIndexes":[4,0,0,0,0],"numValues":[9,3,8,20,0,0]},{"name":"Bollinger Bands","listIndexes":[0,3,0,0,0],"numValues":[12,1.54,0,0,0,0]}],"closeFilters":[{"name":"MACD","listIndexes":[4,3,0,0,0],"numValues":[23,26,9,0,0,0]},{"name":"Moving Averages Crossover","listIndexes":[1,0,0,0,0],"numValues":[6,41,0,0,0,0]},{"name":"Candle Color","listIndexes":[0,0,0,0,0],"numValues":[44,5,0,0,0,0]},{"name":"Directional Indicators","listIndexes":[3,0,0,0,0],"numValues":[48,0,0,0,0,0]}]} */
   signalList[i++] = GetExitSignal_295();
   signalList[i++] = GetEntrySignal_295();

   if(i != 2 * strategiesCount)
      ArrayResize(signalList, i);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_000()
  {
   // Bears Power (24), Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[0][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   // Moving Average (Simple, Close, 46, 0)
   double ind1buffer[]; CopyBuffer(indHandlers[0][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   // MACD Signal (Close, 25, 50, 13)
   double ind2buffer0[]; CopyBuffer(indHandlers[0][2][0], 0, 1, 3, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[0][2][0], 1, 1, 3, ind2buffer1);
   double ind2val1  = ind2buffer0[2] - ind2buffer1[2];
   bool   ind2long  = ind2val1 < 0 - sigma;
   bool   ind2short = ind2val1 > 0 + sigma;

   return CreateEntrySignal(0, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_000()
  {
   // MACD Signal (Close, 13, 49, 8)
   double ind3buffer0[]; CopyBuffer(indHandlers[0][3][0], 0, 1, 3, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[0][3][0], 1, 1, 3, ind3buffer1);
   double ind3val1  = ind3buffer0[2] - ind3buffer1[2];
   double ind3val2  = ind3buffer0[1] - ind3buffer1[1];
   bool   ind3long  = ind3val1 < 0 - sigma && ind3val2 > 0 + sigma;
   bool   ind3short = ind3val1 > 0 + sigma && ind3val2 < 0 - sigma;
   // Candle Color (18, 1)
   bool ind4long  = false;
   bool ind4short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 18;

      for (int b = 1 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind4long  = consecutiveBullish >= 1;
      ind4short = consecutiveBearish >= 1;
   }
   // Stochastic Signal (5, 4, 3)
   double ind5buffer0[]; CopyBuffer(indHandlers[0][5][0], MAIN_LINE,   1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[0][5][0], SIGNAL_LINE, 1, 2, ind5buffer1);
   double ind5val1  = ind5buffer0[1];
   double ind5val2  = ind5buffer1[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;

   return CreateExitSignal(0, ind3long || ind4long || ind5long, ind3short || ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_001()
  {
   // Alligator (Smoothed, Median, 36, 20, 20, 6, 6, 1)
   double ind0buffer0[]; CopyBuffer(indHandlers[1][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[1][0][0], 1, 1, 2, ind0buffer1);
   double ind0buffer2[]; CopyBuffer(indHandlers[1][0][0], 2, 1, 2, ind0buffer2);
   double ind0val1  = ind0buffer1[1];
   double ind0val2  = ind0buffer0[1];
   double ind0val3  = ind0buffer1[0];
   double ind0val4  = ind0buffer0[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   // Stochastic (4, 4, 4), Level: 48.0
   double ind1buffer[]; CopyBuffer(indHandlers[1][1][0], MAIN_LINE, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > 48.0 + sigma && ind1val2 < 48.0 - sigma;
   bool   ind1short = ind1val1 < 100 - 48.0 - sigma && ind1val2 > 100 - 48.0 + sigma;

   return CreateEntrySignal(1, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_001()
  {
   // Moving Average (Simple, Close, 45, 0)
   double ind2buffer[]; CopyBuffer(indHandlers[1][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   // Bulls Power (2), Level: -69.2000
   double ind3buffer[]; CopyBuffer(indHandlers[1][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < -69.2000 - sigma && ind3val2 > -69.2000 + sigma;
   bool   ind3short = ind3val1 > 69.2000 + sigma && ind3val2 < 69.2000 - sigma;

   return CreateExitSignal(1, ind2long || ind3long, ind2short || ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_002()
  {
   // Moving Average of Oscillator (Close, 10, 35, 12), Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[2][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   // Candle Color (24, 3)
   bool ind1long  = false;
   bool ind1short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 24;

      for (int b = 3 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind1long  = consecutiveBullish >= 3;
      ind1short = consecutiveBearish >= 3;
   }
   // MACD (Close, 24, 36, 9)
   double ind2buffer[]; CopyBuffer(indHandlers[2][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;

   return CreateEntrySignal(2, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_002()
  {
   // ADX (27)
   double ind3buffer[]; CopyBuffer(indHandlers[2][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   bool   ind3short = ind3long;

   return CreateExitSignal(2, ind3long, ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_003()
  {
   // Moving Average of Oscillator (Close, 10, 35, 12), Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[3][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   // Candle Color (24, 3)
   bool ind1long  = false;
   bool ind1short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 24;

      for (int b = 3 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind1long  = consecutiveBullish >= 3;
      ind1short = consecutiveBearish >= 3;
   }
   // MACD (Close, 24, 36, 9)
   double ind2buffer[]; CopyBuffer(indHandlers[3][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;

   return CreateEntrySignal(3, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_003()
  {
   // Stochastic Signal (5, 4, 3)
   double ind3buffer0[]; CopyBuffer(indHandlers[3][3][0], MAIN_LINE,   1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[3][3][0], SIGNAL_LINE, 1, 2, ind3buffer1);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer1[1];
   double ind3val3  = ind3buffer0[0];
   double ind3val4  = ind3buffer1[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val3 < ind3val4 - sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma && ind3val3 > ind3val4 + sigma;

   return CreateExitSignal(3, ind3long, ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_004()
  {
   // MACD Signal (Close, 18, 31, 6)
   double ind0buffer0[]; CopyBuffer(indHandlers[4][0][0], 0, 1, 3, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[4][0][0], 1, 1, 3, ind0buffer1);
   double ind0val1  = ind0buffer0[2] - ind0buffer1[2];
   double ind0val2  = ind0buffer0[1] - ind0buffer1[1];
   bool   ind0long  = ind0val1 > 0 + sigma && ind0val2 < 0 - sigma;
   bool   ind0short = ind0val1 < 0 - sigma && ind0val2 > 0 + sigma;
   // Moving Average (Simple, Close, 4, 0)
   double ind1buffer[]; CopyBuffer(indHandlers[4][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = Open(0) < ind1val1 - sigma && Open(1) > ind1val2 + sigma;
   bool   ind1short = Open(0) > ind1val1 + sigma && Open(1) < ind1val2 - sigma;

   return CreateEntrySignal(4, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_004()
  {
   // DeMarker (11)
   double ind2buffer[]; CopyBuffer(indHandlers[4][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   // Awesome Oscillator
   double ind3buffer[]; CopyBuffer(indHandlers[4][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateExitSignal(4, ind2long || ind3long, ind2short || ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_005()
  {
   // Moving Averages Crossover (Simple, Simple, 16, 50)
   double ind0buffer0[]; CopyBuffer(indHandlers[5][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[5][0][1], 0, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer0[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   // Commodity Channel Index (Typical, 12)
   double ind1buffer[]; CopyBuffer(indHandlers[5][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Moving Average (Simple, Close, 1, 0)
   double ind2buffer[]; CopyBuffer(indHandlers[5][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = Open(0) > ind2val1 + sigma && Open(1) < ind2val2 - sigma;
   bool   ind2short = Open(0) < ind2val1 - sigma && Open(1) > ind2val2 + sigma;

   return CreateEntrySignal(5, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_005()
  {
   // Bears Power (15), Level: -33.9000
   double ind3buffer[]; CopyBuffer(indHandlers[5][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 < -33.9000 - sigma;
   bool   ind3short = ind3val1 > 33.9000 + sigma;
   // Stochastic Signal (12, 7, 9)
   double ind4buffer0[]; CopyBuffer(indHandlers[5][4][0], MAIN_LINE,   1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[5][4][0], SIGNAL_LINE, 1, 2, ind4buffer1);
   double ind4val1  = ind4buffer0[1];
   double ind4val2  = ind4buffer1[1];
   double ind4val3  = ind4buffer0[0];
   double ind4val4  = ind4buffer1[0];
   bool   ind4long  = ind4val1 > ind4val2 + sigma && ind4val3 < ind4val4 - sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma && ind4val3 > ind4val4 + sigma;

   return CreateExitSignal(5, ind3long || ind4long, ind3short || ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_006()
  {
   // Alligator (Smoothed, Median, 33, 16, 16, 9, 9, 4)
   double ind0buffer0[]; CopyBuffer(indHandlers[6][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[6][0][0], 1, 1, 2, ind0buffer1);
   double ind0buffer2[]; CopyBuffer(indHandlers[6][0][0], 2, 1, 2, ind0buffer2);
   double ind0val1  = ind0buffer2[1];
   double ind0val2  = ind0buffer0[1];
   double ind0val3  = ind0buffer2[0];
   double ind0val4  = ind0buffer0[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   // RSI (Close, 4), Level: 75
   double ind1buffer[]; CopyBuffer(indHandlers[6][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > 75 + sigma && ind1val2 < 75 - sigma;
   bool   ind1short = ind1val1 < 100 - 75 - sigma && ind1val2 > 100 - 75 + sigma;

   return CreateEntrySignal(6, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_006()
  {
   // Moving Average of Oscillator (Close, 17, 21, 12), Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[6][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < 0.0000 - sigma && ind2val2 > 0.0000 + sigma;
   bool   ind2short = ind2val1 > 0.0000 + sigma && ind2val2 < 0.0000 - sigma;
   // Bears Power (35), Level: 0.0000
   double ind3buffer[]; CopyBuffer(indHandlers[6][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 < 0.0000 - sigma;
   bool   ind3short = ind3val1 > 0.0000 + sigma;
   // MACD (Close, 15, 28, 9)
   double ind4buffer[]; CopyBuffer(indHandlers[6][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < 0 - sigma && ind4val2 > 0 + sigma;
   bool   ind4short = ind4val1 > 0 + sigma && ind4val2 < 0 - sigma;

   return CreateExitSignal(6, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_007()
  {
   // RSI (Close, 12), Level: 44
   double ind0buffer[]; CopyBuffer(indHandlers[7][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 44 - sigma && ind0val2 > 44 + sigma;
   bool   ind0short = ind0val1 > 100 - 44 + sigma && ind0val2 < 100 - 44 - sigma;
   // Envelopes (Close, Simple, 11, 0.65)
   double ind1buffer0[]; CopyBuffer(indHandlers[7][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[7][1][0], 1, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   double ind1upBand2 = ind1buffer0[0];
   double ind1dnBand2 = ind1buffer1[0];
   bool   ind1long    = Open(0) < ind1dnBand1 - sigma && Open(1) > ind1dnBand2 + sigma;
   bool   ind1short   = Open(0) > ind1upBand1 + sigma && Open(1) < ind1upBand2 - sigma;

   return CreateEntrySignal(7, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_007()
  {
   // Bears Power (35), Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[7][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 0.0000 - sigma;
   bool   ind2short = ind2val1 > 0.0000 + sigma;
   // Average True Range (43)
   double ind3buffer[]; CopyBuffer(indHandlers[7][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   bool   ind3short = ind3long;

   return CreateExitSignal(7, ind2long || ind3long, ind2short || ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_008()
  {
   // Stochastic Signal (10, 8, 5)
   double ind0buffer0[]; CopyBuffer(indHandlers[8][0][0], MAIN_LINE,   1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[8][0][0], SIGNAL_LINE, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer0[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   // MACD (Close, 19, 33, 9)
   double ind1buffer[]; CopyBuffer(indHandlers[8][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   // Accelerator Oscillator, Level: -1.5000
   double ind2buffer[]; CopyBuffer(indHandlers[8][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < -1.5000 - sigma;
   bool   ind2short = ind2val1 > 1.5000 + sigma;

   return CreateEntrySignal(8, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_008()
  {
   // Accelerator Oscillator, Level: 0.0000
   double ind3buffer[]; CopyBuffer(indHandlers[8][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > 0.0000 + sigma && ind3val2 < 0.0000 - sigma;
   bool   ind3short = ind3val1 < 0.0000 - sigma && ind3val2 > 0.0000 + sigma;
   // Average True Range (43)
   double ind4buffer[]; CopyBuffer(indHandlers[8][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;
   bool   ind4short = ind4long;
   // Momentum (Close, 21)
   double ind5buffer[]; CopyBuffer(indHandlers[8][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;
   // Directional Indicators (18)
   double ind6buffer0[]; CopyBuffer(indHandlers[8][6][0], 1, 1, 2, ind6buffer0);
   double ind6buffer1[]; CopyBuffer(indHandlers[8][6][0], 2, 1, 2, ind6buffer1);
   double ind6val1  = ind6buffer0[1];
   double ind6val2  = ind6buffer1[1];
   bool   ind6long  = ind6val1 < ind6val2 - sigma;
   bool   ind6short = ind6val1 > ind6val2 + sigma;

   return CreateExitSignal(8, ind3long || ind4long || ind5long || ind6long, ind3short || ind4short || ind5short || ind6short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_009()
  {
   // Moving Averages Crossover (Simple, Simple, 12, 21)
   double ind0buffer0[]; CopyBuffer(indHandlers[9][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[9][0][1], 0, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer0[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   // Bulls Power (48), Level: 0.0000
   double ind1buffer[]; CopyBuffer(indHandlers[9][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > 0.0000 + sigma && ind1val2 < 0.0000 - sigma;
   bool   ind1short = ind1val1 < 0.0000 - sigma && ind1val2 > 0.0000 + sigma;
   // Bulls Power (9), Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[9][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > 0.0000 + sigma && ind2val2 < 0.0000 - sigma;
   bool   ind2short = ind2val1 < 0.0000 - sigma && ind2val2 > 0.0000 + sigma;

   return CreateEntrySignal(9, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_009()
  {
   // Commodity Channel Index (Typical, 35)
   double ind3buffer[]; CopyBuffer(indHandlers[9][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;

   return CreateExitSignal(9, ind3long, ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_010()
  {
   // Alligator (Smoothed, Median, 32, 15, 15, 5, 5, 4)
   double ind0buffer0[]; CopyBuffer(indHandlers[10][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[10][0][0], 1, 1, 2, ind0buffer1);
   double ind0buffer2[]; CopyBuffer(indHandlers[10][0][0], 2, 1, 2, ind0buffer2);
   double ind0val1  = ind0buffer2[1];
   double ind0val2  = ind0buffer0[1];
   double ind0val3  = ind0buffer2[0];
   double ind0val4  = ind0buffer0[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   // Stochastic Signal (15, 13, 5)
   double ind1buffer0[]; CopyBuffer(indHandlers[10][1][0], MAIN_LINE,   1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[10][1][0], SIGNAL_LINE, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   double ind1val3  = ind1buffer0[0];
   double ind1val4  = ind1buffer1[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;

   return CreateEntrySignal(10, ind0long && ind1long, ind0short && ind1short, 83, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_010()
  {
   // Candle Color (31, 3)
   bool ind2long  = false;
   bool ind2short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 31;

      for (int b = 3 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind2long  = consecutiveBullish >= 3;
      ind2short = consecutiveBearish >= 3;
   }
   // ADX (12)
   double ind3buffer[]; CopyBuffer(indHandlers[10][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3long;
   // Moving Average (Simple, Close, 21, 0)
   double ind4buffer[]; CopyBuffer(indHandlers[10][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = Open(0) > ind4val1 + sigma && Open(1) < ind4val2 - sigma;
   bool   ind4short = Open(0) < ind4val1 - sigma && Open(1) > ind4val2 + sigma;

   return CreateExitSignal(10, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 83, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_011()
  {
   // Candle Color (13, 4)
   bool ind0long  = false;
   bool ind0short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 13;

      for (int b = 4 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind0long  = consecutiveBearish >= 4;
      ind0short = consecutiveBullish >= 4;
   }
   // Williams' Percent Range (24), Level: -23.0
   double ind1buffer[]; CopyBuffer(indHandlers[11][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < -23.0 - sigma && ind1val2 > -23.0 + sigma;
   bool   ind1short = ind1val1 > -100 - -23.0 + sigma && ind1val2 < -100 - -23.0 - sigma;

   return CreateEntrySignal(11, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_011()
  {
   // MACD Signal (Close, 20, 32, 8)
   double ind2buffer0[]; CopyBuffer(indHandlers[11][2][0], 0, 1, 3, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[11][2][0], 1, 1, 3, ind2buffer1);
   double ind2val1  = ind2buffer0[2] - ind2buffer1[2];
   bool   ind2long  = ind2val1 > 0 + sigma;
   bool   ind2short = ind2val1 < 0 - sigma;
   // Stochastic (9, 6, 7)
   double ind3buffer[]; CopyBuffer(indHandlers[11][3][0], MAIN_LINE, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   // Moving Average of Oscillator (Close, 18, 36, 13), Level: 0.0000
   double ind4buffer[]; CopyBuffer(indHandlers[11][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > 0.0000 + sigma && ind4val2 < 0.0000 - sigma;
   bool   ind4short = ind4val1 < 0.0000 - sigma && ind4val2 > 0.0000 + sigma;
   // Bulls Power (17)
   double ind5buffer[]; CopyBuffer(indHandlers[11][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 > ind5val2 + sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma;

   return CreateExitSignal(11, ind2long || ind3long || ind4long || ind5long, ind2short || ind3short || ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_012()
  {
   // Momentum (Close, 43), Level: 98.0000
   double ind0buffer[]; CopyBuffer(indHandlers[12][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 98.0000 - sigma && ind0val2 > 98.0000 + sigma;
   bool   ind0short = ind0val1 > 200 - 98.0000 + sigma && ind0val2 < 200 - 98.0000 - sigma;

   return CreateEntrySignal(12, ind0long, ind0short, 93, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_012()
  {
   // Williams' Percent Range (40)
   double ind1buffer[]; CopyBuffer(indHandlers[12][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Stochastic Signal (15, 7, 6)
   double ind2buffer0[]; CopyBuffer(indHandlers[12][2][0], MAIN_LINE,   1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[12][2][0], SIGNAL_LINE, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;

   return CreateExitSignal(12, ind1long || ind2long, ind1short || ind2short, 93, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_013()
  {
   // Pin Bar (8, 35)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 8 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 35 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 35 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(13, ind0long, ind0short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_013()
  {
   // MACD Signal (Close, 23, 26, 6)
   double ind1buffer0[]; CopyBuffer(indHandlers[13][1][0], 0, 1, 3, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[13][1][0], 1, 1, 3, ind1buffer1);
   double ind1val1  = ind1buffer0[2] - ind1buffer1[2];
   bool   ind1long  = ind1val1 < 0 - sigma;
   bool   ind1short = ind1val1 > 0 + sigma;
   // Moving Average (Simple, Close, 19, 0)
   double ind2buffer[]; CopyBuffer(indHandlers[13][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = Open(0) < ind2val1 - sigma && Open(1) > ind2val2 + sigma;
   bool   ind2short = Open(0) > ind2val1 + sigma && Open(1) < ind2val2 - sigma;
   // Moving Average (Simple, Close, 41, 0)
   double ind3buffer[]; CopyBuffer(indHandlers[13][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = Open(0) > ind3val1 + sigma && Open(1) < ind3val2 - sigma;
   bool   ind3short = Open(0) < ind3val1 - sigma && Open(1) > ind3val2 + sigma;

   return CreateExitSignal(13, ind1long || ind2long || ind3long, ind1short || ind2short || ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_014()
  {
   // Stochastic (14, 10, 5), Level: 14.0
   double ind0buffer[]; CopyBuffer(indHandlers[14][0][0], MAIN_LINE, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 14.0 - sigma && ind0val2 > 14.0 + sigma;
   bool   ind0short = ind0val1 > 100 - 14.0 + sigma && ind0val2 < 100 - 14.0 - sigma;
   // Moving Average (Simple, Close, 35, 0)
   double ind1buffer[]; CopyBuffer(indHandlers[14][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;

   return CreateEntrySignal(14, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_014()
  {
   // MACD Signal (Close, 7, 25, 8)
   double ind2buffer0[]; CopyBuffer(indHandlers[14][2][0], 0, 1, 3, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[14][2][0], 1, 1, 3, ind2buffer1);
   double ind2val1  = ind2buffer0[2] - ind2buffer1[2];
   bool   ind2long  = ind2val1 > 0 + sigma;
   bool   ind2short = ind2val1 < 0 - sigma;
   // Stochastic (5, 1, 5)
   double ind3buffer[]; CopyBuffer(indHandlers[14][3][0], MAIN_LINE, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;

   return CreateExitSignal(14, ind2long || ind3long, ind2short || ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_015()
  {
   // Envelopes (Close, Simple, 11, 0.67)
   double ind0buffer0[]; CopyBuffer(indHandlers[15][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[15][0][0], 1, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   bool   ind0long  = Open(0) > ind0upBand1 + sigma;
   bool   ind0short = Open(0) < ind0dnBand1 - sigma;
   // Bollinger Bands (Close, 8, 2.02)
   double ind1buffer0[]; CopyBuffer(indHandlers[15][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[15][1][0], 2, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   double ind1upBand2 = ind1buffer0[0];
   double ind1dnBand2 = ind1buffer1[0];
   bool   ind1long    = Open(0) < ind1upBand1 - sigma && Open(1) > ind1upBand2 + sigma;
   bool   ind1short   = Open(0) > ind1dnBand1 + sigma && Open(1) < ind1dnBand2 - sigma;

   return CreateEntrySignal(15, ind0long && ind1long, ind0short && ind1short, 39, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_015()
  {
   // DeMarker (23), Level: 0.46
   double ind2buffer[]; CopyBuffer(indHandlers[15][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > 0.46 + sigma && ind2val2 < 0.46 - sigma;
   bool   ind2short = ind2val1 < 1 - 0.46 - sigma && ind2val2 > 1 - 0.46 + sigma;
   // Momentum (Close, 50)
   double ind3buffer[]; CopyBuffer(indHandlers[15][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;

   return CreateExitSignal(15, ind2long || ind3long, ind2short || ind3short, 39, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_016()
  {
   // Candle Color (36, 1)
   bool ind0long  = false;
   bool ind0short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 36;

      for (int b = 1 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind0long  = consecutiveBullish >= 1;
      ind0short = consecutiveBearish >= 1;
   }
   // Envelopes (Close, Simple, 2, 0.41)
   double ind1buffer0[]; CopyBuffer(indHandlers[16][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[16][1][0], 1, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   double ind1upBand2 = ind1buffer0[0];
   double ind1dnBand2 = ind1buffer1[0];
   bool   ind1long    = Open(0) > ind1upBand1 + sigma && Open(1) < ind1upBand2 - sigma;
   bool   ind1short   = Open(0) < ind1dnBand1 - sigma && Open(1) > ind1dnBand2 + sigma;

   return CreateEntrySignal(16, ind0long && ind1long, ind0short && ind1short, 38, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_016()
  {
   // ADX (4), Level: 21.0
   double ind2buffer[]; CopyBuffer(indHandlers[16][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > 21.0 + sigma && ind2val2 < 21.0 - sigma;
   bool   ind2short = ind2long;
   // Candle Color (42, 3)
   bool ind3long  = false;
   bool ind3short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 42;

      for (int b = 3 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind3long  = consecutiveBullish >= 3;
      ind3short = consecutiveBearish >= 3;
   }
   // Alligator (Smoothed, Median, 27, 26, 26, 13, 13, 3)
   double ind4buffer0[]; CopyBuffer(indHandlers[16][4][0], 0, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[16][4][0], 1, 1, 2, ind4buffer1);
   double ind4buffer2[]; CopyBuffer(indHandlers[16][4][0], 2, 1, 2, ind4buffer2);
   double ind4val1  = ind4buffer2[1];
   double ind4val2  = ind4buffer2[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma;

   return CreateExitSignal(16, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 38, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_017()
  {
   // RSI (Close, 50), Level: 30
   double ind0buffer[]; CopyBuffer(indHandlers[17][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 30 - sigma && ind0val2 > 30 + sigma;
   bool   ind0short = ind0val1 > 100 - 30 + sigma && ind0val2 < 100 - 30 - sigma;

   return CreateEntrySignal(17, ind0long, ind0short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_017()
  {
   // DeMarker (23), Level: 0.14
   double ind1buffer[]; CopyBuffer(indHandlers[17][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 < 0.14 - sigma;
   bool   ind1short = ind1val1 > 1 - 0.14 + sigma;
   // DeMarker (9)
   double ind2buffer[]; CopyBuffer(indHandlers[17][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;
   // MACD Signal (Close, 20, 25, 6)
   double ind3buffer0[]; CopyBuffer(indHandlers[17][3][0], 0, 1, 3, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[17][3][0], 1, 1, 3, ind3buffer1);
   double ind3val1  = ind3buffer0[2] - ind3buffer1[2];
   bool   ind3long  = ind3val1 < 0 - sigma;
   bool   ind3short = ind3val1 > 0 + sigma;

   return CreateExitSignal(17, ind1long || ind2long || ind3long, ind1short || ind2short || ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_018()
  {
   // Moving Average (Simple, Close, 23, 0)
   double ind0buffer[]; CopyBuffer(indHandlers[18][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = Open(0) < ind0val1 - sigma && Open(1) > ind0val2 + sigma;
   bool   ind0short = Open(0) > ind0val1 + sigma && Open(1) < ind0val2 - sigma;
   // Williams' Percent Range (41)
   double ind1buffer[]; CopyBuffer(indHandlers[18][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;

   return CreateEntrySignal(18, ind0long && ind1long, ind0short && ind1short, 82, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_018()
  {
   // ADX (4), Level: 21.0
   double ind2buffer[]; CopyBuffer(indHandlers[18][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > 21.0 + sigma && ind2val2 < 21.0 - sigma;
   bool   ind2short = ind2long;
   // Candle Color (42, 3)
   bool ind3long  = false;
   bool ind3short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 42;

      for (int b = 3 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind3long  = consecutiveBullish >= 3;
      ind3short = consecutiveBearish >= 3;
   }
   // Accelerator Oscillator, Level: 0.0000
   double ind4buffer[]; CopyBuffer(indHandlers[18][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < 0.0000 - sigma && ind4val2 > 0.0000 + sigma;
   bool   ind4short = ind4val1 > 0.0000 + sigma && ind4val2 < 0.0000 - sigma;

   return CreateExitSignal(18, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 82, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_019()
  {
   // Alligator (Smoothed, Median, 15, 13, 13, 11, 11, 3)
   double ind0buffer0[]; CopyBuffer(indHandlers[19][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[19][0][0], 1, 1, 2, ind0buffer1);
   double ind0buffer2[]; CopyBuffer(indHandlers[19][0][0], 2, 1, 2, ind0buffer2);
   double ind0val1  = ind0buffer1[1];
   double ind0val2  = ind0buffer1[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma;
   // Williams' Percent Range (27), Level: -2.0
   double ind1buffer[]; CopyBuffer(indHandlers[19][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > -2.0 + sigma;
   bool   ind1short = ind1val1 < -100 - -2.0 - sigma;
   // Stochastic (9, 1, 7)
   double ind2buffer[]; CopyBuffer(indHandlers[19][2][0], MAIN_LINE, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;

   return CreateEntrySignal(19, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 53, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_019()
  {
   // Standard Deviation (Close, Simple, 27)
   double ind3buffer[]; CopyBuffer(indHandlers[19][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3long;
   // RSI (Close, 41), Level: 42
   double ind4buffer[]; CopyBuffer(indHandlers[19][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 < 42 - sigma;
   bool   ind4short = ind4val1 > 100 - 42 + sigma;
   // Envelopes (Close, Simple, 2, 0.46)
   double ind5buffer0[]; CopyBuffer(indHandlers[19][5][0], 0, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[19][5][0], 1, 1, 2, ind5buffer1);
   double ind5upBand1 = ind5buffer0[1];
   double ind5dnBand1 = ind5buffer1[1];
   bool   ind5long  = Open(0) > ind5upBand1 + sigma;
   bool   ind5short = Open(0) < ind5dnBand1 - sigma;

   return CreateExitSignal(19, ind3long || ind4long || ind5long, ind3short || ind4short || ind5short, 53, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_020()
  {
   // Moving Average of Oscillator (Close, 20, 38, 12), Level: 3.6000
   double ind0buffer[]; CopyBuffer(indHandlers[20][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 3.6000 - sigma && ind0val2 > 3.6000 + sigma;
   bool   ind0short = ind0val1 > -3.6000 + sigma && ind0val2 < -3.6000 - sigma;

   return CreateEntrySignal(20, ind0long, ind0short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_020()
  {
   // Moving Average (Simple, Close, 31, 0)
   double ind1buffer[]; CopyBuffer(indHandlers[20][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   // Alligator (Smoothed, Median, 29, 9, 9, 8, 8, 5)
   double ind2buffer0[]; CopyBuffer(indHandlers[20][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[20][2][0], 1, 1, 2, ind2buffer1);
   double ind2buffer2[]; CopyBuffer(indHandlers[20][2][0], 2, 1, 2, ind2buffer2);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer0[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;

   return CreateExitSignal(20, ind1long || ind2long, ind1short || ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_021()
  {
   // Pin Bar (9, 48)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 48 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 48 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(21, ind0long, ind0short, 79, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_021()
  {
   // Candle Color (18, 3)
   bool ind1long  = false;
   bool ind1short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 18;

      for (int b = 3 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind1long  = consecutiveBearish >= 3;
      ind1short = consecutiveBullish >= 3;
   }

   return CreateExitSignal(21, ind1long, ind1short, 79, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_022()
  {
   // Bulls Power (36), Level: 20.1000
   double ind0buffer[]; CopyBuffer(indHandlers[22][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 20.1000 + sigma && ind0val2 < 20.1000 - sigma;
   bool   ind0short = ind0val1 < -20.1000 - sigma && ind0val2 > -20.1000 + sigma;

   return CreateEntrySignal(22, ind0long, ind0short, 33, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_022()
  {
   // Standard Deviation (Close, Simple, 34)
   double ind1buffer[]; CopyBuffer(indHandlers[22][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1long;
   // Commodity Channel Index (Typical, 4), Level: -48
   double ind2buffer[]; CopyBuffer(indHandlers[22][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > -48 + sigma && ind2val2 < -48 - sigma;
   bool   ind2short = ind2val1 < 48 - sigma && ind2val2 > 48 + sigma;
   // Bears Power (17), Level: -5.5200
   double ind3buffer[]; CopyBuffer(indHandlers[22][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < -5.5200 - sigma && ind3val2 > -5.5200 + sigma;
   bool   ind3short = ind3val1 > 5.5200 + sigma && ind3val2 < 5.5200 - sigma;
   // MACD Signal (Close, 13, 27, 10)
   double ind4buffer0[]; CopyBuffer(indHandlers[22][4][0], 0, 1, 3, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[22][4][0], 1, 1, 3, ind4buffer1);
   double ind4val1  = ind4buffer0[2] - ind4buffer1[2];
   double ind4val2  = ind4buffer0[1] - ind4buffer1[1];
   bool   ind4long  = ind4val1 > 0 + sigma && ind4val2 < 0 - sigma;
   bool   ind4short = ind4val1 < 0 - sigma && ind4val2 > 0 + sigma;

   return CreateExitSignal(22, ind1long || ind2long || ind3long || ind4long, ind1short || ind2short || ind3short || ind4short, 33, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_023()
  {
   // Envelopes (Close, Simple, 22, 0.97)
   double ind0buffer0[]; CopyBuffer(indHandlers[23][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[23][0][0], 1, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;
   bool   ind0short   = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;

   return CreateEntrySignal(23, ind0long, ind0short, 51, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_023()
  {
   // Candle Color (19, 2)
   bool ind1long  = false;
   bool ind1short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 19;

      for (int b = 2 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind1long  = consecutiveBearish >= 2;
      ind1short = consecutiveBullish >= 2;
   }

   return CreateExitSignal(23, ind1long, ind1short, 51, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_024()
  {
   // Momentum (Close, 4), Level: 100.0000
   double ind0buffer[]; CopyBuffer(indHandlers[24][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 100.0000 + sigma && ind0val2 < 100.0000 - sigma;
   bool   ind0short = ind0val1 < 200 - 100.0000 - sigma && ind0val2 > 200 - 100.0000 + sigma;
   // Moving Average of Oscillator (Close, 7, 44, 12)
   double ind1buffer[]; CopyBuffer(indHandlers[24][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Momentum (Close, 35)
   double ind2buffer[]; CopyBuffer(indHandlers[24][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;
   // Momentum (Close, 47)
   double ind3buffer[]; CopyBuffer(indHandlers[24][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // Moving Average of Oscillator (Close, 10, 32, 10)
   double ind4buffer[]; CopyBuffer(indHandlers[24][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;

   return CreateEntrySignal(24, ind0long && ind1long && ind2long && ind3long && ind4long, ind0short && ind1short && ind2short && ind3short && ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_024()
  {
   // Williams' Percent Range (28)
   double ind5buffer[]; CopyBuffer(indHandlers[24][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 > ind5val2 + sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma;

   return CreateExitSignal(24, ind5long, ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_025()
  {
   // Momentum (Close, 28), Level: 102.0000
   double ind0buffer[]; CopyBuffer(indHandlers[25][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 102.0000 + sigma && ind0val2 < 102.0000 - sigma;
   bool   ind0short = ind0val1 < 200 - 102.0000 - sigma && ind0val2 > 200 - 102.0000 + sigma;

   return CreateEntrySignal(25, ind0long, ind0short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_025()
  {
   // Standard Deviation (Close, Simple, 32)
   double ind1buffer[]; CopyBuffer(indHandlers[25][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1long;
   // Stochastic Signal (2, 1, 1)
   double ind2buffer0[]; CopyBuffer(indHandlers[25][2][0], MAIN_LINE,   1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[25][2][0], SIGNAL_LINE, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   double ind2val3  = ind2buffer0[0];
   double ind2val4  = ind2buffer1[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;

   return CreateExitSignal(25, ind1long || ind2long, ind1short || ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_026()
  {
   // Momentum (Close, 17), Level: 98.0000
   double ind0buffer[]; CopyBuffer(indHandlers[26][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 98.0000 + sigma && ind0val2 < 98.0000 - sigma;
   bool   ind0short = ind0val1 < 200 - 98.0000 - sigma && ind0val2 > 200 - 98.0000 + sigma;
   // Bears Power (37), Level: -4.5900
   double ind1buffer[]; CopyBuffer(indHandlers[26][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 < -4.5900 - sigma;
   bool   ind1short = ind1val1 > 4.5900 + sigma;

   return CreateEntrySignal(26, ind0long && ind1long, ind0short && ind1short, 55, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_026()
  {
   // Awesome Oscillator, Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[26][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > 0.0000 + sigma && ind2val2 < 0.0000 - sigma;
   bool   ind2short = ind2val1 < 0.0000 - sigma && ind2val2 > 0.0000 + sigma;
   // Williams' Percent Range (6)
   double ind3buffer[]; CopyBuffer(indHandlers[26][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // Momentum (Close, 17), Level: 96.0000
   double ind4buffer[]; CopyBuffer(indHandlers[26][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < 96.0000 - sigma && ind4val2 > 96.0000 + sigma;
   bool   ind4short = ind4val1 > 200 - 96.0000 + sigma && ind4val2 < 200 - 96.0000 - sigma;
   // Moving Averages Crossover (Simple, Simple, 17, 38)
   double ind5buffer0[]; CopyBuffer(indHandlers[26][5][0], 0, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[26][5][1], 0, 1, 2, ind5buffer1);
   double ind5val1  = ind5buffer0[1];
   double ind5val2  = ind5buffer1[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;

   return CreateExitSignal(26, ind2long || ind3long || ind4long || ind5long, ind2short || ind3short || ind4short || ind5short, 55, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_027()
  {
   // Moving Averages Crossover (Simple, Simple, 15, 28)
   double ind0buffer0[]; CopyBuffer(indHandlers[27][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[27][0][1], 0, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   bool   ind0long  = ind0val1 > ind0val2 + sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma;
   // Stochastic Signal (8, 4, 6)
   double ind1buffer0[]; CopyBuffer(indHandlers[27][1][0], MAIN_LINE,   1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[27][1][0], SIGNAL_LINE, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   double ind1val3  = ind1buffer0[0];
   double ind1val4  = ind1buffer1[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;
   // RSI (Close, 44)
   double ind2buffer[]; CopyBuffer(indHandlers[27][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   // Commodity Channel Index (Typical, 43), Level: 0
   double ind3buffer[]; CopyBuffer(indHandlers[27][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 0 + sigma;
   bool   ind3short = ind3val1 < 0 - sigma;
   // MACD Signal (Close, 20, 36, 4)
   double ind4buffer0[]; CopyBuffer(indHandlers[27][4][0], 0, 1, 3, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[27][4][0], 1, 1, 3, ind4buffer1);
   double ind4val1  = ind4buffer0[2] - ind4buffer1[2];
   bool   ind4long  = ind4val1 > 0 + sigma;
   bool   ind4short = ind4val1 < 0 - sigma;
   // Accelerator Oscillator, Level: 0.0000
   double ind5buffer[]; CopyBuffer(indHandlers[27][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 > 0.0000 + sigma && ind5val2 < 0.0000 - sigma;
   bool   ind5short = ind5val1 < 0.0000 - sigma && ind5val2 > 0.0000 + sigma;

   return CreateEntrySignal(27, ind0long && ind1long && ind2long && ind3long && ind4long && ind5long, ind0short && ind1short && ind2short && ind3short && ind4short && ind5short, 15, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_027()
  {
   // Moving Average of Oscillator (Close, 23, 25, 7), Level: 0.0000
   double ind6buffer[]; CopyBuffer(indHandlers[27][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   bool   ind6long  = ind6val1 > 0.0000 + sigma;
   bool   ind6short = ind6val1 < 0.0000 - sigma;

   return CreateExitSignal(27, ind6long, ind6short, 15, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_028()
  {
   // RSI (Close, 9), Level: 30
   double ind0buffer[]; CopyBuffer(indHandlers[28][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 30 - sigma && ind0val2 > 30 + sigma;
   bool   ind0short = ind0val1 > 100 - 30 + sigma && ind0val2 < 100 - 30 - sigma;
   // Directional Indicators (16)
   double ind1buffer0[]; CopyBuffer(indHandlers[28][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[28][1][0], 2, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // RSI (Close, 14), Level: 36
   double ind2buffer[]; CopyBuffer(indHandlers[28][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 36 - sigma;
   bool   ind2short = ind2val1 > 100 - 36 + sigma;
   // MACD (Close, 6, 43, 9)
   double ind3buffer[]; CopyBuffer(indHandlers[28][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   // Bears Power (40)
   double ind4buffer[]; CopyBuffer(indHandlers[28][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;
   // Accelerator Oscillator
   double ind5buffer[]; CopyBuffer(indHandlers[28][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   double ind5val3  = ind5buffer[0];
   bool   ind5long  = ind5val1 < ind5val2 - sigma && ind5val2 > ind5val3 + sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma && ind5val2 < ind5val3 - sigma;

   return CreateEntrySignal(28, ind0long && ind1long && ind2long && ind3long && ind4long && ind5long, ind0short && ind1short && ind2short && ind3short && ind4short && ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_028()
  {
   // Awesome Oscillator
   double ind6buffer[]; CopyBuffer(indHandlers[28][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   bool   ind6long  = ind6val1 > ind6val2 + sigma;
   bool   ind6short = ind6val1 < ind6val2 - sigma;

   return CreateExitSignal(28, ind6long, ind6short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_029()
  {
   // Bulls Power (33)
   double ind0buffer[]; CopyBuffer(indHandlers[29][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > ind0val2 + sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma;
   // Awesome Oscillator, Level: 0.0000
   double ind1buffer[]; CopyBuffer(indHandlers[29][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 0.0000 + sigma;
   bool   ind1short = ind1val1 < 0.0000 - sigma;
   // Moving Averages Crossover (Simple, Simple, 13, 31)
   double ind2buffer0[]; CopyBuffer(indHandlers[29][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[29][2][1], 0, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   double ind2val3  = ind2buffer0[0];
   double ind2val4  = ind2buffer1[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;
   // Alligator (Smoothed, Median, 33, 14, 14, 3, 3, 1)
   double ind3buffer0[]; CopyBuffer(indHandlers[29][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[29][3][0], 1, 1, 2, ind3buffer1);
   double ind3buffer2[]; CopyBuffer(indHandlers[29][3][0], 2, 1, 2, ind3buffer2);
   double ind3val1  = ind3buffer1[1];
   double ind3val2  = ind3buffer1[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // Stochastic Signal (6, 2, 1)
   double ind4buffer0[]; CopyBuffer(indHandlers[29][4][0], MAIN_LINE,   1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[29][4][0], SIGNAL_LINE, 1, 2, ind4buffer1);
   double ind4val1  = ind4buffer0[1];
   double ind4val2  = ind4buffer1[1];
   double ind4val3  = ind4buffer0[0];
   double ind4val4  = ind4buffer1[0];
   bool   ind4long  = ind4val1 > ind4val2 + sigma && ind4val3 < ind4val4 - sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma && ind4val3 > ind4val4 + sigma;

   return CreateEntrySignal(29, ind0long && ind1long && ind2long && ind3long && ind4long, ind0short && ind1short && ind2short && ind3short && ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_029()
  {
   // Moving Averages Crossover (Simple, Simple, 8, 10)
   double ind5buffer0[]; CopyBuffer(indHandlers[29][5][0], 0, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[29][5][1], 0, 1, 2, ind5buffer1);
   double ind5val1  = ind5buffer0[1];
   double ind5val2  = ind5buffer1[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;
   // Bears Power (9)
   double ind6buffer[]; CopyBuffer(indHandlers[29][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   bool   ind6long  = ind6val1 > ind6val2 + sigma;
   bool   ind6short = ind6val1 < ind6val2 - sigma;
   // Moving Average (Simple, Close, 31, 0)
   double ind7buffer[]; CopyBuffer(indHandlers[29][7][0], 0, 1, 3, ind7buffer);
   double ind7val1  = ind7buffer[2];
   double ind7val2  = ind7buffer[1];
   double ind7val3  = ind7buffer[0];
   bool   ind7long  = ind7val1 > ind7val2 + sigma && ind7val2 < ind7val3 - sigma;
   bool   ind7short = ind7val1 < ind7val2 - sigma && ind7val2 > ind7val3 + sigma;

   return CreateExitSignal(29, ind5long || ind6long || ind7long, ind5short || ind6short || ind7short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_030()
  {
   // Momentum (Close, 29), Level: 102.0000
   double ind0buffer[]; CopyBuffer(indHandlers[30][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 102.0000 + sigma && ind0val2 < 102.0000 - sigma;
   bool   ind0short = ind0val1 < 200 - 102.0000 - sigma && ind0val2 > 200 - 102.0000 + sigma;
   // Bulls Power (49)
   double ind1buffer[]; CopyBuffer(indHandlers[30][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Directional Indicators (21)
   double ind2buffer0[]; CopyBuffer(indHandlers[30][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[30][2][0], 2, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;

   return CreateEntrySignal(30, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 82, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_030()
  {
   // Standard Deviation (Close, Simple, 45)
   double ind3buffer[]; CopyBuffer(indHandlers[30][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   bool   ind3short = ind3long;
   // Moving Average of Oscillator (Close, 12, 32, 7), Level: 0.0000
   double ind4buffer[]; CopyBuffer(indHandlers[30][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 > 0.0000 + sigma;
   bool   ind4short = ind4val1 < 0.0000 - sigma;

   return CreateExitSignal(30, ind3long || ind4long, ind3short || ind4short, 82, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_031()
  {
   // Moving Averages Crossover (Simple, Simple, 11, 46)
   double ind0buffer0[]; CopyBuffer(indHandlers[31][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[31][0][1], 0, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer0[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   // Moving Average of Oscillator (Close, 13, 22, 13)
   double ind1buffer[]; CopyBuffer(indHandlers[31][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;

   return CreateEntrySignal(31, ind0long && ind1long, ind0short && ind1short, 75, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_031()
  {
   // Envelopes (Close, Simple, 8, 0.27)
   double ind2buffer0[]; CopyBuffer(indHandlers[31][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[31][2][0], 1, 1, 2, ind2buffer1);
   double ind2upBand1 = ind2buffer0[1];
   double ind2dnBand1 = ind2buffer1[1];
   bool   ind2long  = Open(0) > ind2upBand1 + sigma;
   bool   ind2short = Open(0) < ind2dnBand1 - sigma;

   return CreateExitSignal(31, ind2long, ind2short, 75, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_032()
  {
   // Moving Averages Crossover (Simple, Simple, 14, 22)
   double ind0buffer0[]; CopyBuffer(indHandlers[32][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[32][0][1], 0, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer0[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   // ADX (14), Level: 17.0
   double ind1buffer[]; CopyBuffer(indHandlers[32][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 < 17.0 - sigma;
   bool   ind1short = ind1long;

   return CreateEntrySignal(32, ind0long && ind1long, ind0short && ind1short, 65, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_032()
  {
   // Moving Averages Crossover (Simple, Simple, 7, 26)
   double ind2buffer0[]; CopyBuffer(indHandlers[32][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[32][2][1], 0, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   double ind2val3  = ind2buffer0[0];
   double ind2val4  = ind2buffer1[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;

   return CreateExitSignal(32, ind2long, ind2short, 65, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_033()
  {
   // Standard Deviation (Close, Simple, 4)
   double ind0buffer[]; CopyBuffer(indHandlers[33][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > ind0val2 + sigma;
   bool   ind0short = ind0long;
   // ADX (35)
   double ind1buffer[]; CopyBuffer(indHandlers[33][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   bool   ind1short = ind1long;
   // MACD (Close, 9, 18, 9)
   double ind2buffer[]; CopyBuffer(indHandlers[33][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   // MACD Signal (Close, 12, 46, 8)
   double ind3buffer0[]; CopyBuffer(indHandlers[33][3][0], 0, 1, 3, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[33][3][0], 1, 1, 3, ind3buffer1);
   double ind3val1  = ind3buffer0[2] - ind3buffer1[2];
   double ind3val2  = ind3buffer0[1] - ind3buffer1[1];
   bool   ind3long  = ind3val1 < 0 - sigma && ind3val2 > 0 + sigma;
   bool   ind3short = ind3val1 > 0 + sigma && ind3val2 < 0 - sigma;

   return CreateEntrySignal(33, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_033()
  {
   // Awesome Oscillator, Level: 0.0000
   double ind4buffer[]; CopyBuffer(indHandlers[33][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > 0.0000 + sigma && ind4val2 < 0.0000 - sigma;
   bool   ind4short = ind4val1 < 0.0000 - sigma && ind4val2 > 0.0000 + sigma;
   // Stochastic Signal (16, 14, 11)
   double ind5buffer0[]; CopyBuffer(indHandlers[33][5][0], MAIN_LINE,   1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[33][5][0], SIGNAL_LINE, 1, 2, ind5buffer1);
   double ind5val1  = ind5buffer0[1];
   double ind5val2  = ind5buffer1[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;

   return CreateExitSignal(33, ind4long || ind5long, ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_034()
  {
   // Commodity Channel Index (Typical, 38)
   double ind0buffer[]; CopyBuffer(indHandlers[34][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > ind0val2 + sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma;
   // MACD Signal (Close, 19, 33, 9)
   double ind1buffer0[]; CopyBuffer(indHandlers[34][1][0], 0, 1, 3, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[34][1][0], 1, 1, 3, ind1buffer1);
   double ind1val1  = ind1buffer0[2] - ind1buffer1[2];
   bool   ind1long  = ind1val1 < 0 - sigma;
   bool   ind1short = ind1val1 > 0 + sigma;
   // Alligator (Smoothed, Median, 35, 15, 15, 5, 5, 2)
   double ind2buffer0[]; CopyBuffer(indHandlers[34][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[34][2][0], 1, 1, 2, ind2buffer1);
   double ind2buffer2[]; CopyBuffer(indHandlers[34][2][0], 2, 1, 2, ind2buffer2);
   double ind2val1  = ind2buffer1[1];
   double ind2val2  = ind2buffer1[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;
   // MACD (Close, 8, 44, 9)
   double ind3buffer[]; CopyBuffer(indHandlers[34][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < 0 - sigma && ind3val2 > 0 + sigma;
   bool   ind3short = ind3val1 > 0 + sigma && ind3val2 < 0 - sigma;

   return CreateEntrySignal(34, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_034()
  {
   // Average True Range (15), Level: 19.6000
   double ind4buffer[]; CopyBuffer(indHandlers[34][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 > 19.6000 + sigma;
   bool   ind4short = ind4long;
   // Moving Average of Oscillator (Close, 18, 43, 4), Level: 0.0000
   double ind5buffer[]; CopyBuffer(indHandlers[34][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 > 0.0000 + sigma && ind5val2 < 0.0000 - sigma;
   bool   ind5short = ind5val1 < 0.0000 - sigma && ind5val2 > 0.0000 + sigma;
   // Standard Deviation (Close, Simple, 10)
   double ind6buffer[]; CopyBuffer(indHandlers[34][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   double ind6val3  = ind6buffer[0];
   bool   ind6long  = ind6val1 < ind6val2 - sigma && ind6val2 > ind6val3 + sigma;
   bool   ind6short = ind6long;
   // Bulls Power (36), Level: 0.0000
   double ind7buffer[]; CopyBuffer(indHandlers[34][7][0], 0, 1, 3, ind7buffer);
   double ind7val1  = ind7buffer[2];
   bool   ind7long  = ind7val1 > 0.0000 + sigma;
   bool   ind7short = ind7val1 < 0.0000 - sigma;

   return CreateExitSignal(34, ind4long || ind5long || ind6long || ind7long, ind4short || ind5short || ind6short || ind7short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_035()
  {
   // DeMarker (8), Level: 0.56
   double ind0buffer[]; CopyBuffer(indHandlers[35][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   bool   ind0long  = ind0val1 > 0.56 + sigma;
   bool   ind0short = ind0val1 < 1 - 0.56 - sigma;
   // Envelopes (Close, Simple, 3, 0.58)
   double ind1buffer0[]; CopyBuffer(indHandlers[35][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[35][1][0], 1, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   double ind1upBand2 = ind1buffer0[0];
   double ind1dnBand2 = ind1buffer1[0];
   bool   ind1long    = Open(0) > ind1upBand1 + sigma && Open(1) < ind1upBand2 - sigma;
   bool   ind1short   = Open(0) < ind1dnBand1 - sigma && Open(1) > ind1dnBand2 + sigma;
   // Moving Average (Simple, Close, 20, 0)
   double ind2buffer[]; CopyBuffer(indHandlers[35][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;

   return CreateEntrySignal(35, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 55, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_035()
  {
   // Stochastic (9, 6, 2)
   double ind3buffer[]; CopyBuffer(indHandlers[35][3][0], MAIN_LINE, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;

   return CreateExitSignal(35, ind3long, ind3short, 55, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_036()
  {
   // Moving Average (Simple, Close, 24, 0)
   double ind0buffer[]; CopyBuffer(indHandlers[36][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = Open(0) > ind0val1 + sigma && Open(1) < ind0val2 - sigma;
   bool   ind0short = Open(0) < ind0val1 - sigma && Open(1) > ind0val2 + sigma;
   // Stochastic Signal (8, 5, 2)
   double ind1buffer0[]; CopyBuffer(indHandlers[36][1][0], MAIN_LINE,   1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[36][1][0], SIGNAL_LINE, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Moving Average of Oscillator (Close, 17, 41, 10), Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[36][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < 0.0000 - sigma && ind2val2 > 0.0000 + sigma;
   bool   ind2short = ind2val1 > 0.0000 + sigma && ind2val2 < 0.0000 - sigma;

   return CreateEntrySignal(36, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_036()
  {
   // RSI (Close, 10), Level: 26
   double ind3buffer[]; CopyBuffer(indHandlers[36][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < 26 - sigma && ind3val2 > 26 + sigma;
   bool   ind3short = ind3val1 > 100 - 26 + sigma && ind3val2 < 100 - 26 - sigma;
   // Average True Range (1)
   double ind4buffer[]; CopyBuffer(indHandlers[36][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > ind4val2 + sigma;
   bool   ind4short = ind4long;

   return CreateExitSignal(36, ind3long || ind4long, ind3short || ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_037()
  {
   // ADX (38), Level: 34.0
   double ind0buffer[]; CopyBuffer(indHandlers[37][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 34.0 + sigma && ind0val2 < 34.0 - sigma;
   bool   ind0short = ind0long;
   // Moving Average (Simple, Close, 18, 0)
   double ind1buffer[]; CopyBuffer(indHandlers[37][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = Open(0) > ind1val1 + sigma;
   bool   ind1short = Open(0) < ind1val1 - sigma;

   return CreateEntrySignal(37, ind0long && ind1long, ind0short && ind1short, 50, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_037()
  {
   // Williams' Percent Range (29), Level: -65.0
   double ind2buffer[]; CopyBuffer(indHandlers[37][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < -65.0 - sigma && ind2val2 > -65.0 + sigma;
   bool   ind2short = ind2val1 > -100 - -65.0 + sigma && ind2val2 < -100 - -65.0 - sigma;
   // Stochastic (12, 5, 8), Level: 49.0
   double ind3buffer[]; CopyBuffer(indHandlers[37][3][0], MAIN_LINE, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 < 49.0 - sigma;
   bool   ind3short = ind3val1 > 100 - 49.0 + sigma;

   return CreateExitSignal(37, ind2long || ind3long, ind2short || ind3short, 50, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_038()
  {
   // Envelopes (Close, Simple, 46, 0.98)
   double ind0buffer0[]; CopyBuffer(indHandlers[38][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[38][0][0], 1, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;
   bool   ind0short   = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;
   // Moving Average of Oscillator (Close, 5, 33, 4), Level: 0.0000
   double ind1buffer[]; CopyBuffer(indHandlers[38][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 0.0000 + sigma;
   bool   ind1short = ind1val1 < 0.0000 - sigma;

   return CreateEntrySignal(38, ind0long && ind1long, ind0short && ind1short, 14, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_038()
  {
   // Stochastic Signal (10, 7, 4)
   double ind2buffer0[]; CopyBuffer(indHandlers[38][2][0], MAIN_LINE,   1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[38][2][0], SIGNAL_LINE, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   double ind2val3  = ind2buffer0[0];
   double ind2val4  = ind2buffer1[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;

   return CreateExitSignal(38, ind2long, ind2short, 14, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_039()
  {
   // Envelopes (Close, Simple, 48, 0.94)
   double ind0buffer0[]; CopyBuffer(indHandlers[39][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[39][0][0], 1, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) < ind0upBand1 - sigma && Open(1) > ind0upBand2 + sigma;
   bool   ind0short   = Open(0) > ind0dnBand1 + sigma && Open(1) < ind0dnBand2 - sigma;
   // DeMarker (10)
   double ind1buffer[]; CopyBuffer(indHandlers[39][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;

   return CreateEntrySignal(39, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_039()
  {
   // Awesome Oscillator
   double ind2buffer[]; CopyBuffer(indHandlers[39][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;
   // Bears Power (15)
   double ind3buffer[]; CopyBuffer(indHandlers[39][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // Average True Range (17), Level: 7.0000
   double ind4buffer[]; CopyBuffer(indHandlers[39][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > 7.0000 + sigma && ind4val2 < 7.0000 - sigma;
   bool   ind4short = ind4long;
   // Bears Power (26)
   double ind5buffer[]; CopyBuffer(indHandlers[39][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;

   return CreateExitSignal(39, ind2long || ind3long || ind4long || ind5long, ind2short || ind3short || ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_040()
  {
   // Stochastic Signal (8, 2, 5)
   double ind0buffer0[]; CopyBuffer(indHandlers[40][0][0], MAIN_LINE,   1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[40][0][0], SIGNAL_LINE, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer0[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   // Envelopes (Close, Simple, 11, 0.06)
   double ind1buffer0[]; CopyBuffer(indHandlers[40][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[40][1][0], 1, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   double ind1upBand2 = ind1buffer0[0];
   double ind1dnBand2 = ind1buffer1[0];
   bool   ind1long    = Open(0) > ind1upBand1 + sigma && Open(1) < ind1upBand2 - sigma;
   bool   ind1short   = Open(0) < ind1dnBand1 - sigma && Open(1) > ind1dnBand2 + sigma;
   // Momentum (Close, 49)
   double ind2buffer[]; CopyBuffer(indHandlers[40][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;

   return CreateEntrySignal(40, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 100, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_040()
  {
   // Williams' Percent Range (5)
   double ind3buffer[]; CopyBuffer(indHandlers[40][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;

   return CreateExitSignal(40, ind3long, ind3short, 100, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_041()
  {
   // Williams' Percent Range (26), Level: -14.0
   double ind0buffer[]; CopyBuffer(indHandlers[41][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < -14.0 - sigma && ind0val2 > -14.0 + sigma;
   bool   ind0short = ind0val1 > -100 - -14.0 + sigma && ind0val2 < -100 - -14.0 - sigma;
   // Alligator (Smoothed, Median, 7, 6, 6, 4, 4, 3)
   double ind1buffer0[]; CopyBuffer(indHandlers[41][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[41][1][0], 1, 1, 2, ind1buffer1);
   double ind1buffer2[]; CopyBuffer(indHandlers[41][1][0], 2, 1, 2, ind1buffer2);
   double ind1val1  = ind1buffer2[1];
   double ind1val2  = ind1buffer0[1];
   double ind1val3  = ind1buffer2[0];
   double ind1val4  = ind1buffer0[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;

   return CreateEntrySignal(41, ind0long && ind1long, ind0short && ind1short, 89, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_041()
  {
   // MACD (Close, 8, 14, 9)
   double ind2buffer[]; CopyBuffer(indHandlers[41][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   // Average True Range (9)
   double ind3buffer[]; CopyBuffer(indHandlers[41][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3long;
   // MACD Signal (Close, 10, 19, 8)
   double ind4buffer0[]; CopyBuffer(indHandlers[41][4][0], 0, 1, 3, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[41][4][0], 1, 1, 3, ind4buffer1);
   double ind4val1  = ind4buffer0[2] - ind4buffer1[2];
   bool   ind4long  = ind4val1 < 0 - sigma;
   bool   ind4short = ind4val1 > 0 + sigma;
   // Envelopes (Close, Simple, 41, 0.09)
   double ind5buffer0[]; CopyBuffer(indHandlers[41][5][0], 0, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[41][5][0], 1, 1, 2, ind5buffer1);
   double ind5upBand1 = ind5buffer0[1];
   double ind5dnBand1 = ind5buffer1[1];
   double ind5upBand2 = ind5buffer0[0];
   double ind5dnBand2 = ind5buffer1[0];
   bool   ind5long    = Open(0) < ind5dnBand1 - sigma && Open(1) > ind5dnBand2 + sigma;
   bool   ind5short   = Open(0) > ind5upBand1 + sigma && Open(1) < ind5upBand2 - sigma;

   return CreateExitSignal(41, ind2long || ind3long || ind4long || ind5long, ind2short || ind3short || ind4short || ind5short, 89, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_042()
  {
   // Moving Average (Simple, Close, 50, 0)
   double ind0buffer[]; CopyBuffer(indHandlers[42][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = Open(0) < ind0val1 - sigma && Open(1) > ind0val2 + sigma;
   bool   ind0short = Open(0) > ind0val1 + sigma && Open(1) < ind0val2 - sigma;
   // Williams' Percent Range (36), Level: -29.0
   double ind1buffer[]; CopyBuffer(indHandlers[42][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > -29.0 + sigma;
   bool   ind1short = ind1val1 < -100 - -29.0 - sigma;

   return CreateEntrySignal(42, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_042()
  {
   // Stochastic (2, 2, 1), Level: 29.0
   double ind2buffer[]; CopyBuffer(indHandlers[42][2][0], MAIN_LINE, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < 29.0 - sigma && ind2val2 > 29.0 + sigma;
   bool   ind2short = ind2val1 > 100 - 29.0 + sigma && ind2val2 < 100 - 29.0 - sigma;

   return CreateExitSignal(42, ind2long, ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_043()
  {
   // Pin Bar (8, 37)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 8 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 37 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 37 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(43, ind0long, ind0short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_043()
  {
   // RSI (Close, 47)
   double ind1buffer[]; CopyBuffer(indHandlers[43][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;

   return CreateExitSignal(43, ind1long, ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_044()
  {
   // Commodity Channel Index (Typical, 37), Level: 0
   double ind0buffer[]; CopyBuffer(indHandlers[44][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 0 - sigma && ind0val2 > 0 + sigma;
   bool   ind0short = ind0val1 > 0 + sigma && ind0val2 < 0 - sigma;
   // RSI (Close, 27), Level: 52
   double ind1buffer[]; CopyBuffer(indHandlers[44][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 52 + sigma;
   bool   ind1short = ind1val1 < 100 - 52 - sigma;
   // Commodity Channel Index (Typical, 21)
   double ind2buffer[]; CopyBuffer(indHandlers[44][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;

   return CreateEntrySignal(44, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_044()
  {
   // Moving Average (Simple, Close, 29, 0)
   double ind3buffer[]; CopyBuffer(indHandlers[44][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = Open(0) < ind3val1 - sigma && Open(1) > ind3val2 + sigma;
   bool   ind3short = Open(0) > ind3val1 + sigma && Open(1) < ind3val2 - sigma;
   // Envelopes (Close, Simple, 22, 0.76)
   double ind4buffer0[]; CopyBuffer(indHandlers[44][4][0], 0, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[44][4][0], 1, 1, 2, ind4buffer1);
   double ind4upBand1 = ind4buffer0[1];
   double ind4dnBand1 = ind4buffer1[1];
   double ind4upBand2 = ind4buffer0[0];
   double ind4dnBand2 = ind4buffer1[0];
   bool   ind4long    = Open(0) < ind4upBand1 - sigma && Open(1) > ind4upBand2 + sigma;
   bool   ind4short   = Open(0) > ind4dnBand1 + sigma && Open(1) < ind4dnBand2 - sigma;
   // Moving Averages Crossover (Simple, Simple, 7, 34)
   double ind5buffer0[]; CopyBuffer(indHandlers[44][5][0], 0, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[44][5][1], 0, 1, 2, ind5buffer1);
   double ind5val1  = ind5buffer0[1];
   double ind5val2  = ind5buffer1[1];
   bool   ind5long  = ind5val1 > ind5val2 + sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma;
   // Bollinger Bands (Close, 36, 3.31)
   double ind6buffer0[]; CopyBuffer(indHandlers[44][6][0], 1, 1, 2, ind6buffer0);
   double ind6buffer1[]; CopyBuffer(indHandlers[44][6][0], 2, 1, 2, ind6buffer1);
   double ind6upBand1 = ind6buffer0[1];
   double ind6dnBand1 = ind6buffer1[1];
   double ind6upBand2 = ind6buffer0[0];
   double ind6dnBand2 = ind6buffer1[0];
   bool   ind6long    = Open(0) > ind6upBand1 + sigma && Open(1) < ind6upBand2 - sigma;
   bool   ind6short   = Open(0) < ind6dnBand1 - sigma && Open(1) > ind6dnBand2 + sigma;

   return CreateExitSignal(44, ind3long || ind4long || ind5long || ind6long, ind3short || ind4short || ind5short || ind6short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_045()
  {
   // Envelopes (Close, Simple, 14, 0.83)
   double ind0buffer0[]; CopyBuffer(indHandlers[45][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[45][0][0], 1, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;
   bool   ind0short   = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;

   return CreateEntrySignal(45, ind0long, ind0short, 84, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_045()
  {
   // MACD (Close, 11, 18, 9)
   double ind1buffer[]; CopyBuffer(indHandlers[45][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Williams' Percent Range (13), Level: -86.0
   double ind2buffer[]; CopyBuffer(indHandlers[45][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < -86.0 - sigma && ind2val2 > -86.0 + sigma;
   bool   ind2short = ind2val1 > -100 - -86.0 + sigma && ind2val2 < -100 - -86.0 - sigma;
   // ADX (26)
   double ind3buffer[]; CopyBuffer(indHandlers[45][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3long;

   return CreateExitSignal(45, ind1long || ind2long || ind3long, ind1short || ind2short || ind3short, 84, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_046()
  {
   // Bulls Power (31), Level: -26.8000
   double ind0buffer[]; CopyBuffer(indHandlers[46][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < -26.8000 - sigma && ind0val2 > -26.8000 + sigma;
   bool   ind0short = ind0val1 > 26.8000 + sigma && ind0val2 < 26.8000 - sigma;

   return CreateEntrySignal(46, ind0long, ind0short, 21, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_046()
  {
   // ADX (2), Level: 17.0
   double ind1buffer[]; CopyBuffer(indHandlers[46][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 < 17.0 - sigma;
   bool   ind1short = ind1long;
   // Directional Indicators (9)
   double ind2buffer0[]; CopyBuffer(indHandlers[46][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[46][2][0], 2, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   double ind2val3  = ind2buffer0[0];
   double ind2val4  = ind2buffer1[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;

   return CreateExitSignal(46, ind1long || ind2long, ind1short || ind2short, 21, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_047()
  {
   // Pin Bar (9, 34)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 34 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 34 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(47, ind0long, ind0short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_047()
  {
   // MACD Signal (Close, 13, 46, 11)
   double ind1buffer0[]; CopyBuffer(indHandlers[47][1][0], 0, 1, 3, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[47][1][0], 1, 1, 3, ind1buffer1);
   double ind1val1  = ind1buffer0[2] - ind1buffer1[2];
   bool   ind1long  = ind1val1 < 0 - sigma;
   bool   ind1short = ind1val1 > 0 + sigma;
   // Pin Bar (4, 32)

   bool ind2long  = false;
   bool ind2short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 4 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 32 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 32 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind2long  = isBullishPinBar;
      ind2short = isBearishPinBar;
   }
   // Bears Power (47), Level: 0.0000
   double ind3buffer[]; CopyBuffer(indHandlers[47][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < 0.0000 - sigma && ind3val2 > 0.0000 + sigma;
   bool   ind3short = ind3val1 > 0.0000 + sigma && ind3val2 < 0.0000 - sigma;
   // RSI (Close, 20), Level: 41
   double ind4buffer[]; CopyBuffer(indHandlers[47][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 < 41 - sigma;
   bool   ind4short = ind4val1 > 100 - 41 + sigma;

   return CreateExitSignal(47, ind1long || ind2long || ind3long || ind4long, ind1short || ind2short || ind3short || ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_048()
  {
   // Awesome Oscillator
   double ind0buffer[]; CopyBuffer(indHandlers[48][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > ind0val2 + sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma;
   // Moving Averages Crossover (Simple, Simple, 12, 42)
   double ind1buffer0[]; CopyBuffer(indHandlers[48][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[48][1][1], 0, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   double ind1val3  = ind1buffer0[0];
   double ind1val4  = ind1buffer1[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;
   // DeMarker (8)
   double ind2buffer[]; CopyBuffer(indHandlers[48][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;

   return CreateEntrySignal(48, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_048()
  {
   // Moving Average of Oscillator (Close, 17, 43, 10), Level: 0.0000
   double ind3buffer[]; CopyBuffer(indHandlers[48][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 0.0000 + sigma;
   bool   ind3short = ind3val1 < 0.0000 - sigma;
   // Pin Bar (9, 47)

   bool ind4long  = false;
   bool ind4short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 47 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 47 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind4long  = isBullishPinBar;
      ind4short = isBearishPinBar;
   }
   // Envelopes (Close, Simple, 46, 0.55)
   double ind5buffer0[]; CopyBuffer(indHandlers[48][5][0], 0, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[48][5][0], 1, 1, 2, ind5buffer1);
   double ind5upBand1 = ind5buffer0[1];
   double ind5dnBand1 = ind5buffer1[1];
   double ind5upBand2 = ind5buffer0[0];
   double ind5dnBand2 = ind5buffer1[0];
   bool   ind5long    = Open(0) > ind5dnBand1 + sigma && Open(1) < ind5dnBand2 - sigma;
   bool   ind5short   = Open(0) < ind5upBand1 - sigma && Open(1) > ind5upBand2 + sigma;

   return CreateExitSignal(48, ind3long || ind4long || ind5long, ind3short || ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_049()
  {
   // Momentum (Close, 14), Level: 102.0000
   double ind0buffer[]; CopyBuffer(indHandlers[49][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 102.0000 - sigma && ind0val2 > 102.0000 + sigma;
   bool   ind0short = ind0val1 > 200 - 102.0000 + sigma && ind0val2 < 200 - 102.0000 - sigma;

   return CreateEntrySignal(49, ind0long, ind0short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_049()
  {
   // DeMarker (42), Level: 0.72
   double ind1buffer[]; CopyBuffer(indHandlers[49][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < 0.72 - sigma && ind1val2 > 0.72 + sigma;
   bool   ind1short = ind1val1 > 1 - 0.72 + sigma && ind1val2 < 1 - 0.72 - sigma;
   // Stochastic (2, 1, 2)
   double ind2buffer[]; CopyBuffer(indHandlers[49][2][0], MAIN_LINE, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   // Momentum (Close, 44), Level: 104.0000
   double ind3buffer[]; CopyBuffer(indHandlers[49][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < 104.0000 - sigma && ind3val2 > 104.0000 + sigma;
   bool   ind3short = ind3val1 > 200 - 104.0000 + sigma && ind3val2 < 200 - 104.0000 - sigma;

   return CreateExitSignal(49, ind1long || ind2long || ind3long, ind1short || ind2short || ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_050()
  {
   // Bears Power (6), Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[50][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   bool   ind0short = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   // Candle Color (18, 3)
   bool ind1long  = false;
   bool ind1short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 18;

      for (int b = 3 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind1long  = consecutiveBullish >= 3;
      ind1short = consecutiveBearish >= 3;
   }
   // Moving Averages Crossover (Simple, Simple, 24, 25)
   double ind2buffer0[]; CopyBuffer(indHandlers[50][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[50][2][1], 0, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;
   // Accelerator Oscillator, Level: 0.0000
   double ind3buffer[]; CopyBuffer(indHandlers[50][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 0.0000 + sigma;
   bool   ind3short = ind3val1 < 0.0000 - sigma;

   return CreateEntrySignal(50, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_050()
  {
   // Stochastic (7, 3, 2), Level: 92.0
   double ind4buffer[]; CopyBuffer(indHandlers[50][4][0], MAIN_LINE, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 > 92.0 + sigma;
   bool   ind4short = ind4val1 < 100 - 92.0 - sigma;
   // Moving Average (Simple, Close, 38, 0)
   double ind5buffer[]; CopyBuffer(indHandlers[50][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   double ind5val3  = ind5buffer[0];
   bool   ind5long  = ind5val1 < ind5val2 - sigma && ind5val2 > ind5val3 + sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma && ind5val2 < ind5val3 - sigma;
   // Commodity Channel Index (Typical, 35)
   double ind6buffer[]; CopyBuffer(indHandlers[50][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   double ind6val3  = ind6buffer[0];
   bool   ind6long  = ind6val1 < ind6val2 - sigma && ind6val2 > ind6val3 + sigma;
   bool   ind6short = ind6val1 > ind6val2 + sigma && ind6val2 < ind6val3 - sigma;

   return CreateExitSignal(50, ind4long || ind5long || ind6long, ind4short || ind5short || ind6short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_051()
  {
   // Moving Average (Simple, Close, 23, 0)
   double ind0buffer[]; CopyBuffer(indHandlers[51][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = Open(0) < ind0val1 - sigma && Open(1) > ind0val2 + sigma;
   bool   ind0short = Open(0) > ind0val1 + sigma && Open(1) < ind0val2 - sigma;
   // ADX (5), Level: 45.0
   double ind1buffer[]; CopyBuffer(indHandlers[51][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 < 45.0 - sigma;
   bool   ind1short = ind1long;
   // Williams' Percent Range (8)
   double ind2buffer[]; CopyBuffer(indHandlers[51][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;
   // Moving Averages Crossover (Simple, Simple, 18, 26)
   double ind3buffer0[]; CopyBuffer(indHandlers[51][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[51][3][1], 0, 1, 2, ind3buffer1);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer1[1];
   double ind3val3  = ind3buffer0[0];
   double ind3val4  = ind3buffer1[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val3 > ind3val4 + sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma && ind3val3 < ind3val4 - sigma;

   return CreateEntrySignal(51, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_051()
  {
   // Average True Range (42), Level: 19.4000
   double ind4buffer[]; CopyBuffer(indHandlers[51][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 > 19.4000 + sigma;
   bool   ind4short = ind4long;
   // Momentum (Close, 5), Level: 97.0000
   double ind5buffer[]; CopyBuffer(indHandlers[51][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   bool   ind5long  = ind5val1 < 97.0000 - sigma;
   bool   ind5short = ind5val1 > 200 - 97.0000 + sigma;
   // DeMarker (41)
   double ind6buffer[]; CopyBuffer(indHandlers[51][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   bool   ind6long  = ind6val1 < ind6val2 - sigma;
   bool   ind6short = ind6val1 > ind6val2 + sigma;

   return CreateExitSignal(51, ind4long || ind5long || ind6long, ind4short || ind5short || ind6short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_052()
  {
   // Bollinger Bands (Close, 24, 3.90)
   double ind0buffer0[]; CopyBuffer(indHandlers[52][0][0], 1, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[52][0][0], 2, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;
   bool   ind0short   = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;
   // Momentum (Close, 27)
   double ind1buffer[]; CopyBuffer(indHandlers[52][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Commodity Channel Index (Typical, 39), Level: 0
   double ind2buffer[]; CopyBuffer(indHandlers[52][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 > 0 + sigma;
   bool   ind2short = ind2val1 < 0 - sigma;
   // ADX (2), Level: 16.0
   double ind3buffer[]; CopyBuffer(indHandlers[52][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 16.0 + sigma;
   bool   ind3short = ind3long;

   return CreateEntrySignal(52, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 72, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_052()
  {
   // ADX (38), Level: 24.0
   double ind4buffer[]; CopyBuffer(indHandlers[52][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 > 24.0 + sigma;
   bool   ind4short = ind4long;
   // DeMarker (14), Level: 0.98
   double ind5buffer[]; CopyBuffer(indHandlers[52][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < 0.98 - sigma && ind5val2 > 0.98 + sigma;
   bool   ind5short = ind5val1 > 1 - 0.98 + sigma && ind5val2 < 1 - 0.98 - sigma;
   // Standard Deviation (Close, Simple, 49)
   double ind6buffer[]; CopyBuffer(indHandlers[52][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   double ind6val3  = ind6buffer[0];
   bool   ind6long  = ind6val1 > ind6val2 + sigma && ind6val2 < ind6val3 - sigma;
   bool   ind6short = ind6long;

   return CreateExitSignal(52, ind4long || ind5long || ind6long, ind4short || ind5short || ind6short, 72, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_053()
  {
   // RSI (Close, 50), Level: 58
   double ind0buffer[]; CopyBuffer(indHandlers[53][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 58 - sigma && ind0val2 > 58 + sigma;
   bool   ind0short = ind0val1 > 100 - 58 + sigma && ind0val2 < 100 - 58 - sigma;
   // Momentum (Close, 25)
   double ind1buffer[]; CopyBuffer(indHandlers[53][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;

   return CreateEntrySignal(53, ind0long && ind1long, ind0short && ind1short, 96, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_053()
  {
   // Bears Power (3)
   double ind2buffer[]; CopyBuffer(indHandlers[53][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;

   return CreateExitSignal(53, ind2long, ind2short, 96, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_054()
  {
   // Accelerator Oscillator, Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[54][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   // Bollinger Bands (Close, 49, 3.36)
   double ind1buffer0[]; CopyBuffer(indHandlers[54][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[54][1][0], 2, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   bool   ind1long  = Open(0) > ind1upBand1 + sigma;
   bool   ind1short = Open(0) < ind1dnBand1 - sigma;

   return CreateEntrySignal(54, ind0long && ind1long, ind0short && ind1short, 29, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_054()
  {
   // Bulls Power (6), Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[54][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 0.0000 - sigma;
   bool   ind2short = ind2val1 > 0.0000 + sigma;
   // Stochastic (12, 4, 8)
   double ind3buffer[]; CopyBuffer(indHandlers[54][3][0], MAIN_LINE, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   // Envelopes (Close, Simple, 42, 0.68)
   double ind4buffer0[]; CopyBuffer(indHandlers[54][4][0], 0, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[54][4][0], 1, 1, 2, ind4buffer1);
   double ind4upBand1 = ind4buffer0[1];
   double ind4dnBand1 = ind4buffer1[1];
   double ind4upBand2 = ind4buffer0[0];
   double ind4dnBand2 = ind4buffer1[0];
   bool   ind4long    = Open(0) > ind4upBand1 + sigma && Open(1) < ind4upBand2 - sigma;
   bool   ind4short   = Open(0) < ind4dnBand1 - sigma && Open(1) > ind4dnBand2 + sigma;

   return CreateExitSignal(54, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 29, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_055()
  {
   // Envelopes (Close, Simple, 48, 0.94)
   double ind0buffer0[]; CopyBuffer(indHandlers[55][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[55][0][0], 1, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) < ind0upBand1 - sigma && Open(1) > ind0upBand2 + sigma;
   bool   ind0short   = Open(0) > ind0dnBand1 + sigma && Open(1) < ind0dnBand2 - sigma;
   // DeMarker (10)
   double ind1buffer[]; CopyBuffer(indHandlers[55][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;

   return CreateEntrySignal(55, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_055()
  {
   // Awesome Oscillator
   double ind2buffer[]; CopyBuffer(indHandlers[55][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;
   // Average True Range (17), Level: 7.0000
   double ind3buffer[]; CopyBuffer(indHandlers[55][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > 7.0000 + sigma && ind3val2 < 7.0000 - sigma;
   bool   ind3short = ind3long;
   // Bears Power (26)
   double ind4buffer[]; CopyBuffer(indHandlers[55][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < ind4val2 - sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma;

   return CreateExitSignal(55, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_056()
  {
   // Bulls Power (47), Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[56][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   // MACD (Close, 15, 42, 9)
   double ind1buffer[]; CopyBuffer(indHandlers[56][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > 0 + sigma && ind1val2 < 0 - sigma;
   bool   ind1short = ind1val1 < 0 - sigma && ind1val2 > 0 + sigma;
   // MACD (Close, 19, 35, 9)
   double ind2buffer[]; CopyBuffer(indHandlers[56][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > 0 + sigma && ind2val2 < 0 - sigma;
   bool   ind2short = ind2val1 < 0 - sigma && ind2val2 > 0 + sigma;

   return CreateEntrySignal(56, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 41, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_056()
  {
   // Accelerator Oscillator, Level: 0.0000
   double ind3buffer[]; CopyBuffer(indHandlers[56][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < 0.0000 - sigma && ind3val2 > 0.0000 + sigma;
   bool   ind3short = ind3val1 > 0.0000 + sigma && ind3val2 < 0.0000 - sigma;
   // DeMarker (16)
   double ind4buffer[]; CopyBuffer(indHandlers[56][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;

   return CreateExitSignal(56, ind3long || ind4long, ind3short || ind4short, 41, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_057()
  {
   // Alligator (Smoothed, Median, 26, 19, 19, 3, 3, 1)
   double ind0buffer0[]; CopyBuffer(indHandlers[57][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[57][0][0], 1, 1, 2, ind0buffer1);
   double ind0buffer2[]; CopyBuffer(indHandlers[57][0][0], 2, 1, 2, ind0buffer2);
   double ind0val1  = ind0buffer1[1];
   double ind0val2  = ind0buffer0[1];
   double ind0val3  = ind0buffer1[0];
   double ind0val4  = ind0buffer0[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   // ADX (27)
   double ind1buffer[]; CopyBuffer(indHandlers[57][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1long;
   // Average True Range (15), Level: 17.1000
   double ind2buffer[]; CopyBuffer(indHandlers[57][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 17.1000 - sigma;
   bool   ind2short = ind2long;

   return CreateEntrySignal(57, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 20, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_057()
  {
   // Moving Average of Oscillator (Close, 20, 36, 10), Level: 6.7000
   double ind3buffer[]; CopyBuffer(indHandlers[57][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 6.7000 + sigma;
   bool   ind3short = ind3val1 < -6.7000 - sigma;

   return CreateExitSignal(57, ind3long, ind3short, 20, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_058()
  {
   // Standard Deviation (Close, Simple, 4), Level: 2.4000
   double ind0buffer[]; CopyBuffer(indHandlers[58][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 2.4000 - sigma && ind0val2 > 2.4000 + sigma;
   bool   ind0short = ind0long;
   // Moving Average (Simple, Close, 48, 0)
   double ind1buffer[]; CopyBuffer(indHandlers[58][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;

   return CreateEntrySignal(58, ind0long && ind1long, ind0short && ind1short, 66, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_058()
  {
   // Bollinger Bands (Close, 24, 2.07)
   double ind2buffer0[]; CopyBuffer(indHandlers[58][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[58][2][0], 2, 1, 2, ind2buffer1);
   double ind2upBand1 = ind2buffer0[1];
   double ind2dnBand1 = ind2buffer1[1];
   bool   ind2long  = Open(0) < ind2dnBand1 - sigma;
   bool   ind2short = Open(0) > ind2upBand1 + sigma;
   // Moving Average (Simple, Close, 42, 0)
   double ind3buffer[]; CopyBuffer(indHandlers[58][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = Open(0) < ind3val1 - sigma && Open(1) > ind3val2 + sigma;
   bool   ind3short = Open(0) > ind3val1 + sigma && Open(1) < ind3val2 - sigma;
   // Alligator (Smoothed, Median, 32, 13, 13, 12, 12, 3)
   double ind4buffer0[]; CopyBuffer(indHandlers[58][4][0], 0, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[58][4][0], 1, 1, 2, ind4buffer1);
   double ind4buffer2[]; CopyBuffer(indHandlers[58][4][0], 2, 1, 2, ind4buffer2);
   double ind4val1  = ind4buffer2[1];
   double ind4val2  = ind4buffer2[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma;

   return CreateExitSignal(58, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 66, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_059()
  {
   // Momentum (Close, 29), Level: 102.0000
   double ind0buffer[]; CopyBuffer(indHandlers[59][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 102.0000 + sigma && ind0val2 < 102.0000 - sigma;
   bool   ind0short = ind0val1 < 200 - 102.0000 - sigma && ind0val2 > 200 - 102.0000 + sigma;
   // Directional Indicators (21)
   double ind1buffer0[]; CopyBuffer(indHandlers[59][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[59][1][0], 2, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;

   return CreateEntrySignal(59, ind0long && ind1long, ind0short && ind1short, 82, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_059()
  {
   // Standard Deviation (Close, Simple, 45)
   double ind2buffer[]; CopyBuffer(indHandlers[59][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2long;
   // Moving Average of Oscillator (Close, 12, 32, 7), Level: 0.0000
   double ind3buffer[]; CopyBuffer(indHandlers[59][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 0.0000 + sigma;
   bool   ind3short = ind3val1 < 0.0000 - sigma;

   return CreateExitSignal(59, ind2long || ind3long, ind2short || ind3short, 82, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_060()
  {
   // Accelerator Oscillator
   double ind0buffer[]; CopyBuffer(indHandlers[60][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > ind0val2 + sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma;
   // Directional Indicators (33)
   double ind1buffer0[]; CopyBuffer(indHandlers[60][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[60][1][0], 2, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   double ind1val3  = ind1buffer0[0];
   double ind1val4  = ind1buffer1[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;
   // Moving Averages Crossover (Simple, Simple, 16, 49)
   double ind2buffer0[]; CopyBuffer(indHandlers[60][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[60][2][1], 0, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;
   // Commodity Channel Index (Typical, 12)
   double ind3buffer[]; CopyBuffer(indHandlers[60][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // Average True Range (17)
   double ind4buffer[]; CopyBuffer(indHandlers[60][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;
   bool   ind4short = ind4long;

   return CreateEntrySignal(60, ind0long && ind1long && ind2long && ind3long && ind4long, ind0short && ind1short && ind2short && ind3short && ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_060()
  {
   // Pin Bar (7, 36)

   bool ind5long  = false;
   bool ind5short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 7 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 36 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 36 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind5long  = isBullishPinBar;
      ind5short = isBearishPinBar;
   }
   // Momentum (Close, 47)
   double ind6buffer[]; CopyBuffer(indHandlers[60][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   bool   ind6long  = ind6val1 > ind6val2 + sigma;
   bool   ind6short = ind6val1 < ind6val2 - sigma;

   return CreateExitSignal(60, ind5long || ind6long, ind5short || ind6short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_061()
  {
   // Candle Color (12, 1)
   bool ind0long  = false;
   bool ind0short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 12;

      for (int b = 1 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind0long  = consecutiveBearish >= 1;
      ind0short = consecutiveBullish >= 1;
   }
   // Williams' Percent Range (25), Level: -39.0
   double ind1buffer[]; CopyBuffer(indHandlers[61][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < -39.0 - sigma && ind1val2 > -39.0 + sigma;
   bool   ind1short = ind1val1 > -100 - -39.0 + sigma && ind1val2 < -100 - -39.0 - sigma;
   // Directional Indicators (32)
   double ind2buffer0[]; CopyBuffer(indHandlers[61][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[61][2][0], 2, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   double ind2val3  = ind2buffer0[0];
   double ind2val4  = ind2buffer1[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;

   return CreateEntrySignal(61, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_061()
  {
   // Bollinger Bands (Close, 14, 1.42)
   double ind3buffer0[]; CopyBuffer(indHandlers[61][3][0], 1, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[61][3][0], 2, 1, 2, ind3buffer1);
   double ind3upBand1 = ind3buffer0[1];
   double ind3dnBand1 = ind3buffer1[1];
   double ind3upBand2 = ind3buffer0[0];
   double ind3dnBand2 = ind3buffer1[0];
   bool   ind3long    = Open(0) > ind3upBand1 + sigma && Open(1) < ind3upBand2 - sigma;
   bool   ind3short   = Open(0) < ind3dnBand1 - sigma && Open(1) > ind3dnBand2 + sigma;
   // Williams' Percent Range (25)
   double ind4buffer[]; CopyBuffer(indHandlers[61][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;

   return CreateExitSignal(61, ind3long || ind4long, ind3short || ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_062()
  {
   // Williams' Percent Range (21), Level: -49.0
   double ind0buffer[]; CopyBuffer(indHandlers[62][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   bool   ind0long  = ind0val1 > -49.0 + sigma;
   bool   ind0short = ind0val1 < -100 - -49.0 - sigma;
   // MACD Signal (Close, 15, 45, 7)
   double ind1buffer0[]; CopyBuffer(indHandlers[62][1][0], 0, 1, 3, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[62][1][0], 1, 1, 3, ind1buffer1);
   double ind1val1  = ind1buffer0[2] - ind1buffer1[2];
   bool   ind1long  = ind1val1 < 0 - sigma;
   bool   ind1short = ind1val1 > 0 + sigma;
   // Awesome Oscillator, Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[62][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < 0.0000 - sigma && ind2val2 > 0.0000 + sigma;
   bool   ind2short = ind2val1 > 0.0000 + sigma && ind2val2 < 0.0000 - sigma;

   return CreateEntrySignal(62, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 79, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_062()
  {
   // Accelerator Oscillator
   double ind3buffer[]; CopyBuffer(indHandlers[62][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;
   // Directional Indicators (1)
   double ind4buffer0[]; CopyBuffer(indHandlers[62][4][0], 1, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[62][4][0], 2, 1, 2, ind4buffer1);
   double ind4val1  = ind4buffer0[1];
   double ind4val2  = ind4buffer1[1];
   bool   ind4long  = ind4val1 < ind4val2 - sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma;
   // Awesome Oscillator
   double ind5buffer[]; CopyBuffer(indHandlers[62][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;

   return CreateExitSignal(62, ind3long || ind4long || ind5long, ind3short || ind4short || ind5short, 79, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_063()
  {
   // Moving Average of Oscillator (Close, 21, 34, 13), Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[63][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   // Momentum (Close, 48)
   double ind1buffer[]; CopyBuffer(indHandlers[63][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Moving Average (Simple, Close, 34, 0)
   double ind2buffer[]; CopyBuffer(indHandlers[63][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = Open(0) > ind2val1 + sigma;
   bool   ind2short = Open(0) < ind2val1 - sigma;
   // Bulls Power (15)
   double ind3buffer[]; CopyBuffer(indHandlers[63][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;

   return CreateEntrySignal(63, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_063()
  {
   // Williams' Percent Range (32), Level: -54.0
   double ind4buffer[]; CopyBuffer(indHandlers[63][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 < -54.0 - sigma;
   bool   ind4short = ind4val1 > -100 - -54.0 + sigma;

   return CreateExitSignal(63, ind4long, ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_064()
  {
   // Bears Power (42)
   double ind0buffer[]; CopyBuffer(indHandlers[64][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < ind0val2 - sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma;
   // Moving Average of Oscillator (Close, 22, 48, 4), Level: 0.0000
   double ind1buffer[]; CopyBuffer(indHandlers[64][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < 0.0000 - sigma && ind1val2 > 0.0000 + sigma;
   bool   ind1short = ind1val1 > 0.0000 + sigma && ind1val2 < 0.0000 - sigma;
   // Moving Averages Crossover (Simple, Simple, 19, 24)
   double ind2buffer0[]; CopyBuffer(indHandlers[64][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[64][2][1], 0, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   double ind2val3  = ind2buffer0[0];
   double ind2val4  = ind2buffer1[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;

   return CreateEntrySignal(64, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_064()
  {
   // Bulls Power (33), Level: 0.0000
   double ind3buffer[]; CopyBuffer(indHandlers[64][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 0.0000 + sigma;
   bool   ind3short = ind3val1 < 0.0000 - sigma;
   // Accelerator Oscillator
   double ind4buffer[]; CopyBuffer(indHandlers[64][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;
   // RSI (Close, 3), Level: 32
   double ind5buffer[]; CopyBuffer(indHandlers[64][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   bool   ind5long  = ind5val1 < 32 - sigma;
   bool   ind5short = ind5val1 > 100 - 32 + sigma;

   return CreateExitSignal(64, ind3long || ind4long || ind5long, ind3short || ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_065()
  {
   // Momentum (Close, 16)
   double ind0buffer[]; CopyBuffer(indHandlers[65][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > ind0val2 + sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma;
   // Moving Averages Crossover (Simple, Simple, 10, 41)
   double ind1buffer0[]; CopyBuffer(indHandlers[65][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[65][1][1], 0, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   double ind1val3  = ind1buffer0[0];
   double ind1val4  = ind1buffer1[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;
   // Williams' Percent Range (12), Level: -17.0
   double ind2buffer[]; CopyBuffer(indHandlers[65][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 > -17.0 + sigma;
   bool   ind2short = ind2val1 < -100 - -17.0 - sigma;
   // Moving Averages Crossover (Simple, Simple, 25, 41)
   double ind3buffer0[]; CopyBuffer(indHandlers[65][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[65][3][1], 0, 1, 2, ind3buffer1);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer1[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;

   return CreateEntrySignal(65, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 39, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_065()
  {
   // Pin Bar (6, 23)

   bool ind4long  = false;
   bool ind4short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 6 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 23 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 23 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind4long  = isBullishPinBar;
      ind4short = isBearishPinBar;
   }

   return CreateExitSignal(65, ind4long, ind4short, 39, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_066()
  {
   // Pin Bar (10, 47)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 10 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 47 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 47 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(66, ind0long, ind0short, 65, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_066()
  {
   // Awesome Oscillator, Level: -18.9000
   double ind1buffer[]; CopyBuffer(indHandlers[66][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 < -18.9000 - sigma;
   bool   ind1short = ind1val1 > 18.9000 + sigma;
   // ADX (49), Level: 15.0
   double ind2buffer[]; CopyBuffer(indHandlers[66][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < 15.0 - sigma && ind2val2 > 15.0 + sigma;
   bool   ind2short = ind2long;

   return CreateExitSignal(66, ind1long || ind2long, ind1short || ind2short, 65, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_067()
  {
   // RSI (Close, 9), Level: 30
   double ind0buffer[]; CopyBuffer(indHandlers[67][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 30 - sigma && ind0val2 > 30 + sigma;
   bool   ind0short = ind0val1 > 100 - 30 + sigma && ind0val2 < 100 - 30 - sigma;
   // Moving Average (Simple, Close, 33, 0)
   double ind1buffer[]; CopyBuffer(indHandlers[67][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;

   return CreateEntrySignal(67, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_067()
  {
   // MACD Signal (Close, 5, 26, 5)
   double ind2buffer0[]; CopyBuffer(indHandlers[67][2][0], 0, 1, 3, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[67][2][0], 1, 1, 3, ind2buffer1);
   double ind2val1  = ind2buffer0[2] - ind2buffer1[2];
   bool   ind2long  = ind2val1 < 0 - sigma;
   bool   ind2short = ind2val1 > 0 + sigma;

   return CreateExitSignal(67, ind2long, ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_068()
  {
   // Pin Bar (8, 42)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 8 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 42 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 42 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(68, ind0long, ind0short, 70, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_068()
  {
   // Pin Bar (7, 49)

   bool ind1long  = false;
   bool ind1short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 7 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 49 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 49 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind1long  = isBullishPinBar;
      ind1short = isBearishPinBar;
   }
   // DeMarker (27)
   double ind2buffer[]; CopyBuffer(indHandlers[68][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;
   // Alligator (Smoothed, Median, 42, 22, 22, 11, 11, 1)
   double ind3buffer0[]; CopyBuffer(indHandlers[68][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[68][3][0], 1, 1, 2, ind3buffer1);
   double ind3buffer2[]; CopyBuffer(indHandlers[68][3][0], 2, 1, 2, ind3buffer2);
   double ind3val1  = ind3buffer2[1];
   double ind3val2  = ind3buffer0[1];
   double ind3val3  = ind3buffer2[0];
   double ind3val4  = ind3buffer0[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val3 < ind3val4 - sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma && ind3val3 > ind3val4 + sigma;

   return CreateExitSignal(68, ind1long || ind2long || ind3long, ind1short || ind2short || ind3short, 70, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_069()
  {
   // Accelerator Oscillator, Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[69][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   // Standard Deviation (Close, Simple, 12), Level: 9.0000
   double ind1buffer[]; CopyBuffer(indHandlers[69][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 9.0000 + sigma;
   bool   ind1short = ind1long;

   return CreateEntrySignal(69, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_069()
  {
   // ADX (48), Level: 43.0
   double ind2buffer[]; CopyBuffer(indHandlers[69][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 43.0 - sigma;
   bool   ind2short = ind2long;

   return CreateExitSignal(69, ind2long, ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_070()
  {
   // Momentum (Close, 28), Level: 101.0000
   double ind0buffer[]; CopyBuffer(indHandlers[70][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 101.0000 + sigma && ind0val2 < 101.0000 - sigma;
   bool   ind0short = ind0val1 < 200 - 101.0000 - sigma && ind0val2 > 200 - 101.0000 + sigma;
   // Standard Deviation (Close, Simple, 42), Level: 1.0000
   double ind1buffer[]; CopyBuffer(indHandlers[70][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 1.0000 + sigma;
   bool   ind1short = ind1long;

   return CreateEntrySignal(70, ind0long && ind1long, ind0short && ind1short, 15, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_070()
  {
   // Average True Range (24), Level: 10.9000
   double ind2buffer[]; CopyBuffer(indHandlers[70][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < 10.9000 - sigma && ind2val2 > 10.9000 + sigma;
   bool   ind2short = ind2long;
   // Alligator (Smoothed, Median, 15, 7, 7, 5, 5, 3)
   double ind3buffer0[]; CopyBuffer(indHandlers[70][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[70][3][0], 1, 1, 2, ind3buffer1);
   double ind3buffer2[]; CopyBuffer(indHandlers[70][3][0], 2, 1, 2, ind3buffer2);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer0[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateExitSignal(70, ind2long || ind3long, ind2short || ind3short, 15, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_071()
  {
   // Momentum (Close, 35), Level: 98.0000
   double ind0buffer[]; CopyBuffer(indHandlers[71][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 98.0000 - sigma && ind0val2 > 98.0000 + sigma;
   bool   ind0short = ind0val1 > 200 - 98.0000 + sigma && ind0val2 < 200 - 98.0000 - sigma;
   // ADX (50), Level: 43.0
   double ind1buffer[]; CopyBuffer(indHandlers[71][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 < 43.0 - sigma;
   bool   ind1short = ind1long;

   return CreateEntrySignal(71, ind0long && ind1long, ind0short && ind1short, 21, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_071()
  {
   // Accelerator Oscillator, Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[71][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 > 0.0000 + sigma;
   bool   ind2short = ind2val1 < 0.0000 - sigma;
   // Candle Color (25, 2)
   bool ind3long  = false;
   bool ind3short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 25;

      for (int b = 2 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind3long  = consecutiveBullish >= 2;
      ind3short = consecutiveBearish >= 2;
   }
   // Accelerator Oscillator, Level: 0.0000
   double ind4buffer[]; CopyBuffer(indHandlers[71][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 < 0.0000 - sigma;
   bool   ind4short = ind4val1 > 0.0000 + sigma;
   // Bulls Power (5)
   double ind5buffer[]; CopyBuffer(indHandlers[71][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   double ind5val3  = ind5buffer[0];
   bool   ind5long  = ind5val1 > ind5val2 + sigma && ind5val2 < ind5val3 - sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma && ind5val2 > ind5val3 + sigma;

   return CreateExitSignal(71, ind2long || ind3long || ind4long || ind5long, ind2short || ind3short || ind4short || ind5short, 21, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_072()
  {
   // Moving Average (Simple, Close, 33, 0)
   double ind0buffer[]; CopyBuffer(indHandlers[72][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < ind0val2 - sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma;
   // Commodity Channel Index (Typical, 6)
   double ind1buffer[]; CopyBuffer(indHandlers[72][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Bulls Power (22)
   double ind2buffer[]; CopyBuffer(indHandlers[72][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   // Average True Range (17)
   double ind3buffer[]; CopyBuffer(indHandlers[72][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3long;
   // Stochastic (9, 8, 8)
   double ind4buffer[]; CopyBuffer(indHandlers[72][4][0], MAIN_LINE, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;

   return CreateEntrySignal(72, ind0long && ind1long && ind2long && ind3long && ind4long, ind0short && ind1short && ind2short && ind3short && ind4short, 79, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_072()
  {
   // Awesome Oscillator, Level: 0.0000
   double ind5buffer[]; CopyBuffer(indHandlers[72][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < 0.0000 - sigma && ind5val2 > 0.0000 + sigma;
   bool   ind5short = ind5val1 > 0.0000 + sigma && ind5val2 < 0.0000 - sigma;

   return CreateExitSignal(72, ind5long, ind5short, 79, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_073()
  {
   // Directional Indicators (35)
   double ind0buffer0[]; CopyBuffer(indHandlers[73][0][0], 1, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[73][0][0], 2, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer0[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   // Awesome Oscillator
   double ind1buffer[]; CopyBuffer(indHandlers[73][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   // Awesome Oscillator
   double ind2buffer[]; CopyBuffer(indHandlers[73][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   // Momentum (Close, 46)
   double ind3buffer[]; CopyBuffer(indHandlers[73][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;

   return CreateEntrySignal(73, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 99, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_073()
  {
   // RSI (Close, 29), Level: 72
   double ind4buffer[]; CopyBuffer(indHandlers[73][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > 72 + sigma && ind4val2 < 72 - sigma;
   bool   ind4short = ind4val1 < 100 - 72 - sigma && ind4val2 > 100 - 72 + sigma;

   return CreateExitSignal(73, ind4long, ind4short, 99, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_074()
  {
   // Standard Deviation (Close, Simple, 4)
   double ind0buffer[]; CopyBuffer(indHandlers[74][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > ind0val2 + sigma;
   bool   ind0short = ind0long;
   // ADX (35)
   double ind1buffer[]; CopyBuffer(indHandlers[74][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   bool   ind1short = ind1long;
   // MACD (Close, 9, 18, 9)
   double ind2buffer[]; CopyBuffer(indHandlers[74][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   // MACD Signal (Close, 12, 46, 8)
   double ind3buffer0[]; CopyBuffer(indHandlers[74][3][0], 0, 1, 3, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[74][3][0], 1, 1, 3, ind3buffer1);
   double ind3val1  = ind3buffer0[2] - ind3buffer1[2];
   double ind3val2  = ind3buffer0[1] - ind3buffer1[1];
   bool   ind3long  = ind3val1 < 0 - sigma && ind3val2 > 0 + sigma;
   bool   ind3short = ind3val1 > 0 + sigma && ind3val2 < 0 - sigma;

   return CreateEntrySignal(74, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_074()
  {
   // Awesome Oscillator, Level: 0.0000
   double ind4buffer[]; CopyBuffer(indHandlers[74][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > 0.0000 + sigma && ind4val2 < 0.0000 - sigma;
   bool   ind4short = ind4val1 < 0.0000 - sigma && ind4val2 > 0.0000 + sigma;
   // Standard Deviation (Close, Simple, 36)
   double ind5buffer[]; CopyBuffer(indHandlers[74][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5long;
   // Stochastic Signal (16, 14, 11)
   double ind6buffer0[]; CopyBuffer(indHandlers[74][6][0], MAIN_LINE,   1, 2, ind6buffer0);
   double ind6buffer1[]; CopyBuffer(indHandlers[74][6][0], SIGNAL_LINE, 1, 2, ind6buffer1);
   double ind6val1  = ind6buffer0[1];
   double ind6val2  = ind6buffer1[1];
   bool   ind6long  = ind6val1 < ind6val2 - sigma;
   bool   ind6short = ind6val1 > ind6val2 + sigma;

   return CreateExitSignal(74, ind4long || ind5long || ind6long, ind4short || ind5short || ind6short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_075()
  {
   // Average True Range (2), Level: 7.1000
   double ind0buffer[]; CopyBuffer(indHandlers[75][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 7.1000 + sigma && ind0val2 < 7.1000 - sigma;
   bool   ind0short = ind0long;
   // MACD (Close, 14, 29, 9)
   double ind1buffer[]; CopyBuffer(indHandlers[75][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > 0 + sigma && ind1val2 < 0 - sigma;
   bool   ind1short = ind1val1 < 0 - sigma && ind1val2 > 0 + sigma;

   return CreateEntrySignal(75, ind0long && ind1long, ind0short && ind1short, 41, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_075()
  {
   // Pin Bar (8, 34)

   bool ind2long  = false;
   bool ind2short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 8 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 34 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 34 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind2long  = isBullishPinBar;
      ind2short = isBearishPinBar;
   }
   // MACD (Close, 11, 34, 9)
   double ind3buffer[]; CopyBuffer(indHandlers[75][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateExitSignal(75, ind2long || ind3long, ind2short || ind3short, 41, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_076()
  {
   // Momentum (Close, 43), Level: 102.0000
   double ind0buffer[]; CopyBuffer(indHandlers[76][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 102.0000 + sigma && ind0val2 < 102.0000 - sigma;
   bool   ind0short = ind0val1 < 200 - 102.0000 - sigma && ind0val2 > 200 - 102.0000 + sigma;
   // Stochastic (3, 3, 1)
   double ind1buffer[]; CopyBuffer(indHandlers[76][1][0], MAIN_LINE, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;

   return CreateEntrySignal(76, ind0long && ind1long, ind0short && ind1short, 72, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_076()
  {
   // Standard Deviation (Close, Simple, 36)
   double ind2buffer[]; CopyBuffer(indHandlers[76][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2long;
   // Stochastic (12, 5, 8)
   double ind3buffer[]; CopyBuffer(indHandlers[76][3][0], MAIN_LINE, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   // RSI (Close, 6), Level: 50
   double ind4buffer[]; CopyBuffer(indHandlers[76][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > 50 + sigma && ind4val2 < 50 - sigma;
   bool   ind4short = ind4val1 < 100 - 50 - sigma && ind4val2 > 100 - 50 + sigma;

   return CreateExitSignal(76, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 72, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_077()
  {
   // Bulls Power (23)
   double ind0buffer[]; CopyBuffer(indHandlers[77][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < ind0val2 - sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma;
   // Average True Range (35)
   double ind1buffer[]; CopyBuffer(indHandlers[77][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1long;
   // MACD Signal (Close, 17, 32, 6)
   double ind2buffer0[]; CopyBuffer(indHandlers[77][2][0], 0, 1, 3, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[77][2][0], 1, 1, 3, ind2buffer1);
   double ind2val1  = ind2buffer0[2] - ind2buffer1[2];
   double ind2val2  = ind2buffer0[1] - ind2buffer1[1];
   bool   ind2long  = ind2val1 > 0 + sigma && ind2val2 < 0 - sigma;
   bool   ind2short = ind2val1 < 0 - sigma && ind2val2 > 0 + sigma;
   // Candle Color (49, 2)
   bool ind3long  = false;
   bool ind3short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 49;

      for (int b = 2 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind3long  = consecutiveBullish >= 2;
      ind3short = consecutiveBearish >= 2;
   }

   return CreateEntrySignal(77, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_077()
  {
   // Momentum (Close, 35), Level: 103.0000
   double ind4buffer[]; CopyBuffer(indHandlers[77][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 > 103.0000 + sigma;
   bool   ind4short = ind4val1 < 200 - 103.0000 - sigma;
   // Bollinger Bands (Close, 4, 1.01)
   double ind5buffer0[]; CopyBuffer(indHandlers[77][5][0], 1, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[77][5][0], 2, 1, 2, ind5buffer1);
   double ind5upBand1 = ind5buffer0[1];
   double ind5dnBand1 = ind5buffer1[1];
   double ind5upBand2 = ind5buffer0[0];
   double ind5dnBand2 = ind5buffer1[0];
   bool   ind5long    = Open(0) < ind5upBand1 - sigma && Open(1) > ind5upBand2 + sigma;
   bool   ind5short   = Open(0) > ind5dnBand1 + sigma && Open(1) < ind5dnBand2 - sigma;

   return CreateExitSignal(77, ind4long || ind5long, ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_078()
  {
   // Momentum (Close, 19), Level: 102.0000
   double ind0buffer[]; CopyBuffer(indHandlers[78][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 102.0000 + sigma && ind0val2 < 102.0000 - sigma;
   bool   ind0short = ind0val1 < 200 - 102.0000 - sigma && ind0val2 > 200 - 102.0000 + sigma;

   return CreateEntrySignal(78, ind0long, ind0short, 25, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_078()
  {
   // RSI (Close, 38)
   double ind1buffer[]; CopyBuffer(indHandlers[78][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   // Envelopes (Close, Simple, 32, 0.37)
   double ind2buffer0[]; CopyBuffer(indHandlers[78][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[78][2][0], 1, 1, 2, ind2buffer1);
   double ind2upBand1 = ind2buffer0[1];
   double ind2dnBand1 = ind2buffer1[1];
   double ind2upBand2 = ind2buffer0[0];
   double ind2dnBand2 = ind2buffer1[0];
   bool   ind2long    = Open(0) > ind2dnBand1 + sigma && Open(1) < ind2dnBand2 - sigma;
   bool   ind2short   = Open(0) < ind2upBand1 - sigma && Open(1) > ind2upBand2 + sigma;

   return CreateExitSignal(78, ind1long || ind2long, ind1short || ind2short, 25, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_079()
  {
   // Awesome Oscillator, Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[79][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   // Moving Averages Crossover (Simple, Simple, 20, 24)
   double ind1buffer0[]; CopyBuffer(indHandlers[79][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[79][1][1], 0, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   double ind1val3  = ind1buffer0[0];
   double ind1val4  = ind1buffer1[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;
   // Average True Range (14)
   double ind2buffer[]; CopyBuffer(indHandlers[79][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2long;

   return CreateEntrySignal(79, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 86, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_079()
  {
   // Candle Color (24, 1)
   bool ind3long  = false;
   bool ind3short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 24;

      for (int b = 1 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind3long  = consecutiveBearish >= 1;
      ind3short = consecutiveBullish >= 1;
   }

   return CreateExitSignal(79, ind3long, ind3short, 86, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_080()
  {
   // Candle Color (33, 1)
   bool ind0long  = false;
   bool ind0short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 33;

      for (int b = 1 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind0long  = consecutiveBearish >= 1;
      ind0short = consecutiveBullish >= 1;
   }
   // Moving Average of Oscillator (Close, 13, 36, 7), Level: 0.0000
   double ind1buffer[]; CopyBuffer(indHandlers[80][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < 0.0000 - sigma && ind1val2 > 0.0000 + sigma;
   bool   ind1short = ind1val1 > 0.0000 + sigma && ind1val2 < 0.0000 - sigma;
   // MACD Signal (Close, 19, 28, 12)
   double ind2buffer0[]; CopyBuffer(indHandlers[80][2][0], 0, 1, 3, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[80][2][0], 1, 1, 3, ind2buffer1);
   double ind2val1  = ind2buffer0[2] - ind2buffer1[2];
   bool   ind2long  = ind2val1 > 0 + sigma;
   bool   ind2short = ind2val1 < 0 - sigma;
   // Bollinger Bands (Close, 20, 2.98)
   double ind3buffer0[]; CopyBuffer(indHandlers[80][3][0], 1, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[80][3][0], 2, 1, 2, ind3buffer1);
   double ind3upBand1 = ind3buffer0[1];
   double ind3dnBand1 = ind3buffer1[1];
   bool   ind3long  = Open(0) < ind3dnBand1 - sigma;
   bool   ind3short = Open(0) > ind3upBand1 + sigma;

   return CreateEntrySignal(80, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_080()
  {
   // Bears Power (35)
   double ind4buffer[]; CopyBuffer(indHandlers[80][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > ind4val2 + sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma;
   // Stochastic Signal (4, 1, 1)
   double ind5buffer0[]; CopyBuffer(indHandlers[80][5][0], MAIN_LINE,   1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[80][5][0], SIGNAL_LINE, 1, 2, ind5buffer1);
   double ind5val1  = ind5buffer0[1];
   double ind5val2  = ind5buffer1[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;
   // Commodity Channel Index (Typical, 14), Level: 0
   double ind6buffer[]; CopyBuffer(indHandlers[80][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   bool   ind6long  = ind6val1 < 0 - sigma;
   bool   ind6short = ind6val1 > 0 + sigma;

   return CreateExitSignal(80, ind4long || ind5long || ind6long, ind4short || ind5short || ind6short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_081()
  {
   // Accelerator Oscillator, Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[81][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   bool   ind0short = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   // Alligator (Smoothed, Median, 41, 20, 20, 7, 7, 4)
   double ind1buffer0[]; CopyBuffer(indHandlers[81][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[81][1][0], 1, 1, 2, ind1buffer1);
   double ind1buffer2[]; CopyBuffer(indHandlers[81][1][0], 2, 1, 2, ind1buffer2);
   double ind1val1  = ind1buffer1[1];
   double ind1val2  = ind1buffer0[1];
   double ind1val3  = ind1buffer1[0];
   double ind1val4  = ind1buffer0[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;

   return CreateEntrySignal(81, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_081()
  {
   // Moving Average (Simple, Close, 48, 0)
   double ind2buffer[]; CopyBuffer(indHandlers[81][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = Open(0) > ind2val1 + sigma && Open(1) < ind2val2 - sigma;
   bool   ind2short = Open(0) < ind2val1 - sigma && Open(1) > ind2val2 + sigma;
   // RSI (Close, 32)
   double ind3buffer[]; CopyBuffer(indHandlers[81][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // Alligator (Smoothed, Median, 34, 16, 16, 5, 5, 2)
   double ind4buffer0[]; CopyBuffer(indHandlers[81][4][0], 0, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[81][4][0], 1, 1, 2, ind4buffer1);
   double ind4buffer2[]; CopyBuffer(indHandlers[81][4][0], 2, 1, 2, ind4buffer2);
   double ind4val1  = ind4buffer2[1];
   double ind4val2  = ind4buffer0[1];
   double ind4val3  = ind4buffer2[0];
   double ind4val4  = ind4buffer0[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val3 > ind4val4 + sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma && ind4val3 < ind4val4 - sigma;
   // Alligator (Smoothed, Median, 24, 23, 23, 7, 7, 2)
   double ind5buffer0[]; CopyBuffer(indHandlers[81][5][0], 0, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[81][5][0], 1, 1, 2, ind5buffer1);
   double ind5buffer2[]; CopyBuffer(indHandlers[81][5][0], 2, 1, 2, ind5buffer2);
   double ind5val1  = ind5buffer2[1];
   double ind5val2  = ind5buffer2[0];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;

   return CreateExitSignal(81, ind2long || ind3long || ind4long || ind5long, ind2short || ind3short || ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_082()
  {
   // Average True Range (2), Level: 7.1000
   double ind0buffer[]; CopyBuffer(indHandlers[82][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 7.1000 + sigma && ind0val2 < 7.1000 - sigma;
   bool   ind0short = ind0long;
   // MACD (Close, 14, 29, 9)
   double ind1buffer[]; CopyBuffer(indHandlers[82][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > 0 + sigma && ind1val2 < 0 - sigma;
   bool   ind1short = ind1val1 < 0 - sigma && ind1val2 > 0 + sigma;

   return CreateEntrySignal(82, ind0long && ind1long, ind0short && ind1short, 41, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_082()
  {
   // Pin Bar (8, 34)

   bool ind2long  = false;
   bool ind2short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 8 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 34 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 34 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind2long  = isBullishPinBar;
      ind2short = isBearishPinBar;
   }
   // DeMarker (3)
   double ind3buffer[]; CopyBuffer(indHandlers[82][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   // Stochastic (13, 11, 5), Level: 17.0
   double ind4buffer[]; CopyBuffer(indHandlers[82][4][0], MAIN_LINE, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 < 17.0 - sigma;
   bool   ind4short = ind4val1 > 100 - 17.0 + sigma;

   return CreateExitSignal(82, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 41, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_083()
  {
   // Moving Average (Simple, Close, 2, 0)
   double ind0buffer[]; CopyBuffer(indHandlers[83][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   bool   ind0long  = Open(0) > ind0val1 + sigma;
   bool   ind0short = Open(0) < ind0val1 - sigma;
   // Awesome Oscillator
   double ind1buffer[]; CopyBuffer(indHandlers[83][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Moving Averages Crossover (Simple, Simple, 14, 25)
   double ind2buffer0[]; CopyBuffer(indHandlers[83][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[83][2][1], 0, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   double ind2val3  = ind2buffer0[0];
   double ind2val4  = ind2buffer1[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;

   return CreateEntrySignal(83, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 97, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_083()
  {
   // Momentum (Close, 11), Level: 103.0000
   double ind3buffer[]; CopyBuffer(indHandlers[83][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 103.0000 + sigma;
   bool   ind3short = ind3val1 < 200 - 103.0000 - sigma;

   return CreateExitSignal(83, ind3long, ind3short, 97, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_084()
  {
   // RSI (Close, 48), Level: 30
   double ind0buffer[]; CopyBuffer(indHandlers[84][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 30 - sigma && ind0val2 > 30 + sigma;
   bool   ind0short = ind0val1 > 100 - 30 + sigma && ind0val2 < 100 - 30 - sigma;

   return CreateEntrySignal(84, ind0long, ind0short, 58, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_084()
  {
   // RSI (Close, 16)
   double ind1buffer[]; CopyBuffer(indHandlers[84][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   // Moving Average (Simple, Close, 18, 0)
   double ind2buffer[]; CopyBuffer(indHandlers[84][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = Open(0) > ind2val1 + sigma;
   bool   ind2short = Open(0) < ind2val1 - sigma;
   // Envelopes (Close, Simple, 13, 0.63)
   double ind3buffer0[]; CopyBuffer(indHandlers[84][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[84][3][0], 1, 1, 2, ind3buffer1);
   double ind3upBand1 = ind3buffer0[1];
   double ind3dnBand1 = ind3buffer1[1];
   double ind3upBand2 = ind3buffer0[0];
   double ind3dnBand2 = ind3buffer1[0];
   bool   ind3long    = Open(0) < ind3upBand1 - sigma && Open(1) > ind3upBand2 + sigma;
   bool   ind3short   = Open(0) > ind3dnBand1 + sigma && Open(1) < ind3dnBand2 - sigma;
   // Moving Averages Crossover (Simple, Simple, 13, 45)
   double ind4buffer0[]; CopyBuffer(indHandlers[84][4][0], 0, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[84][4][1], 0, 1, 2, ind4buffer1);
   double ind4val1  = ind4buffer0[1];
   double ind4val2  = ind4buffer1[1];
   double ind4val3  = ind4buffer0[0];
   double ind4val4  = ind4buffer1[0];
   bool   ind4long  = ind4val1 > ind4val2 + sigma && ind4val3 < ind4val4 - sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma && ind4val3 > ind4val4 + sigma;

   return CreateExitSignal(84, ind1long || ind2long || ind3long || ind4long, ind1short || ind2short || ind3short || ind4short, 58, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_085()
  {
   // Accelerator Oscillator, Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[85][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   // Standard Deviation (Close, Simple, 12), Level: 9.0000
   double ind1buffer[]; CopyBuffer(indHandlers[85][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 9.0000 + sigma;
   bool   ind1short = ind1long;
   // Commodity Channel Index (Typical, 37), Level: 0
   double ind2buffer[]; CopyBuffer(indHandlers[85][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 0 - sigma;
   bool   ind2short = ind2val1 > 0 + sigma;

   return CreateEntrySignal(85, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_085()
  {
   // ADX (48), Level: 43.0
   double ind3buffer[]; CopyBuffer(indHandlers[85][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 < 43.0 - sigma;
   bool   ind3short = ind3long;

   return CreateExitSignal(85, ind3long, ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_086()
  {
   // Envelopes (Close, Simple, 46, 0.98)
   double ind0buffer0[]; CopyBuffer(indHandlers[86][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[86][0][0], 1, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;
   bool   ind0short   = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;

   return CreateEntrySignal(86, ind0long, ind0short, 14, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_086()
  {
   // Stochastic Signal (10, 7, 4)
   double ind1buffer0[]; CopyBuffer(indHandlers[86][1][0], MAIN_LINE,   1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[86][1][0], SIGNAL_LINE, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   double ind1val3  = ind1buffer0[0];
   double ind1val4  = ind1buffer1[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;

   return CreateExitSignal(86, ind1long, ind1short, 14, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_087()
  {
   // Bulls Power (43), Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[87][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   // Candle Color (34, 2)
   bool ind1long  = false;
   bool ind1short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 34;

      for (int b = 2 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind1long  = consecutiveBullish >= 2;
      ind1short = consecutiveBearish >= 2;
   }
   // Momentum (Close, 44)
   double ind2buffer[]; CopyBuffer(indHandlers[87][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   // Moving Averages Crossover (Simple, Simple, 21, 31)
   double ind3buffer0[]; CopyBuffer(indHandlers[87][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[87][3][1], 0, 1, 2, ind3buffer1);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer1[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;
   // MACD (Close, 9, 20, 9)
   double ind4buffer[]; CopyBuffer(indHandlers[87][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 < 0 - sigma;
   bool   ind4short = ind4val1 > 0 + sigma;

   return CreateEntrySignal(87, ind0long && ind1long && ind2long && ind3long && ind4long, ind0short && ind1short && ind2short && ind3short && ind4short, 52, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_087()
  {
   // Bears Power (41)
   double ind5buffer[]; CopyBuffer(indHandlers[87][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;

   return CreateExitSignal(87, ind5long, ind5short, 52, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_088()
  {
   // ADX (30), Level: 17.0
   double ind0buffer[]; CopyBuffer(indHandlers[88][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   bool   ind0long  = ind0val1 > 17.0 + sigma;
   bool   ind0short = ind0long;
   // Bollinger Bands (Close, 35, 3.39)
   double ind1buffer0[]; CopyBuffer(indHandlers[88][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[88][1][0], 2, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   double ind1upBand2 = ind1buffer0[0];
   double ind1dnBand2 = ind1buffer1[0];
   bool   ind1long    = Open(0) > ind1upBand1 + sigma && Open(1) < ind1upBand2 - sigma;
   bool   ind1short   = Open(0) < ind1dnBand1 - sigma && Open(1) > ind1dnBand2 + sigma;

   return CreateEntrySignal(88, ind0long && ind1long, ind0short && ind1short, 70, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_088()
  {
   // Bears Power (31)
   double ind2buffer[]; CopyBuffer(indHandlers[88][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;

   return CreateExitSignal(88, ind2long, ind2short, 70, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_089()
  {
   // Pin Bar (9, 39)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 39 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 39 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(89, ind0long, ind0short, 67, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_089()
  {
   // Directional Indicators (38)
   double ind1buffer0[]; CopyBuffer(indHandlers[89][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[89][1][0], 2, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   double ind1val3  = ind1buffer0[0];
   double ind1val4  = ind1buffer1[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;

   return CreateExitSignal(89, ind1long, ind1short, 67, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_090()
  {
   // DeMarker (8), Level: 0.56
   double ind0buffer[]; CopyBuffer(indHandlers[90][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   bool   ind0long  = ind0val1 > 0.56 + sigma;
   bool   ind0short = ind0val1 < 1 - 0.56 - sigma;
   // Envelopes (Close, Simple, 3, 0.58)
   double ind1buffer0[]; CopyBuffer(indHandlers[90][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[90][1][0], 1, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   double ind1upBand2 = ind1buffer0[0];
   double ind1dnBand2 = ind1buffer1[0];
   bool   ind1long    = Open(0) > ind1upBand1 + sigma && Open(1) < ind1upBand2 - sigma;
   bool   ind1short   = Open(0) < ind1dnBand1 - sigma && Open(1) > ind1dnBand2 + sigma;
   // Envelopes (Close, Simple, 4, 0.63)
   double ind2buffer0[]; CopyBuffer(indHandlers[90][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[90][2][0], 1, 1, 2, ind2buffer1);
   double ind2upBand1 = ind2buffer0[1];
   double ind2dnBand1 = ind2buffer1[1];
   double ind2upBand2 = ind2buffer0[0];
   double ind2dnBand2 = ind2buffer1[0];
   bool   ind2long    = Open(0) > ind2upBand1 + sigma && Open(1) < ind2upBand2 - sigma;
   bool   ind2short   = Open(0) < ind2dnBand1 - sigma && Open(1) > ind2dnBand2 + sigma;

   return CreateEntrySignal(90, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 99, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_090()
  {
   // Stochastic (9, 6, 2)
   double ind3buffer[]; CopyBuffer(indHandlers[90][3][0], MAIN_LINE, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;

   return CreateExitSignal(90, ind3long, ind3short, 99, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_091()
  {
   // Accelerator Oscillator, Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[91][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   bool   ind0short = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   // Bollinger Bands (Close, 31, 1.91)
   double ind1buffer0[]; CopyBuffer(indHandlers[91][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[91][1][0], 2, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   bool   ind1long  = Open(0) > ind1upBand1 + sigma;
   bool   ind1short = Open(0) < ind1dnBand1 - sigma;
   // Moving Average of Oscillator (Close, 11, 13, 3)
   double ind2buffer[]; CopyBuffer(indHandlers[91][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;

   return CreateEntrySignal(91, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_091()
  {
   // ADX (19)
   double ind3buffer[]; CopyBuffer(indHandlers[91][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   bool   ind3short = ind3long;
   // DeMarker (40), Level: 0.89
   double ind4buffer[]; CopyBuffer(indHandlers[91][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 > 0.89 + sigma;
   bool   ind4short = ind4val1 < 1 - 0.89 - sigma;
   // Williams' Percent Range (27), Level: -60.0
   double ind5buffer[]; CopyBuffer(indHandlers[91][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   bool   ind5long  = ind5val1 < -60.0 - sigma;
   bool   ind5short = ind5val1 > -100 - -60.0 + sigma;

   return CreateExitSignal(91, ind3long || ind4long || ind5long, ind3short || ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_092()
  {
   // Bulls Power (9), Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[92][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   // Moving Averages Crossover (Simple, Simple, 12, 42)
   double ind1buffer0[]; CopyBuffer(indHandlers[92][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[92][1][1], 0, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   double ind1val3  = ind1buffer0[0];
   double ind1val4  = ind1buffer1[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;

   return CreateEntrySignal(92, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_092()
  {
   // Momentum (Close, 5)
   double ind2buffer[]; CopyBuffer(indHandlers[92][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;
   // Moving Average of Oscillator (Close, 17, 43, 10), Level: 0.0000
   double ind3buffer[]; CopyBuffer(indHandlers[92][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 0.0000 + sigma;
   bool   ind3short = ind3val1 < 0.0000 - sigma;
   // Pin Bar (9, 47)

   bool ind4long  = false;
   bool ind4short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 47 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 47 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind4long  = isBullishPinBar;
      ind4short = isBearishPinBar;
   }

   return CreateExitSignal(92, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_093()
  {
   // Standard Deviation (Close, Simple, 21)
   double ind0buffer[]; CopyBuffer(indHandlers[93][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   double ind0val3  = ind0buffer[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val2 > ind0val3 + sigma;
   bool   ind0short = ind0long;
   // Moving Averages Crossover (Simple, Simple, 25, 30)
   double ind1buffer0[]; CopyBuffer(indHandlers[93][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[93][1][1], 0, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   double ind1val3  = ind1buffer0[0];
   double ind1val4  = ind1buffer1[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;
   // RSI (Close, 37)
   double ind2buffer[]; CopyBuffer(indHandlers[93][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;

   return CreateEntrySignal(93, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_093()
  {
   // ADX (18)
   double ind3buffer[]; CopyBuffer(indHandlers[93][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   bool   ind3short = ind3long;

   return CreateExitSignal(93, ind3long, ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_094()
  {
   // Bulls Power (33)
   double ind0buffer[]; CopyBuffer(indHandlers[94][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > ind0val2 + sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma;
   // Awesome Oscillator, Level: 0.0000
   double ind1buffer[]; CopyBuffer(indHandlers[94][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 0.0000 + sigma;
   bool   ind1short = ind1val1 < 0.0000 - sigma;
   // Moving Averages Crossover (Simple, Simple, 13, 31)
   double ind2buffer0[]; CopyBuffer(indHandlers[94][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[94][2][1], 0, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   double ind2val3  = ind2buffer0[0];
   double ind2val4  = ind2buffer1[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;
   // Alligator (Smoothed, Median, 33, 14, 14, 3, 3, 1)
   double ind3buffer0[]; CopyBuffer(indHandlers[94][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[94][3][0], 1, 1, 2, ind3buffer1);
   double ind3buffer2[]; CopyBuffer(indHandlers[94][3][0], 2, 1, 2, ind3buffer2);
   double ind3val1  = ind3buffer1[1];
   double ind3val2  = ind3buffer1[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // Stochastic Signal (6, 2, 1)
   double ind4buffer0[]; CopyBuffer(indHandlers[94][4][0], MAIN_LINE,   1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[94][4][0], SIGNAL_LINE, 1, 2, ind4buffer1);
   double ind4val1  = ind4buffer0[1];
   double ind4val2  = ind4buffer1[1];
   double ind4val3  = ind4buffer0[0];
   double ind4val4  = ind4buffer1[0];
   bool   ind4long  = ind4val1 > ind4val2 + sigma && ind4val3 < ind4val4 - sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma && ind4val3 > ind4val4 + sigma;

   return CreateEntrySignal(94, ind0long && ind1long && ind2long && ind3long && ind4long, ind0short && ind1short && ind2short && ind3short && ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_094()
  {
   // Moving Averages Crossover (Simple, Simple, 8, 10)
   double ind5buffer0[]; CopyBuffer(indHandlers[94][5][0], 0, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[94][5][1], 0, 1, 2, ind5buffer1);
   double ind5val1  = ind5buffer0[1];
   double ind5val2  = ind5buffer1[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;
   // Bears Power (9)
   double ind6buffer[]; CopyBuffer(indHandlers[94][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   bool   ind6long  = ind6val1 > ind6val2 + sigma;
   bool   ind6short = ind6val1 < ind6val2 - sigma;
   // Alligator (Smoothed, Median, 20, 12, 12, 9, 9, 4)
   double ind7buffer0[]; CopyBuffer(indHandlers[94][7][0], 0, 1, 2, ind7buffer0);
   double ind7buffer1[]; CopyBuffer(indHandlers[94][7][0], 1, 1, 2, ind7buffer1);
   double ind7buffer2[]; CopyBuffer(indHandlers[94][7][0], 2, 1, 2, ind7buffer2);
   double ind7val1  = ind7buffer0[1];
   double ind7val2  = ind7buffer0[0];
   bool   ind7long  = ind7val1 > ind7val2 + sigma;
   bool   ind7short = ind7val1 < ind7val2 - sigma;

   return CreateExitSignal(94, ind5long || ind6long || ind7long, ind5short || ind6short || ind7short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_095()
  {
   // Accelerator Oscillator, Level: -7.2000
   double ind0buffer[]; CopyBuffer(indHandlers[95][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > -7.2000 + sigma && ind0val2 < -7.2000 - sigma;
   bool   ind0short = ind0val1 < 7.2000 - sigma && ind0val2 > 7.2000 + sigma;

   return CreateEntrySignal(95, ind0long, ind0short, 57, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_095()
  {
   // Moving Average of Oscillator (Close, 12, 43, 4)
   double ind1buffer[]; CopyBuffer(indHandlers[95][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;

   return CreateExitSignal(95, ind1long, ind1short, 57, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_096()
  {
   // Awesome Oscillator, Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[96][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   bool   ind0short = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   // Moving Average (Simple, Close, 35, 0)
   double ind1buffer[]; CopyBuffer(indHandlers[96][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Williams' Percent Range (47)
   double ind2buffer[]; CopyBuffer(indHandlers[96][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   // Commodity Channel Index (Typical, 25)
   double ind3buffer[]; CopyBuffer(indHandlers[96][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateEntrySignal(96, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 86, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_096()
  {
   // Directional Indicators (13)
   double ind4buffer0[]; CopyBuffer(indHandlers[96][4][0], 1, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[96][4][0], 2, 1, 2, ind4buffer1);
   double ind4val1  = ind4buffer0[1];
   double ind4val2  = ind4buffer1[1];
   bool   ind4long  = ind4val1 > ind4val2 + sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma;
   // Momentum (Close, 49), Level: 95.0000
   double ind5buffer[]; CopyBuffer(indHandlers[96][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   bool   ind5long  = ind5val1 < 95.0000 - sigma;
   bool   ind5short = ind5val1 > 200 - 95.0000 + sigma;

   return CreateExitSignal(96, ind4long || ind5long, ind4short || ind5short, 86, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_097()
  {
   // Pin Bar (9, 46)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 46 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 46 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(97, ind0long, ind0short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_097()
  {
   // Moving Average (Simple, Close, 8, 0)
   double ind1buffer[]; CopyBuffer(indHandlers[97][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = Open(0) < ind1val1 - sigma && Open(1) > ind1val2 + sigma;
   bool   ind1short = Open(0) > ind1val1 + sigma && Open(1) < ind1val2 - sigma;

   return CreateExitSignal(97, ind1long, ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_098()
  {
   // Moving Averages Crossover (Simple, Simple, 7, 33)
   double ind0buffer0[]; CopyBuffer(indHandlers[98][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[98][0][1], 0, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer0[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   // Envelopes (Close, Simple, 6, 0.15)
   double ind1buffer0[]; CopyBuffer(indHandlers[98][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[98][1][0], 1, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   double ind1upBand2 = ind1buffer0[0];
   double ind1dnBand2 = ind1buffer1[0];
   bool   ind1long    = Open(0) < ind1upBand1 - sigma && Open(1) > ind1upBand2 + sigma;
   bool   ind1short   = Open(0) > ind1dnBand1 + sigma && Open(1) < ind1dnBand2 - sigma;

   return CreateEntrySignal(98, ind0long && ind1long, ind0short && ind1short, 75, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_098()
  {
   // Pin Bar (8, 21)

   bool ind2long  = false;
   bool ind2short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 8 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 21 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 21 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind2long  = isBullishPinBar;
      ind2short = isBearishPinBar;
   }
   // Stochastic Signal (6, 4, 1)
   double ind3buffer0[]; CopyBuffer(indHandlers[98][3][0], MAIN_LINE,   1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[98][3][0], SIGNAL_LINE, 1, 2, ind3buffer1);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer1[1];
   double ind3val3  = ind3buffer0[0];
   double ind3val4  = ind3buffer1[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val3 > ind3val4 + sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma && ind3val3 < ind3val4 - sigma;
   // Moving Average of Oscillator (Close, 19, 39, 13), Level: 3.1000
   double ind4buffer[]; CopyBuffer(indHandlers[98][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > 3.1000 + sigma && ind4val2 < 3.1000 - sigma;
   bool   ind4short = ind4val1 < -3.1000 - sigma && ind4val2 > -3.1000 + sigma;

   return CreateExitSignal(98, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 75, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_099()
  {
   // Candle Color (8, 3)
   bool ind0long  = false;
   bool ind0short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 8;

      for (int b = 3 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind0long  = consecutiveBullish >= 3;
      ind0short = consecutiveBearish >= 3;
   }
   // Stochastic (5, 2, 3)
   double ind1buffer[]; CopyBuffer(indHandlers[99][1][0], MAIN_LINE, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;

   return CreateEntrySignal(99, ind0long && ind1long, ind0short && ind1short, 69, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_099()
  {
   // Envelopes (Close, Simple, 33, 0.98)
   double ind2buffer0[]; CopyBuffer(indHandlers[99][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[99][2][0], 1, 1, 2, ind2buffer1);
   double ind2upBand1 = ind2buffer0[1];
   double ind2dnBand1 = ind2buffer1[1];
   double ind2upBand2 = ind2buffer0[0];
   double ind2dnBand2 = ind2buffer1[0];
   bool   ind2long    = Open(0) < ind2dnBand1 - sigma && Open(1) > ind2dnBand2 + sigma;
   bool   ind2short   = Open(0) > ind2upBand1 + sigma && Open(1) < ind2upBand2 - sigma;

   return CreateExitSignal(99, ind2long, ind2short, 69, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_100()
  {
   // Accelerator Oscillator, Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[100][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   // Bollinger Bands (Close, 49, 3.36)
   double ind1buffer0[]; CopyBuffer(indHandlers[100][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[100][1][0], 2, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   bool   ind1long  = Open(0) > ind1upBand1 + sigma;
   bool   ind1short = Open(0) < ind1dnBand1 - sigma;

   return CreateEntrySignal(100, ind0long && ind1long, ind0short && ind1short, 29, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_100()
  {
   // Bulls Power (6), Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[100][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 0.0000 - sigma;
   bool   ind2short = ind2val1 > 0.0000 + sigma;
   // Momentum (Close, 33), Level: 101.0000
   double ind3buffer[]; CopyBuffer(indHandlers[100][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < 101.0000 - sigma && ind3val2 > 101.0000 + sigma;
   bool   ind3short = ind3val1 > 200 - 101.0000 + sigma && ind3val2 < 200 - 101.0000 - sigma;

   return CreateExitSignal(100, ind2long || ind3long, ind2short || ind3short, 29, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_101()
  {
   // Envelopes (Close, Simple, 35, 0.98)
   double ind0buffer0[]; CopyBuffer(indHandlers[101][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[101][0][0], 1, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;
   bool   ind0short   = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;
   // Williams' Percent Range (11), Level: -36.0
   double ind1buffer[]; CopyBuffer(indHandlers[101][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > -36.0 + sigma;
   bool   ind1short = ind1val1 < -100 - -36.0 - sigma;

   return CreateEntrySignal(101, ind0long && ind1long, ind0short && ind1short, 35, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_101()
  {
   // Momentum (Close, 28)
   double ind2buffer[]; CopyBuffer(indHandlers[101][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;
   // Awesome Oscillator
   double ind3buffer[]; CopyBuffer(indHandlers[101][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateExitSignal(101, ind2long || ind3long, ind2short || ind3short, 35, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_102()
  {
   // Envelopes (Close, Simple, 37, 0.83)
   double ind0buffer0[]; CopyBuffer(indHandlers[102][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[102][0][0], 1, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;
   bool   ind0short   = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;

   return CreateEntrySignal(102, ind0long, ind0short, 33, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_102()
  {
   // Average True Range (7)
   double ind1buffer[]; CopyBuffer(indHandlers[102][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1long;
   // Accelerator Oscillator
   double ind2buffer[]; CopyBuffer(indHandlers[102][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;
   // Moving Average (Simple, Close, 32, 0)
   double ind3buffer[]; CopyBuffer(indHandlers[102][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateExitSignal(102, ind1long || ind2long || ind3long, ind1short || ind2short || ind3short, 33, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_103()
  {
   // Moving Average (Simple, Close, 31, 0)
   double ind0buffer[]; CopyBuffer(indHandlers[103][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = Open(0) > ind0val1 + sigma && Open(1) < ind0val2 - sigma;
   bool   ind0short = Open(0) < ind0val1 - sigma && Open(1) > ind0val2 + sigma;
   // Accelerator Oscillator, Level: 0.0000
   double ind1buffer[]; CopyBuffer(indHandlers[103][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < 0.0000 - sigma && ind1val2 > 0.0000 + sigma;
   bool   ind1short = ind1val1 > 0.0000 + sigma && ind1val2 < 0.0000 - sigma;

   return CreateEntrySignal(103, ind0long && ind1long, ind0short && ind1short, 95, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_103()
  {
   // Stochastic Signal (2, 1, 1)
   double ind2buffer0[]; CopyBuffer(indHandlers[103][2][0], MAIN_LINE,   1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[103][2][0], SIGNAL_LINE, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;
   // Standard Deviation (Close, Simple, 5), Level: 12.6000
   double ind3buffer[]; CopyBuffer(indHandlers[103][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < 12.6000 - sigma && ind3val2 > 12.6000 + sigma;
   bool   ind3short = ind3long;
   // Commodity Channel Index (Typical, 7), Level: 0
   double ind4buffer[]; CopyBuffer(indHandlers[103][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < 0 - sigma && ind4val2 > 0 + sigma;
   bool   ind4short = ind4val1 > 0 + sigma && ind4val2 < 0 - sigma;
   // Momentum (Close, 11)
   double ind5buffer[]; CopyBuffer(indHandlers[103][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   double ind5val3  = ind5buffer[0];
   bool   ind5long  = ind5val1 > ind5val2 + sigma && ind5val2 < ind5val3 - sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma && ind5val2 > ind5val3 + sigma;

   return CreateExitSignal(103, ind2long || ind3long || ind4long || ind5long, ind2short || ind3short || ind4short || ind5short, 95, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_104()
  {
   // Average True Range (4), Level: 12.1000
   double ind0buffer[]; CopyBuffer(indHandlers[104][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 12.1000 + sigma && ind0val2 < 12.1000 - sigma;
   bool   ind0short = ind0long;
   // Candle Color (44, 1)
   bool ind1long  = false;
   bool ind1short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 44;

      for (int b = 1 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind1long  = consecutiveBullish >= 1;
      ind1short = consecutiveBearish >= 1;
   }

   return CreateEntrySignal(104, ind0long && ind1long, ind0short && ind1short, 94, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_104()
  {
   // ADX (39)
   double ind2buffer[]; CopyBuffer(indHandlers[104][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2long;
   // Awesome Oscillator, Level: 0.0000
   double ind3buffer[]; CopyBuffer(indHandlers[104][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 < 0.0000 - sigma;
   bool   ind3short = ind3val1 > 0.0000 + sigma;

   return CreateExitSignal(104, ind2long || ind3long, ind2short || ind3short, 94, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_105()
  {
   // Accelerator Oscillator, Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[105][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   bool   ind0short = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   // Moving Average (Simple, Close, 48, 0)
   double ind1buffer[]; CopyBuffer(indHandlers[105][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = Open(0) > ind1val1 + sigma && Open(1) < ind1val2 - sigma;
   bool   ind1short = Open(0) < ind1val1 - sigma && Open(1) > ind1val2 + sigma;

   return CreateEntrySignal(105, ind0long && ind1long, ind0short && ind1short, 67, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_105()
  {
   // Candle Color (5, 1)
   bool ind2long  = false;
   bool ind2short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 5;

      for (int b = 1 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind2long  = consecutiveBearish >= 1;
      ind2short = consecutiveBullish >= 1;
   }

   return CreateExitSignal(105, ind2long, ind2short, 67, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_106()
  {
   // Momentum (Close, 34), Level: 102.0000
   double ind0buffer[]; CopyBuffer(indHandlers[106][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 102.0000 + sigma && ind0val2 < 102.0000 - sigma;
   bool   ind0short = ind0val1 < 200 - 102.0000 - sigma && ind0val2 > 200 - 102.0000 + sigma;
   // DeMarker (39)
   double ind1buffer[]; CopyBuffer(indHandlers[106][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;

   return CreateEntrySignal(106, ind0long && ind1long, ind0short && ind1short, 11, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_106()
  {
   // Candle Color (12, 3)
   bool ind2long  = false;
   bool ind2short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 12;

      for (int b = 3 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind2long  = consecutiveBullish >= 3;
      ind2short = consecutiveBearish >= 3;
   }

   return CreateExitSignal(106, ind2long, ind2short, 11, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_107()
  {
   // MACD (Close, 15, 48, 9)
   double ind0buffer[]; CopyBuffer(indHandlers[107][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0 + sigma && ind0val2 < 0 - sigma;
   bool   ind0short = ind0val1 < 0 - sigma && ind0val2 > 0 + sigma;
   // Standard Deviation (Close, Simple, 44)
   double ind1buffer[]; CopyBuffer(indHandlers[107][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   bool   ind1short = ind1long;

   return CreateEntrySignal(107, ind0long && ind1long, ind0short && ind1short, 86, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_107()
  {
   // Moving Averages Crossover (Simple, Simple, 4, 9)
   double ind2buffer0[]; CopyBuffer(indHandlers[107][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[107][2][1], 0, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   double ind2val3  = ind2buffer0[0];
   double ind2val4  = ind2buffer1[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;

   return CreateExitSignal(107, ind2long, ind2short, 86, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_108()
  {
   // Moving Average of Oscillator (Close, 19, 20, 8), Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[108][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   // Bears Power (38)
   double ind1buffer[]; CopyBuffer(indHandlers[108][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // RSI (Close, 19)
   double ind2buffer[]; CopyBuffer(indHandlers[108][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;

   return CreateEntrySignal(108, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 39, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_108()
  {
   // Directional Indicators (41)
   double ind3buffer0[]; CopyBuffer(indHandlers[108][3][0], 1, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[108][3][0], 2, 1, 2, ind3buffer1);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer1[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateExitSignal(108, ind3long, ind3short, 39, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_109()
  {
   // Bears Power (6), Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[109][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   bool   ind0short = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   // Candle Color (18, 3)
   bool ind1long  = false;
   bool ind1short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 18;

      for (int b = 3 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind1long  = consecutiveBullish >= 3;
      ind1short = consecutiveBearish >= 3;
   }
   // Moving Averages Crossover (Simple, Simple, 24, 25)
   double ind2buffer0[]; CopyBuffer(indHandlers[109][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[109][2][1], 0, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;
   // Accelerator Oscillator, Level: 0.0000
   double ind3buffer[]; CopyBuffer(indHandlers[109][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 0.0000 + sigma;
   bool   ind3short = ind3val1 < 0.0000 - sigma;

   return CreateEntrySignal(109, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_109()
  {
   // Stochastic (7, 3, 2), Level: 92.0
   double ind4buffer[]; CopyBuffer(indHandlers[109][4][0], MAIN_LINE, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 > 92.0 + sigma;
   bool   ind4short = ind4val1 < 100 - 92.0 - sigma;
   // Stochastic Signal (16, 12, 4)
   double ind5buffer0[]; CopyBuffer(indHandlers[109][5][0], MAIN_LINE,   1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[109][5][0], SIGNAL_LINE, 1, 2, ind5buffer1);
   double ind5val1  = ind5buffer0[1];
   double ind5val2  = ind5buffer1[1];
   double ind5val3  = ind5buffer0[0];
   double ind5val4  = ind5buffer1[0];
   bool   ind5long  = ind5val1 > ind5val2 + sigma && ind5val3 < ind5val4 - sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma && ind5val3 > ind5val4 + sigma;
   // Commodity Channel Index (Typical, 35)
   double ind6buffer[]; CopyBuffer(indHandlers[109][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   double ind6val3  = ind6buffer[0];
   bool   ind6long  = ind6val1 < ind6val2 - sigma && ind6val2 > ind6val3 + sigma;
   bool   ind6short = ind6val1 > ind6val2 + sigma && ind6val2 < ind6val3 - sigma;

   return CreateExitSignal(109, ind4long || ind5long || ind6long, ind4short || ind5short || ind6short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_110()
  {
   // Envelopes (Close, Simple, 10, 0.13)
   double ind0buffer0[]; CopyBuffer(indHandlers[110][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[110][0][0], 1, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;
   bool   ind0short   = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;
   // Envelopes (Close, Simple, 26, 0.88)
   double ind1buffer0[]; CopyBuffer(indHandlers[110][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[110][1][0], 1, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   double ind1upBand2 = ind1buffer0[0];
   double ind1dnBand2 = ind1buffer1[0];
   bool   ind1long    = Open(0) < ind1dnBand1 - sigma && Open(1) > ind1dnBand2 + sigma;
   bool   ind1short   = Open(0) > ind1upBand1 + sigma && Open(1) < ind1upBand2 - sigma;

   return CreateEntrySignal(110, ind0long && ind1long, ind0short && ind1short, 86, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_110()
  {
   // Momentum (Close, 2), Level: 99.0000
   double ind2buffer[]; CopyBuffer(indHandlers[110][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 99.0000 - sigma;
   bool   ind2short = ind2val1 > 200 - 99.0000 + sigma;
   // Moving Average (Simple, Close, 49, 0)
   double ind3buffer[]; CopyBuffer(indHandlers[110][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;

   return CreateExitSignal(110, ind2long || ind3long, ind2short || ind3short, 86, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_111()
  {
   // Accelerator Oscillator, Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[111][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   // Standard Deviation (Close, Simple, 12), Level: 9.0000
   double ind1buffer[]; CopyBuffer(indHandlers[111][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 9.0000 + sigma;
   bool   ind1short = ind1long;
   // Commodity Channel Index (Typical, 37), Level: 0
   double ind2buffer[]; CopyBuffer(indHandlers[111][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 0 - sigma;
   bool   ind2short = ind2val1 > 0 + sigma;

   return CreateEntrySignal(111, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_111()
  {
   // Candle Color (32, 1)
   bool ind3long  = false;
   bool ind3short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 32;

      for (int b = 1 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind3long  = consecutiveBullish >= 1;
      ind3short = consecutiveBearish >= 1;
   }

   return CreateExitSignal(111, ind3long, ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_112()
  {
   // Alligator (Smoothed, Median, 32, 19, 19, 14, 14, 5)
   double ind0buffer0[]; CopyBuffer(indHandlers[112][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[112][0][0], 1, 1, 2, ind0buffer1);
   double ind0buffer2[]; CopyBuffer(indHandlers[112][0][0], 2, 1, 2, ind0buffer2);
   double ind0val1  = ind0buffer2[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer2[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   // Alligator (Smoothed, Median, 31, 24, 24, 12, 12, 3)
   double ind1buffer0[]; CopyBuffer(indHandlers[112][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[112][1][0], 1, 1, 2, ind1buffer1);
   double ind1buffer2[]; CopyBuffer(indHandlers[112][1][0], 2, 1, 2, ind1buffer2);
   double ind1val1  = ind1buffer1[1];
   double ind1val2  = ind1buffer1[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;

   return CreateEntrySignal(112, ind0long && ind1long, ind0short && ind1short, 52, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_112()
  {
   // Bears Power (35), Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[112][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 0.0000 - sigma;
   bool   ind2short = ind2val1 > 0.0000 + sigma;

   return CreateExitSignal(112, ind2long, ind2short, 52, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_113()
  {
   // Envelopes (Close, Simple, 46, 0.76)
   double ind0buffer0[]; CopyBuffer(indHandlers[113][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[113][0][0], 1, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;
   bool   ind0short   = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;
   // Envelopes (Close, Simple, 29, 0.63)
   double ind1buffer0[]; CopyBuffer(indHandlers[113][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[113][1][0], 1, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   double ind1upBand2 = ind1buffer0[0];
   double ind1dnBand2 = ind1buffer1[0];
   bool   ind1long    = Open(0) > ind1upBand1 + sigma && Open(1) < ind1upBand2 - sigma;
   bool   ind1short   = Open(0) < ind1dnBand1 - sigma && Open(1) > ind1dnBand2 + sigma;
   // Stochastic (13, 4, 1)
   double ind2buffer[]; CopyBuffer(indHandlers[113][2][0], MAIN_LINE, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;

   return CreateEntrySignal(113, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 30, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_113()
  {
   // Stochastic Signal (12, 9, 8)
   double ind3buffer0[]; CopyBuffer(indHandlers[113][3][0], MAIN_LINE,   1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[113][3][0], SIGNAL_LINE, 1, 2, ind3buffer1);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer1[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;
   // Envelopes (Close, Simple, 22, 0.29)
   double ind4buffer0[]; CopyBuffer(indHandlers[113][4][0], 0, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[113][4][0], 1, 1, 2, ind4buffer1);
   double ind4upBand1 = ind4buffer0[1];
   double ind4dnBand1 = ind4buffer1[1];
   bool   ind4long  = Open(0) < ind4dnBand1 - sigma;
   bool   ind4short = Open(0) > ind4upBand1 + sigma;
   // RSI (Close, 19), Level: 64
   double ind5buffer[]; CopyBuffer(indHandlers[113][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   bool   ind5long  = ind5val1 > 64 + sigma;
   bool   ind5short = ind5val1 < 100 - 64 - sigma;

   return CreateExitSignal(113, ind3long || ind4long || ind5long, ind3short || ind4short || ind5short, 30, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_114()
  {
   // MACD (Close, 21, 38, 9)
   double ind0buffer[]; CopyBuffer(indHandlers[114][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0 + sigma && ind0val2 < 0 - sigma;
   bool   ind0short = ind0val1 < 0 - sigma && ind0val2 > 0 + sigma;
   // ADX (31)
   double ind1buffer[]; CopyBuffer(indHandlers[114][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1long;
   // Williams' Percent Range (21)
   double ind2buffer[]; CopyBuffer(indHandlers[114][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;
   // Bears Power (2)
   double ind3buffer[]; CopyBuffer(indHandlers[114][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateEntrySignal(114, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 62, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_114()
  {
   // ADX (28)
   double ind4buffer[]; CopyBuffer(indHandlers[114][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < ind4val2 - sigma;
   bool   ind4short = ind4long;
   // Awesome Oscillator, Level: 0.0000
   double ind5buffer[]; CopyBuffer(indHandlers[114][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < 0.0000 - sigma && ind5val2 > 0.0000 + sigma;
   bool   ind5short = ind5val1 > 0.0000 + sigma && ind5val2 < 0.0000 - sigma;
   // Bulls Power (44), Level: 0.0000
   double ind6buffer[]; CopyBuffer(indHandlers[114][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   bool   ind6long  = ind6val1 > 0.0000 + sigma;
   bool   ind6short = ind6val1 < 0.0000 - sigma;

   return CreateExitSignal(114, ind4long || ind5long || ind6long, ind4short || ind5short || ind6short, 62, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_115()
  {
   // Awesome Oscillator, Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[115][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   bool   ind0short = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   // Moving Average of Oscillator (Close, 5, 38, 12)
   double ind1buffer[]; CopyBuffer(indHandlers[115][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Awesome Oscillator
   double ind2buffer[]; CopyBuffer(indHandlers[115][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;
   // MACD Signal (Close, 5, 47, 8)
   double ind3buffer0[]; CopyBuffer(indHandlers[115][3][0], 0, 1, 3, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[115][3][0], 1, 1, 3, ind3buffer1);
   double ind3val1  = ind3buffer0[2] - ind3buffer1[2];
   bool   ind3long  = ind3val1 > 0 + sigma;
   bool   ind3short = ind3val1 < 0 - sigma;

   return CreateEntrySignal(115, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_115()
  {
   // MACD (Close, 17, 42, 9)
   double ind4buffer[]; CopyBuffer(indHandlers[115][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;

   return CreateExitSignal(115, ind4long, ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_116()
  {
   // Bollinger Bands (Close, 25, 3.89)
   double ind0buffer0[]; CopyBuffer(indHandlers[116][0][0], 1, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[116][0][0], 2, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) < ind0upBand1 - sigma && Open(1) > ind0upBand2 + sigma;
   bool   ind0short   = Open(0) > ind0dnBand1 + sigma && Open(1) < ind0dnBand2 - sigma;

   return CreateEntrySignal(116, ind0long, ind0short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_116()
  {
   // Moving Average of Oscillator (Close, 22, 35, 11), Level: 0.0000
   double ind1buffer[]; CopyBuffer(indHandlers[116][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 < 0.0000 - sigma;
   bool   ind1short = ind1val1 > 0.0000 + sigma;
   // Stochastic Signal (15, 9, 7)
   double ind2buffer0[]; CopyBuffer(indHandlers[116][2][0], MAIN_LINE,   1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[116][2][0], SIGNAL_LINE, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   double ind2val3  = ind2buffer0[0];
   double ind2val4  = ind2buffer1[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;
   // Bollinger Bands (Close, 33, 1.52)
   double ind3buffer0[]; CopyBuffer(indHandlers[116][3][0], 1, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[116][3][0], 2, 1, 2, ind3buffer1);
   double ind3upBand1 = ind3buffer0[1];
   double ind3dnBand1 = ind3buffer1[1];
   bool   ind3long  = Open(0) < ind3dnBand1 - sigma;
   bool   ind3short = Open(0) > ind3upBand1 + sigma;

   return CreateExitSignal(116, ind1long || ind2long || ind3long, ind1short || ind2short || ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_117()
  {
   // Momentum (Close, 45), Level: 100.0000
   double ind0buffer[]; CopyBuffer(indHandlers[117][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 100.0000 - sigma && ind0val2 > 100.0000 + sigma;
   bool   ind0short = ind0val1 > 200 - 100.0000 + sigma && ind0val2 < 200 - 100.0000 - sigma;
   // Standard Deviation (Close, Simple, 28)
   double ind1buffer[]; CopyBuffer(indHandlers[117][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1long;
   // Average True Range (44)
   double ind2buffer[]; CopyBuffer(indHandlers[117][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2long;

   return CreateEntrySignal(117, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_117()
  {
   // RSI (Close, 48)
   double ind3buffer[]; CopyBuffer(indHandlers[117][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // DeMarker (24)
   double ind4buffer[]; CopyBuffer(indHandlers[117][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < ind4val2 - sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma;

   return CreateExitSignal(117, ind3long || ind4long, ind3short || ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_118()
  {
   // ADX (20), Level: 37.0
   double ind0buffer[]; CopyBuffer(indHandlers[118][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 37.0 + sigma && ind0val2 < 37.0 - sigma;
   bool   ind0short = ind0long;
   // Average True Range (4)
   double ind1buffer[]; CopyBuffer(indHandlers[118][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1long;
   // Alligator (Smoothed, Median, 36, 27, 27, 11, 11, 1)
   double ind2buffer0[]; CopyBuffer(indHandlers[118][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[118][2][0], 1, 1, 2, ind2buffer1);
   double ind2buffer2[]; CopyBuffer(indHandlers[118][2][0], 2, 1, 2, ind2buffer2);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer0[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;

   return CreateEntrySignal(118, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 31, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_118()
  {
   // Envelopes (Close, Simple, 10, 0.38)
   double ind3buffer0[]; CopyBuffer(indHandlers[118][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[118][3][0], 1, 1, 2, ind3buffer1);
   double ind3upBand1 = ind3buffer0[1];
   double ind3dnBand1 = ind3buffer1[1];
   double ind3upBand2 = ind3buffer0[0];
   double ind3dnBand2 = ind3buffer1[0];
   bool   ind3long    = Open(0) < ind3dnBand1 - sigma && Open(1) > ind3dnBand2 + sigma;
   bool   ind3short   = Open(0) > ind3upBand1 + sigma && Open(1) < ind3upBand2 - sigma;
   // Williams' Percent Range (36), Level: -3.0
   double ind4buffer[]; CopyBuffer(indHandlers[118][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < -3.0 - sigma && ind4val2 > -3.0 + sigma;
   bool   ind4short = ind4val1 > -100 - -3.0 + sigma && ind4val2 < -100 - -3.0 - sigma;

   return CreateExitSignal(118, ind3long || ind4long, ind3short || ind4short, 31, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_119()
  {
   // Directional Indicators (1)
   double ind0buffer0[]; CopyBuffer(indHandlers[119][0][0], 1, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[119][0][0], 2, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer0[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   // Bears Power (27)
   double ind1buffer[]; CopyBuffer(indHandlers[119][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;

   return CreateEntrySignal(119, ind0long && ind1long, ind0short && ind1short, 54, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_119()
  {
   // Average True Range (30), Level: 0.3000
   double ind2buffer[]; CopyBuffer(indHandlers[119][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < 0.3000 - sigma && ind2val2 > 0.3000 + sigma;
   bool   ind2short = ind2long;
   // DeMarker (1)
   double ind3buffer[]; CopyBuffer(indHandlers[119][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // Average True Range (6), Level: 0.2000
   double ind4buffer[]; CopyBuffer(indHandlers[119][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 < 0.2000 - sigma;
   bool   ind4short = ind4long;

   return CreateExitSignal(119, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 54, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_120()
  {
   // Envelopes (Close, Simple, 7, 0.46)
   double ind0buffer0[]; CopyBuffer(indHandlers[120][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[120][0][0], 1, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;
   bool   ind0short   = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;
   // Commodity Channel Index (Typical, 23)
   double ind1buffer[]; CopyBuffer(indHandlers[120][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;

   return CreateEntrySignal(120, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_120()
  {
   // Bollinger Bands (Close, 12, 1.24)
   double ind2buffer0[]; CopyBuffer(indHandlers[120][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[120][2][0], 2, 1, 2, ind2buffer1);
   double ind2upBand1 = ind2buffer0[1];
   double ind2dnBand1 = ind2buffer1[1];
   double ind2upBand2 = ind2buffer0[0];
   double ind2dnBand2 = ind2buffer1[0];
   bool   ind2long    = Open(0) < ind2dnBand1 - sigma && Open(1) > ind2dnBand2 + sigma;
   bool   ind2short   = Open(0) > ind2upBand1 + sigma && Open(1) < ind2upBand2 - sigma;
   // Moving Average (Simple, Close, 8, 0)
   double ind3buffer[]; CopyBuffer(indHandlers[120][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = Open(0) < ind3val1 - sigma;
   bool   ind3short = Open(0) > ind3val1 + sigma;

   return CreateExitSignal(120, ind2long || ind3long, ind2short || ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_121()
  {
   // Moving Average (Simple, Close, 24, 0)
   double ind0buffer[]; CopyBuffer(indHandlers[121][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = Open(0) > ind0val1 + sigma && Open(1) < ind0val2 - sigma;
   bool   ind0short = Open(0) < ind0val1 - sigma && Open(1) > ind0val2 + sigma;
   // Stochastic Signal (8, 5, 2)
   double ind1buffer0[]; CopyBuffer(indHandlers[121][1][0], MAIN_LINE,   1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[121][1][0], SIGNAL_LINE, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Moving Average of Oscillator (Close, 17, 41, 10), Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[121][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < 0.0000 - sigma && ind2val2 > 0.0000 + sigma;
   bool   ind2short = ind2val1 > 0.0000 + sigma && ind2val2 < 0.0000 - sigma;

   return CreateEntrySignal(121, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_121()
  {
   // Bulls Power (12)
   double ind3buffer[]; CopyBuffer(indHandlers[121][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;

   return CreateExitSignal(121, ind3long, ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_122()
  {
   // Pin Bar (9, 34)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 34 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 34 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(122, ind0long, ind0short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_122()
  {
   // Accelerator Oscillator, Level: 0.0000
   double ind1buffer[]; CopyBuffer(indHandlers[122][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < 0.0000 - sigma && ind1val2 > 0.0000 + sigma;
   bool   ind1short = ind1val1 > 0.0000 + sigma && ind1val2 < 0.0000 - sigma;
   // DeMarker (19), Level: 0.93
   double ind2buffer[]; CopyBuffer(indHandlers[122][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 > 0.93 + sigma;
   bool   ind2short = ind2val1 < 1 - 0.93 - sigma;

   return CreateExitSignal(122, ind1long || ind2long, ind1short || ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_123()
  {
   // Moving Averages Crossover (Simple, Simple, 14, 22)
   double ind0buffer0[]; CopyBuffer(indHandlers[123][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[123][0][1], 0, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer0[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   // ADX (14), Level: 17.0
   double ind1buffer[]; CopyBuffer(indHandlers[123][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 < 17.0 - sigma;
   bool   ind1short = ind1long;

   return CreateEntrySignal(123, ind0long && ind1long, ind0short && ind1short, 65, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_123()
  {
   // Stochastic (6, 3, 1), Level: 41.0
   double ind2buffer[]; CopyBuffer(indHandlers[123][2][0], MAIN_LINE, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 41.0 - sigma;
   bool   ind2short = ind2val1 > 100 - 41.0 + sigma;

   return CreateExitSignal(123, ind2long, ind2short, 65, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_124()
  {
   // Moving Average (Simple, Close, 25, 0)
   double ind0buffer[]; CopyBuffer(indHandlers[124][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = Open(0) > ind0val1 + sigma && Open(1) < ind0val2 - sigma;
   bool   ind0short = Open(0) < ind0val1 - sigma && Open(1) > ind0val2 + sigma;
   // Average True Range (2)
   double ind1buffer[]; CopyBuffer(indHandlers[124][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   bool   ind1short = ind1long;
   // Standard Deviation (Close, Simple, 28)
   double ind2buffer[]; CopyBuffer(indHandlers[124][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2long;

   return CreateEntrySignal(124, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_124()
  {
   // ADX (41)
   double ind3buffer[]; CopyBuffer(indHandlers[124][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3long;
   // Accelerator Oscillator, Level: 0.0000
   double ind4buffer[]; CopyBuffer(indHandlers[124][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > 0.0000 + sigma && ind4val2 < 0.0000 - sigma;
   bool   ind4short = ind4val1 < 0.0000 - sigma && ind4val2 > 0.0000 + sigma;
   // Envelopes (Close, Simple, 32, 0.51)
   double ind5buffer0[]; CopyBuffer(indHandlers[124][5][0], 0, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[124][5][0], 1, 1, 2, ind5buffer1);
   double ind5upBand1 = ind5buffer0[1];
   double ind5dnBand1 = ind5buffer1[1];
   double ind5upBand2 = ind5buffer0[0];
   double ind5dnBand2 = ind5buffer1[0];
   bool   ind5long    = Open(0) > ind5upBand1 + sigma && Open(1) < ind5upBand2 - sigma;
   bool   ind5short   = Open(0) < ind5dnBand1 - sigma && Open(1) > ind5dnBand2 + sigma;
   // Candle Color (11, 5)
   bool ind6long  = false;
   bool ind6short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 11;

      for (int b = 5 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind6long  = consecutiveBearish >= 5;
      ind6short = consecutiveBullish >= 5;
   }

   return CreateExitSignal(124, ind3long || ind4long || ind5long || ind6long, ind3short || ind4short || ind5short || ind6short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_125()
  {
   // Alligator (Smoothed, Median, 19, 6, 6, 3, 3, 1)
   double ind0buffer0[]; CopyBuffer(indHandlers[125][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[125][0][0], 1, 1, 2, ind0buffer1);
   double ind0buffer2[]; CopyBuffer(indHandlers[125][0][0], 2, 1, 2, ind0buffer2);
   double ind0val1  = ind0buffer1[1];
   double ind0val2  = ind0buffer0[1];
   double ind0val3  = ind0buffer1[0];
   double ind0val4  = ind0buffer0[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   // Directional Indicators (10)
   double ind1buffer0[]; CopyBuffer(indHandlers[125][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[125][1][0], 2, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Average True Range (36)
   double ind2buffer[]; CopyBuffer(indHandlers[125][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2long;
   // Accelerator Oscillator
   double ind3buffer[]; CopyBuffer(indHandlers[125][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateEntrySignal(125, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 82, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_125()
  {
   // Bollinger Bands (Close, 41, 2.75)
   double ind4buffer0[]; CopyBuffer(indHandlers[125][4][0], 1, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[125][4][0], 2, 1, 2, ind4buffer1);
   double ind4upBand1 = ind4buffer0[1];
   double ind4dnBand1 = ind4buffer1[1];
   bool   ind4long  = Open(0) > ind4upBand1 + sigma;
   bool   ind4short = Open(0) < ind4dnBand1 - sigma;
   // Alligator (Smoothed, Median, 19, 8, 8, 5, 5, 3)
   double ind5buffer0[]; CopyBuffer(indHandlers[125][5][0], 0, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[125][5][0], 1, 1, 2, ind5buffer1);
   double ind5buffer2[]; CopyBuffer(indHandlers[125][5][0], 2, 1, 2, ind5buffer2);
   double ind5val1  = ind5buffer0[1];
   double ind5val2  = ind5buffer0[0];
   bool   ind5long  = ind5val1 > ind5val2 + sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma;

   return CreateExitSignal(125, ind4long || ind5long, ind4short || ind5short, 82, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_126()
  {
   // Moving Averages Crossover (Simple, Simple, 12, 21)
   double ind0buffer0[]; CopyBuffer(indHandlers[126][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[126][0][1], 0, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer0[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   // Directional Indicators (41)
   double ind1buffer0[]; CopyBuffer(indHandlers[126][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[126][1][0], 2, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Alligator (Smoothed, Median, 10, 6, 6, 5, 5, 1)
   double ind2buffer0[]; CopyBuffer(indHandlers[126][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[126][2][0], 1, 1, 2, ind2buffer1);
   double ind2buffer2[]; CopyBuffer(indHandlers[126][2][0], 2, 1, 2, ind2buffer2);
   double ind2val1  = ind2buffer2[1];
   double ind2val2  = ind2buffer2[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;
   // Commodity Channel Index (Typical, 33), Level: 0
   double ind3buffer[]; CopyBuffer(indHandlers[126][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < 0 - sigma && ind3val2 > 0 + sigma;
   bool   ind3short = ind3val1 > 0 + sigma && ind3val2 < 0 - sigma;

   return CreateEntrySignal(126, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_126()
  {
   // Awesome Oscillator, Level: 0.0000
   double ind4buffer[]; CopyBuffer(indHandlers[126][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 > 0.0000 + sigma;
   bool   ind4short = ind4val1 < 0.0000 - sigma;

   return CreateExitSignal(126, ind4long, ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_127()
  {
   // Average True Range (2), Level: 7.1000
   double ind0buffer[]; CopyBuffer(indHandlers[127][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 7.1000 + sigma && ind0val2 < 7.1000 - sigma;
   bool   ind0short = ind0long;
   // MACD (Close, 14, 29, 9)
   double ind1buffer[]; CopyBuffer(indHandlers[127][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > 0 + sigma && ind1val2 < 0 - sigma;
   bool   ind1short = ind1val1 < 0 - sigma && ind1val2 > 0 + sigma;

   return CreateEntrySignal(127, ind0long && ind1long, ind0short && ind1short, 41, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_127()
  {
   // Pin Bar (8, 34)

   bool ind2long  = false;
   bool ind2short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 8 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 34 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 34 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind2long  = isBullishPinBar;
      ind2short = isBearishPinBar;
   }
   // Awesome Oscillator
   double ind3buffer[]; CopyBuffer(indHandlers[127][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;

   return CreateExitSignal(127, ind2long || ind3long, ind2short || ind3short, 41, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_128()
  {
   // Envelopes (Close, Simple, 49, 0.66)
   double ind0buffer0[]; CopyBuffer(indHandlers[128][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[128][0][0], 1, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;
   bool   ind0short   = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;

   return CreateEntrySignal(128, ind0long, ind0short, 14, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_128()
  {
   // Average True Range (34), Level: 12.6000
   double ind1buffer[]; CopyBuffer(indHandlers[128][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 12.6000 + sigma;
   bool   ind1short = ind1long;
   // Commodity Channel Index (Typical, 48), Level: 0
   double ind2buffer[]; CopyBuffer(indHandlers[128][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > 0 + sigma && ind2val2 < 0 - sigma;
   bool   ind2short = ind2val1 < 0 - sigma && ind2val2 > 0 + sigma;
   // Candle Color (24, 4)
   bool ind3long  = false;
   bool ind3short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 24;

      for (int b = 4 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind3long  = consecutiveBearish >= 4;
      ind3short = consecutiveBullish >= 4;
   }
   // Bulls Power (46), Level: 0.0000
   double ind4buffer[]; CopyBuffer(indHandlers[128][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < 0.0000 - sigma && ind4val2 > 0.0000 + sigma;
   bool   ind4short = ind4val1 > 0.0000 + sigma && ind4val2 < 0.0000 - sigma;

   return CreateExitSignal(128, ind1long || ind2long || ind3long || ind4long, ind1short || ind2short || ind3short || ind4short, 14, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_129()
  {
   // Candle Color (12, 2)
   bool ind0long  = false;
   bool ind0short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 12;

      for (int b = 2 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind0long  = consecutiveBearish >= 2;
      ind0short = consecutiveBullish >= 2;
   }
   // Standard Deviation (Close, Simple, 47), Level: 5.8000
   double ind1buffer[]; CopyBuffer(indHandlers[129][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 < 5.8000 - sigma;
   bool   ind1short = ind1long;
   // MACD Signal (Close, 21, 27, 12)
   double ind2buffer0[]; CopyBuffer(indHandlers[129][2][0], 0, 1, 3, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[129][2][0], 1, 1, 3, ind2buffer1);
   double ind2val1  = ind2buffer0[2] - ind2buffer1[2];
   double ind2val2  = ind2buffer0[1] - ind2buffer1[1];
   bool   ind2long  = ind2val1 < 0 - sigma && ind2val2 > 0 + sigma;
   bool   ind2short = ind2val1 > 0 + sigma && ind2val2 < 0 - sigma;
   // Accelerator Oscillator
   double ind3buffer[]; CopyBuffer(indHandlers[129][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   // Commodity Channel Index (Typical, 41), Level: 0
   double ind4buffer[]; CopyBuffer(indHandlers[129][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 > 0 + sigma;
   bool   ind4short = ind4val1 < 0 - sigma;

   return CreateEntrySignal(129, ind0long && ind1long && ind2long && ind3long && ind4long, ind0short && ind1short && ind2short && ind3short && ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_129()
  {
   // Bears Power (39)
   double ind5buffer[]; CopyBuffer(indHandlers[129][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   double ind5val3  = ind5buffer[0];
   bool   ind5long  = ind5val1 < ind5val2 - sigma && ind5val2 > ind5val3 + sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma && ind5val2 < ind5val3 - sigma;
   // Candle Color (7, 1)
   bool ind6long  = false;
   bool ind6short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 7;

      for (int b = 1 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind6long  = consecutiveBearish >= 1;
      ind6short = consecutiveBullish >= 1;
   }
   // Alligator (Smoothed, Median, 23, 10, 10, 9, 9, 5)
   double ind7buffer0[]; CopyBuffer(indHandlers[129][7][0], 0, 1, 2, ind7buffer0);
   double ind7buffer1[]; CopyBuffer(indHandlers[129][7][0], 1, 1, 2, ind7buffer1);
   double ind7buffer2[]; CopyBuffer(indHandlers[129][7][0], 2, 1, 2, ind7buffer2);
   double ind7val1  = ind7buffer2[1];
   double ind7val2  = ind7buffer0[1];
   double ind7val3  = ind7buffer2[0];
   double ind7val4  = ind7buffer0[0];
   bool   ind7long  = ind7val1 > ind7val2 + sigma && ind7val3 < ind7val4 - sigma;
   bool   ind7short = ind7val1 < ind7val2 - sigma && ind7val3 > ind7val4 + sigma;

   return CreateExitSignal(129, ind5long || ind6long || ind7long, ind5short || ind6short || ind7short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_130()
  {
   // Moving Average of Oscillator (Close, 15, 45, 4)
   double ind0buffer[]; CopyBuffer(indHandlers[130][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < ind0val2 - sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma;
   // Williams' Percent Range (45)
   double ind1buffer[]; CopyBuffer(indHandlers[130][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   // DeMarker (5), Level: 0.38
   double ind2buffer[]; CopyBuffer(indHandlers[130][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > 0.38 + sigma && ind2val2 < 0.38 - sigma;
   bool   ind2short = ind2val1 < 1 - 0.38 - sigma && ind2val2 > 1 - 0.38 + sigma;
   // Stochastic (17, 1, 8)
   double ind3buffer[]; CopyBuffer(indHandlers[130][3][0], MAIN_LINE, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;

   return CreateEntrySignal(130, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_130()
  {
   // Alligator (Smoothed, Median, 33, 11, 11, 9, 9, 3)
   double ind4buffer0[]; CopyBuffer(indHandlers[130][4][0], 0, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[130][4][0], 1, 1, 2, ind4buffer1);
   double ind4buffer2[]; CopyBuffer(indHandlers[130][4][0], 2, 1, 2, ind4buffer2);
   double ind4val1  = ind4buffer2[1];
   double ind4val2  = ind4buffer0[1];
   double ind4val3  = ind4buffer2[0];
   double ind4val4  = ind4buffer0[0];
   bool   ind4long  = ind4val1 > ind4val2 + sigma && ind4val3 < ind4val4 - sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma && ind4val3 > ind4val4 + sigma;
   // Accelerator Oscillator
   double ind5buffer[]; CopyBuffer(indHandlers[130][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;

   return CreateExitSignal(130, ind4long || ind5long, ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_131()
  {
   // MACD Signal (Close, 10, 35, 9)
   double ind0buffer0[]; CopyBuffer(indHandlers[131][0][0], 0, 1, 3, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[131][0][0], 1, 1, 3, ind0buffer1);
   double ind0val1  = ind0buffer0[2] - ind0buffer1[2];
   double ind0val2  = ind0buffer0[1] - ind0buffer1[1];
   bool   ind0long  = ind0val1 < 0 - sigma && ind0val2 > 0 + sigma;
   bool   ind0short = ind0val1 > 0 + sigma && ind0val2 < 0 - sigma;
   // Envelopes (Close, Simple, 39, 0.91)
   double ind1buffer0[]; CopyBuffer(indHandlers[131][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[131][1][0], 1, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   bool   ind1long  = Open(0) < ind1dnBand1 - sigma;
   bool   ind1short = Open(0) > ind1upBand1 + sigma;

   return CreateEntrySignal(131, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_131()
  {
   // Bears Power (29), Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[131][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 0.0000 - sigma;
   bool   ind2short = ind2val1 > 0.0000 + sigma;
   // Moving Averages Crossover (Simple, Simple, 6, 38)
   double ind3buffer0[]; CopyBuffer(indHandlers[131][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[131][3][1], 0, 1, 2, ind3buffer1);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer1[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateExitSignal(131, ind2long || ind3long, ind2short || ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_132()
  {
   // Bears Power (32)
   double ind0buffer[]; CopyBuffer(indHandlers[132][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   double ind0val3  = ind0buffer[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val2 < ind0val3 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val2 > ind0val3 + sigma;
   // Average True Range (1), Level: 17.5000
   double ind1buffer[]; CopyBuffer(indHandlers[132][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > 17.5000 + sigma && ind1val2 < 17.5000 - sigma;
   bool   ind1short = ind1long;

   return CreateEntrySignal(132, ind0long && ind1long, ind0short && ind1short, 37, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_132()
  {
   // Awesome Oscillator, Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[132][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < 0.0000 - sigma && ind2val2 > 0.0000 + sigma;
   bool   ind2short = ind2val1 > 0.0000 + sigma && ind2val2 < 0.0000 - sigma;
   // Stochastic Signal (9, 1, 6)
   double ind3buffer0[]; CopyBuffer(indHandlers[132][3][0], MAIN_LINE,   1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[132][3][0], SIGNAL_LINE, 1, 2, ind3buffer1);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer1[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // Moving Average (Simple, Close, 10, 0)
   double ind4buffer[]; CopyBuffer(indHandlers[132][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < ind4val2 - sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma;

   return CreateExitSignal(132, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 37, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_133()
  {
   // Alligator (Smoothed, Median, 32, 24, 24, 8, 8, 3)
   double ind0buffer0[]; CopyBuffer(indHandlers[133][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[133][0][0], 1, 1, 2, ind0buffer1);
   double ind0buffer2[]; CopyBuffer(indHandlers[133][0][0], 2, 1, 2, ind0buffer2);
   double ind0val1  = ind0buffer1[1];
   double ind0val2  = ind0buffer1[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma;
   // Average True Range (49)
   double ind1buffer[]; CopyBuffer(indHandlers[133][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1long;
   // Envelopes (Close, Simple, 13, 0.43)
   double ind2buffer0[]; CopyBuffer(indHandlers[133][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[133][2][0], 1, 1, 2, ind2buffer1);
   double ind2upBand1 = ind2buffer0[1];
   double ind2dnBand1 = ind2buffer1[1];
   double ind2upBand2 = ind2buffer0[0];
   double ind2dnBand2 = ind2buffer1[0];
   bool   ind2long    = Open(0) > ind2upBand1 + sigma && Open(1) < ind2upBand2 - sigma;
   bool   ind2short   = Open(0) < ind2dnBand1 - sigma && Open(1) > ind2dnBand2 + sigma;

   return CreateEntrySignal(133, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 22, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_133()
  {
   // Candle Color (31, 4)
   bool ind3long  = false;
   bool ind3short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 31;

      for (int b = 4 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind3long  = consecutiveBearish >= 4;
      ind3short = consecutiveBullish >= 4;
   }
   // Alligator (Smoothed, Median, 16, 15, 15, 7, 7, 5)
   double ind4buffer0[]; CopyBuffer(indHandlers[133][4][0], 0, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[133][4][0], 1, 1, 2, ind4buffer1);
   double ind4buffer2[]; CopyBuffer(indHandlers[133][4][0], 2, 1, 2, ind4buffer2);
   double ind4val1  = ind4buffer1[1];
   double ind4val2  = ind4buffer1[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma;

   return CreateExitSignal(133, ind3long || ind4long, ind3short || ind4short, 22, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_134()
  {
   // Pin Bar (8, 37)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 8 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 37 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 37 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(134, ind0long, ind0short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_134()
  {
   // Alligator (Smoothed, Median, 47, 21, 21, 6, 6, 1)
   double ind1buffer0[]; CopyBuffer(indHandlers[134][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[134][1][0], 1, 1, 2, ind1buffer1);
   double ind1buffer2[]; CopyBuffer(indHandlers[134][1][0], 2, 1, 2, ind1buffer2);
   double ind1val1  = ind1buffer1[1];
   double ind1val2  = ind1buffer1[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;

   return CreateExitSignal(134, ind1long, ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_135()
  {
   // Envelopes (Close, Simple, 48, 0.94)
   double ind0buffer0[]; CopyBuffer(indHandlers[135][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[135][0][0], 1, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) < ind0upBand1 - sigma && Open(1) > ind0upBand2 + sigma;
   bool   ind0short   = Open(0) > ind0dnBand1 + sigma && Open(1) < ind0dnBand2 - sigma;
   // Directional Indicators (28)
   double ind1buffer0[]; CopyBuffer(indHandlers[135][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[135][1][0], 2, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Bulls Power (7)
   double ind2buffer[]; CopyBuffer(indHandlers[135][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;
   // MACD (Close, 22, 42, 9)
   double ind3buffer[]; CopyBuffer(indHandlers[135][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateEntrySignal(135, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 71, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_135()
  {
   // Momentum (Close, 32)
   double ind4buffer[]; CopyBuffer(indHandlers[135][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;

   return CreateExitSignal(135, ind4long, ind4short, 71, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_136()
  {
   // Momentum (Close, 34), Level: 100.0000
   double ind0buffer[]; CopyBuffer(indHandlers[136][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 100.0000 + sigma && ind0val2 < 100.0000 - sigma;
   bool   ind0short = ind0val1 < 200 - 100.0000 - sigma && ind0val2 > 200 - 100.0000 + sigma;
   // Bollinger Bands (Close, 42, 2.91)
   double ind1buffer0[]; CopyBuffer(indHandlers[136][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[136][1][0], 2, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   double ind1upBand2 = ind1buffer0[0];
   double ind1dnBand2 = ind1buffer1[0];
   bool   ind1long    = Open(0) > ind1upBand1 + sigma && Open(1) < ind1upBand2 - sigma;
   bool   ind1short   = Open(0) < ind1dnBand1 - sigma && Open(1) > ind1dnBand2 + sigma;
   // Standard Deviation (Close, Simple, 40)
   double ind2buffer[]; CopyBuffer(indHandlers[136][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2long;

   return CreateEntrySignal(136, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 83, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_136()
  {
   // ADX (25), Level: 42.0
   double ind3buffer[]; CopyBuffer(indHandlers[136][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < 42.0 - sigma && ind3val2 > 42.0 + sigma;
   bool   ind3short = ind3long;

   return CreateExitSignal(136, ind3long, ind3short, 83, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_137()
  {
   // Accelerator Oscillator
   double ind0buffer[]; CopyBuffer(indHandlers[137][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   double ind0val3  = ind0buffer[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val2 > ind0val3 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val2 < ind0val3 - sigma;
   // Momentum (Close, 30), Level: 101.0000
   double ind1buffer[]; CopyBuffer(indHandlers[137][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > 101.0000 + sigma && ind1val2 < 101.0000 - sigma;
   bool   ind1short = ind1val1 < 200 - 101.0000 - sigma && ind1val2 > 200 - 101.0000 + sigma;
   // Commodity Channel Index (Typical, 17)
   double ind2buffer[]; CopyBuffer(indHandlers[137][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;

   return CreateEntrySignal(137, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 49, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_137()
  {
   // Directional Indicators (31)
   double ind3buffer0[]; CopyBuffer(indHandlers[137][3][0], 1, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[137][3][0], 2, 1, 2, ind3buffer1);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer1[1];
   double ind3val3  = ind3buffer0[0];
   double ind3val4  = ind3buffer1[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val3 > ind3val4 + sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma && ind3val3 < ind3val4 - sigma;

   return CreateExitSignal(137, ind3long, ind3short, 49, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_138()
  {
   // Bears Power (23)
   double ind0buffer[]; CopyBuffer(indHandlers[138][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > ind0val2 + sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma;
   // Bulls Power (46), Level: 0.0000
   double ind1buffer[]; CopyBuffer(indHandlers[138][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < 0.0000 - sigma && ind1val2 > 0.0000 + sigma;
   bool   ind1short = ind1val1 > 0.0000 + sigma && ind1val2 < 0.0000 - sigma;
   // Momentum (Close, 36)
   double ind2buffer[]; CopyBuffer(indHandlers[138][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   // Alligator (Smoothed, Median, 45, 20, 20, 6, 6, 4)
   double ind3buffer0[]; CopyBuffer(indHandlers[138][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[138][3][0], 1, 1, 2, ind3buffer1);
   double ind3buffer2[]; CopyBuffer(indHandlers[138][3][0], 2, 1, 2, ind3buffer2);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer0[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateEntrySignal(138, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 79, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_138()
  {
   // Average True Range (7), Level: 11.8000
   double ind4buffer[]; CopyBuffer(indHandlers[138][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < 11.8000 - sigma && ind4val2 > 11.8000 + sigma;
   bool   ind4short = ind4long;

   return CreateExitSignal(138, ind4long, ind4short, 79, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_139()
  {
   // Accelerator Oscillator
   double ind0buffer[]; CopyBuffer(indHandlers[139][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   double ind0val3  = ind0buffer[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val2 < ind0val3 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val2 > ind0val3 + sigma;
   // Envelopes (Close, Simple, 28, 0.06)
   double ind1buffer0[]; CopyBuffer(indHandlers[139][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[139][1][0], 1, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   double ind1upBand2 = ind1buffer0[0];
   double ind1dnBand2 = ind1buffer1[0];
   bool   ind1long    = Open(0) > ind1upBand1 + sigma && Open(1) < ind1upBand2 - sigma;
   bool   ind1short   = Open(0) < ind1dnBand1 - sigma && Open(1) > ind1dnBand2 + sigma;
   // Bollinger Bands (Close, 48, 1.34)
   double ind2buffer0[]; CopyBuffer(indHandlers[139][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[139][2][0], 2, 1, 2, ind2buffer1);
   double ind2upBand1 = ind2buffer0[1];
   double ind2dnBand1 = ind2buffer1[1];
   bool   ind2long  = Open(0) > ind2upBand1 + sigma;
   bool   ind2short = Open(0) < ind2dnBand1 - sigma;

   return CreateEntrySignal(139, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 84, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_139()
  {
   // Momentum (Close, 21), Level: 100.0000
   double ind3buffer[]; CopyBuffer(indHandlers[139][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < 100.0000 - sigma && ind3val2 > 100.0000 + sigma;
   bool   ind3short = ind3val1 > 200 - 100.0000 + sigma && ind3val2 < 200 - 100.0000 - sigma;
   // Moving Averages Crossover (Simple, Simple, 18, 21)
   double ind4buffer0[]; CopyBuffer(indHandlers[139][4][0], 0, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[139][4][1], 0, 1, 2, ind4buffer1);
   double ind4val1  = ind4buffer0[1];
   double ind4val2  = ind4buffer1[1];
   double ind4val3  = ind4buffer0[0];
   double ind4val4  = ind4buffer1[0];
   bool   ind4long  = ind4val1 > ind4val2 + sigma && ind4val3 < ind4val4 - sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma && ind4val3 > ind4val4 + sigma;
   // Stochastic Signal (3, 1, 1)
   double ind5buffer0[]; CopyBuffer(indHandlers[139][5][0], MAIN_LINE,   1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[139][5][0], SIGNAL_LINE, 1, 2, ind5buffer1);
   double ind5val1  = ind5buffer0[1];
   double ind5val2  = ind5buffer1[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;

   return CreateExitSignal(139, ind3long || ind4long || ind5long, ind3short || ind4short || ind5short, 84, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_140()
  {
   // Average True Range (3), Level: 15.7000
   double ind0buffer[]; CopyBuffer(indHandlers[140][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 15.7000 + sigma && ind0val2 < 15.7000 - sigma;
   bool   ind0short = ind0long;
   // Alligator (Smoothed, Median, 26, 15, 15, 6, 6, 3)
   double ind1buffer0[]; CopyBuffer(indHandlers[140][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[140][1][0], 1, 1, 2, ind1buffer1);
   double ind1buffer2[]; CopyBuffer(indHandlers[140][1][0], 2, 1, 2, ind1buffer2);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer0[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;

   return CreateEntrySignal(140, ind0long && ind1long, ind0short && ind1short, 14, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_140()
  {
   // Standard Deviation (Close, Simple, 49), Level: 44.4000
   double ind2buffer[]; CopyBuffer(indHandlers[140][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 44.4000 - sigma;
   bool   ind2short = ind2long;
   // Envelopes (Close, Simple, 50, 0.22)
   double ind3buffer0[]; CopyBuffer(indHandlers[140][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[140][3][0], 1, 1, 2, ind3buffer1);
   double ind3upBand1 = ind3buffer0[1];
   double ind3dnBand1 = ind3buffer1[1];
   double ind3upBand2 = ind3buffer0[0];
   double ind3dnBand2 = ind3buffer1[0];
   bool   ind3long    = Open(0) < ind3dnBand1 - sigma && Open(1) > ind3dnBand2 + sigma;
   bool   ind3short   = Open(0) > ind3upBand1 + sigma && Open(1) < ind3upBand2 - sigma;
   // Bears Power (47), Level: 0.0000
   double ind4buffer[]; CopyBuffer(indHandlers[140][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < 0.0000 - sigma && ind4val2 > 0.0000 + sigma;
   bool   ind4short = ind4val1 > 0.0000 + sigma && ind4val2 < 0.0000 - sigma;
   // Pin Bar (9, 22)

   bool ind5long  = false;
   bool ind5short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 22 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 22 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind5long  = isBullishPinBar;
      ind5short = isBearishPinBar;
   }

   return CreateExitSignal(140, ind2long || ind3long || ind4long || ind5long, ind2short || ind3short || ind4short || ind5short, 14, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_141()
  {
   // Bollinger Bands (Close, 4, 3.47)
   double ind0buffer0[]; CopyBuffer(indHandlers[141][0][0], 1, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[141][0][0], 2, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;
   bool   ind0short   = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;

   return CreateEntrySignal(141, ind0long, ind0short, 82, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_141()
  {
   // Envelopes (Close, Simple, 20, 0.88)
   double ind1buffer0[]; CopyBuffer(indHandlers[141][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[141][1][0], 1, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   bool   ind1long  = Open(0) < ind1dnBand1 - sigma;
   bool   ind1short = Open(0) > ind1upBand1 + sigma;
   // Candle Color (50, 4)
   bool ind2long  = false;
   bool ind2short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 50;

      for (int b = 4 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind2long  = consecutiveBullish >= 4;
      ind2short = consecutiveBearish >= 4;
   }

   return CreateExitSignal(141, ind1long || ind2long, ind1short || ind2short, 82, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_142()
  {
   // Momentum (Close, 43), Level: 102.0000
   double ind0buffer[]; CopyBuffer(indHandlers[142][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 102.0000 + sigma && ind0val2 < 102.0000 - sigma;
   bool   ind0short = ind0val1 < 200 - 102.0000 - sigma && ind0val2 > 200 - 102.0000 + sigma;
   // Stochastic (3, 3, 1)
   double ind1buffer[]; CopyBuffer(indHandlers[142][1][0], MAIN_LINE, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;

   return CreateEntrySignal(142, ind0long && ind1long, ind0short && ind1short, 72, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_142()
  {
   // Standard Deviation (Close, Simple, 36)
   double ind2buffer[]; CopyBuffer(indHandlers[142][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2long;
   // RSI (Close, 11), Level: 82
   double ind3buffer[]; CopyBuffer(indHandlers[142][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 82 + sigma;
   bool   ind3short = ind3val1 < 100 - 82 - sigma;
   // RSI (Close, 6), Level: 50
   double ind4buffer[]; CopyBuffer(indHandlers[142][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > 50 + sigma && ind4val2 < 50 - sigma;
   bool   ind4short = ind4val1 < 100 - 50 - sigma && ind4val2 > 100 - 50 + sigma;

   return CreateExitSignal(142, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 72, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_143()
  {
   // Bears Power (4), Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[143][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   // Accelerator Oscillator, Level: 5.7000
   double ind1buffer[]; CopyBuffer(indHandlers[143][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 5.7000 + sigma;
   bool   ind1short = ind1val1 < -5.7000 - sigma;

   return CreateEntrySignal(143, ind0long && ind1long, ind0short && ind1short, 54, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_143()
  {
   // Commodity Channel Index (Typical, 27), Level: 0
   double ind2buffer[]; CopyBuffer(indHandlers[143][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 0 - sigma;
   bool   ind2short = ind2val1 > 0 + sigma;
   // Accelerator Oscillator, Level: 0.0000
   double ind3buffer[]; CopyBuffer(indHandlers[143][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 0.0000 + sigma;
   bool   ind3short = ind3val1 < 0.0000 - sigma;
   // Bollinger Bands (Close, 48, 2.53)
   double ind4buffer0[]; CopyBuffer(indHandlers[143][4][0], 1, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[143][4][0], 2, 1, 2, ind4buffer1);
   double ind4upBand1 = ind4buffer0[1];
   double ind4dnBand1 = ind4buffer1[1];
   bool   ind4long  = Open(0) > ind4upBand1 + sigma;
   bool   ind4short = Open(0) < ind4dnBand1 - sigma;
   // Candle Color (8, 5)
   bool ind5long  = false;
   bool ind5short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 8;

      for (int b = 5 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind5long  = consecutiveBullish >= 5;
      ind5short = consecutiveBearish >= 5;
   }

   return CreateExitSignal(143, ind2long || ind3long || ind4long || ind5long, ind2short || ind3short || ind4short || ind5short, 54, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_144()
  {
   // Pin Bar (9, 37)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 37 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 37 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(144, ind0long, ind0short, 84, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_144()
  {
   // Moving Average (Simple, Close, 28, 0)
   double ind1buffer[]; CopyBuffer(indHandlers[144][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = Open(0) < ind1val1 - sigma && Open(1) > ind1val2 + sigma;
   bool   ind1short = Open(0) > ind1val1 + sigma && Open(1) < ind1val2 - sigma;
   // Accelerator Oscillator, Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[144][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < 0.0000 - sigma && ind2val2 > 0.0000 + sigma;
   bool   ind2short = ind2val1 > 0.0000 + sigma && ind2val2 < 0.0000 - sigma;

   return CreateExitSignal(144, ind1long || ind2long, ind1short || ind2short, 84, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_145()
  {
   // Accelerator Oscillator, Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[145][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   bool   ind0long  = ind0val1 < 0.0000 - sigma;
   bool   ind0short = ind0val1 > 0.0000 + sigma;
   // Williams' Percent Range (34)
   double ind1buffer[]; CopyBuffer(indHandlers[145][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Bollinger Bands (Close, 14, 1.37)
   double ind2buffer0[]; CopyBuffer(indHandlers[145][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[145][2][0], 2, 1, 2, ind2buffer1);
   double ind2upBand1 = ind2buffer0[1];
   double ind2dnBand1 = ind2buffer1[1];
   double ind2upBand2 = ind2buffer0[0];
   double ind2dnBand2 = ind2buffer1[0];
   bool   ind2long    = Open(0) > ind2upBand1 + sigma && Open(1) < ind2upBand2 - sigma;
   bool   ind2short   = Open(0) < ind2dnBand1 - sigma && Open(1) > ind2dnBand2 + sigma;

   return CreateEntrySignal(145, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_145()
  {
   // ADX (46)
   double ind3buffer[]; CopyBuffer(indHandlers[145][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   bool   ind3short = ind3long;

   return CreateExitSignal(145, ind3long, ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_146()
  {
   // Envelopes (Close, Simple, 46, 0.98)
   double ind0buffer0[]; CopyBuffer(indHandlers[146][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[146][0][0], 1, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;
   bool   ind0short   = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;
   // Commodity Channel Index (Typical, 32)
   double ind1buffer[]; CopyBuffer(indHandlers[146][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;

   return CreateEntrySignal(146, ind0long && ind1long, ind0short && ind1short, 14, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_146()
  {
   // Moving Averages Crossover (Simple, Simple, 21, 38)
   double ind2buffer0[]; CopyBuffer(indHandlers[146][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[146][2][1], 0, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;

   return CreateExitSignal(146, ind2long, ind2short, 14, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_147()
  {
   // Alligator (Smoothed, Median, 27, 13, 13, 9, 9, 1)
   double ind0buffer0[]; CopyBuffer(indHandlers[147][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[147][0][0], 1, 1, 2, ind0buffer1);
   double ind0buffer2[]; CopyBuffer(indHandlers[147][0][0], 2, 1, 2, ind0buffer2);
   double ind0val1  = ind0buffer2[1];
   double ind0val2  = ind0buffer0[1];
   double ind0val3  = ind0buffer2[0];
   double ind0val4  = ind0buffer0[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   // Bears Power (3), Level: 0.0000
   double ind1buffer[]; CopyBuffer(indHandlers[147][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 < 0.0000 - sigma;
   bool   ind1short = ind1val1 > 0.0000 + sigma;
   // Moving Average (Simple, Close, 45, 0)
   double ind2buffer[]; CopyBuffer(indHandlers[147][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;
   // Williams' Percent Range (33)
   double ind3buffer[]; CopyBuffer(indHandlers[147][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateEntrySignal(147, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_147()
  {
   // DeMarker (9), Level: 0.05
   double ind4buffer[]; CopyBuffer(indHandlers[147][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 < 0.05 - sigma;
   bool   ind4short = ind4val1 > 1 - 0.05 + sigma;
   // Commodity Channel Index (Typical, 34)
   double ind5buffer[]; CopyBuffer(indHandlers[147][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   double ind5val3  = ind5buffer[0];
   bool   ind5long  = ind5val1 < ind5val2 - sigma && ind5val2 > ind5val3 + sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma && ind5val2 < ind5val3 - sigma;
   // Standard Deviation (Close, Simple, 9), Level: 8.7000
   double ind6buffer[]; CopyBuffer(indHandlers[147][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   bool   ind6long  = ind6val1 > 8.7000 + sigma;
   bool   ind6short = ind6long;
   // Moving Average (Simple, Close, 41, 0)
   double ind7buffer[]; CopyBuffer(indHandlers[147][7][0], 0, 1, 3, ind7buffer);
   double ind7val1  = ind7buffer[2];
   double ind7val2  = ind7buffer[1];
   double ind7val3  = ind7buffer[0];
   bool   ind7long  = ind7val1 < ind7val2 - sigma && ind7val2 > ind7val3 + sigma;
   bool   ind7short = ind7val1 > ind7val2 + sigma && ind7val2 < ind7val3 - sigma;

   return CreateExitSignal(147, ind4long || ind5long || ind6long || ind7long, ind4short || ind5short || ind6short || ind7short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_148()
  {
   // MACD (Close, 11, 27, 9)
   double ind0buffer[]; CopyBuffer(indHandlers[148][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 0 - sigma && ind0val2 > 0 + sigma;
   bool   ind0short = ind0val1 > 0 + sigma && ind0val2 < 0 - sigma;
   // DeMarker (22), Level: 0.44
   double ind1buffer[]; CopyBuffer(indHandlers[148][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 < 0.44 - sigma;
   bool   ind1short = ind1val1 > 1 - 0.44 + sigma;
   // Commodity Channel Index (Typical, 34)
   double ind2buffer[]; CopyBuffer(indHandlers[148][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;

   return CreateEntrySignal(148, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_148()
  {
   // Standard Deviation (Close, Simple, 32)
   double ind3buffer[]; CopyBuffer(indHandlers[148][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   bool   ind3short = ind3long;
   // Stochastic Signal (17, 9, 5)
   double ind4buffer0[]; CopyBuffer(indHandlers[148][4][0], MAIN_LINE,   1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[148][4][0], SIGNAL_LINE, 1, 2, ind4buffer1);
   double ind4val1  = ind4buffer0[1];
   double ind4val2  = ind4buffer1[1];
   double ind4val3  = ind4buffer0[0];
   double ind4val4  = ind4buffer1[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val3 > ind4val4 + sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma && ind4val3 < ind4val4 - sigma;
   // Accelerator Oscillator
   double ind5buffer[]; CopyBuffer(indHandlers[148][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   double ind5val3  = ind5buffer[0];
   bool   ind5long  = ind5val1 > ind5val2 + sigma && ind5val2 < ind5val3 - sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma && ind5val2 > ind5val3 + sigma;
   // Awesome Oscillator
   double ind6buffer[]; CopyBuffer(indHandlers[148][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   bool   ind6long  = ind6val1 < ind6val2 - sigma;
   bool   ind6short = ind6val1 > ind6val2 + sigma;

   return CreateExitSignal(148, ind3long || ind4long || ind5long || ind6long, ind3short || ind4short || ind5short || ind6short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_149()
  {
   // RSI (Close, 50), Level: 30
   double ind0buffer[]; CopyBuffer(indHandlers[149][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 30 - sigma && ind0val2 > 30 + sigma;
   bool   ind0short = ind0val1 > 100 - 30 + sigma && ind0val2 < 100 - 30 - sigma;

   return CreateEntrySignal(149, ind0long, ind0short, 64, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_149()
  {
   // Moving Averages Crossover (Simple, Simple, 13, 32)
   double ind1buffer0[]; CopyBuffer(indHandlers[149][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[149][1][1], 0, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Stochastic (9, 9, 2)
   double ind2buffer[]; CopyBuffer(indHandlers[149][2][0], MAIN_LINE, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;

   return CreateExitSignal(149, ind1long || ind2long, ind1short || ind2short, 64, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_150()
  {
   // Commodity Channel Index (Typical, 9)
   double ind0buffer[]; CopyBuffer(indHandlers[150][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > ind0val2 + sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma;
   // DeMarker (25), Level: 0.63
   double ind1buffer[]; CopyBuffer(indHandlers[150][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 0.63 + sigma;
   bool   ind1short = ind1val1 < 1 - 0.63 - sigma;
   // Average True Range (48), Level: 6.6000
   double ind2buffer[]; CopyBuffer(indHandlers[150][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 6.6000 - sigma;
   bool   ind2short = ind2long;
   // Envelopes (Close, Simple, 13, 0.68)
   double ind3buffer0[]; CopyBuffer(indHandlers[150][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[150][3][0], 1, 1, 2, ind3buffer1);
   double ind3upBand1 = ind3buffer0[1];
   double ind3dnBand1 = ind3buffer1[1];
   double ind3upBand2 = ind3buffer0[0];
   double ind3dnBand2 = ind3buffer1[0];
   bool   ind3long    = Open(0) > ind3upBand1 + sigma && Open(1) < ind3upBand2 - sigma;
   bool   ind3short   = Open(0) < ind3dnBand1 - sigma && Open(1) > ind3dnBand2 + sigma;

   return CreateEntrySignal(150, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 24, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_150()
  {
   // Bulls Power (22), Level: 0.0000
   double ind4buffer[]; CopyBuffer(indHandlers[150][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 < 0.0000 - sigma;
   bool   ind4short = ind4val1 > 0.0000 + sigma;
   // Accelerator Oscillator
   double ind5buffer[]; CopyBuffer(indHandlers[150][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 > ind5val2 + sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma;

   return CreateExitSignal(150, ind4long || ind5long, ind4short || ind5short, 24, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_151()
  {
   // Pin Bar (9, 49)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 49 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 49 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(151, ind0long, ind0short, 66, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_151()
  {
   // Moving Averages Crossover (Simple, Simple, 16, 32)
   double ind1buffer0[]; CopyBuffer(indHandlers[151][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[151][1][1], 0, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   double ind1val3  = ind1buffer0[0];
   double ind1val4  = ind1buffer1[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;
   // DeMarker (27)
   double ind2buffer[]; CopyBuffer(indHandlers[151][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;
   // Stochastic (5, 4, 5), Level: 4.0
   double ind3buffer[]; CopyBuffer(indHandlers[151][3][0], MAIN_LINE, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 < 4.0 - sigma;
   bool   ind3short = ind3val1 > 100 - 4.0 + sigma;

   return CreateExitSignal(151, ind1long || ind2long || ind3long, ind1short || ind2short || ind3short, 66, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_152()
  {
   // Moving Average of Oscillator (Close, 12, 17, 13), Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[152][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   // Alligator (Smoothed, Median, 26, 15, 15, 12, 12, 2)
   double ind1buffer0[]; CopyBuffer(indHandlers[152][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[152][1][0], 1, 1, 2, ind1buffer1);
   double ind1buffer2[]; CopyBuffer(indHandlers[152][1][0], 2, 1, 2, ind1buffer2);
   double ind1val1  = ind1buffer1[1];
   double ind1val2  = ind1buffer1[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Commodity Channel Index (Typical, 2)
   double ind2buffer[]; CopyBuffer(indHandlers[152][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   // Moving Average (Simple, Close, 13, 0)
   double ind3buffer[]; CopyBuffer(indHandlers[152][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = Open(0) > ind3val1 + sigma;
   bool   ind3short = Open(0) < ind3val1 - sigma;
   // MACD Signal (Close, 11, 30, 5)
   double ind4buffer0[]; CopyBuffer(indHandlers[152][4][0], 0, 1, 3, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[152][4][0], 1, 1, 3, ind4buffer1);
   double ind4val1  = ind4buffer0[2] - ind4buffer1[2];
   bool   ind4long  = ind4val1 > 0 + sigma;
   bool   ind4short = ind4val1 < 0 - sigma;

   return CreateEntrySignal(152, ind0long && ind1long && ind2long && ind3long && ind4long, ind0short && ind1short && ind2short && ind3short && ind4short, 98, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_152()
  {
   // DeMarker (43)
   double ind5buffer[]; CopyBuffer(indHandlers[152][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;
   // MACD (Close, 5, 24, 9)
   double ind6buffer[]; CopyBuffer(indHandlers[152][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   bool   ind6long  = ind6val1 < 0 - sigma;
   bool   ind6short = ind6val1 > 0 + sigma;
   // Average True Range (30)
   double ind7buffer[]; CopyBuffer(indHandlers[152][7][0], 0, 1, 3, ind7buffer);
   double ind7val1  = ind7buffer[2];
   double ind7val2  = ind7buffer[1];
   double ind7val3  = ind7buffer[0];
   bool   ind7long  = ind7val1 < ind7val2 - sigma && ind7val2 > ind7val3 + sigma;
   bool   ind7short = ind7long;
   // Bollinger Bands (Close, 19, 1.67)
   double ind8buffer0[]; CopyBuffer(indHandlers[152][8][0], 1, 1, 2, ind8buffer0);
   double ind8buffer1[]; CopyBuffer(indHandlers[152][8][0], 2, 1, 2, ind8buffer1);
   double ind8upBand1 = ind8buffer0[1];
   double ind8dnBand1 = ind8buffer1[1];
   double ind8upBand2 = ind8buffer0[0];
   double ind8dnBand2 = ind8buffer1[0];
   bool   ind8long    = Open(0) < ind8dnBand1 - sigma && Open(1) > ind8dnBand2 + sigma;
   bool   ind8short   = Open(0) > ind8upBand1 + sigma && Open(1) < ind8upBand2 - sigma;

   return CreateExitSignal(152, ind5long || ind6long || ind7long || ind8long, ind5short || ind6short || ind7short || ind8short, 98, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_153()
  {
   // Awesome Oscillator, Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[153][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   // ADX (42)
   double ind1buffer[]; CopyBuffer(indHandlers[153][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1long;
   // Stochastic (4, 2, 3), Level: 69.0
   double ind2buffer[]; CopyBuffer(indHandlers[153][2][0], MAIN_LINE, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < 69.0 - sigma && ind2val2 > 69.0 + sigma;
   bool   ind2short = ind2val1 > 100 - 69.0 + sigma && ind2val2 < 100 - 69.0 - sigma;

   return CreateEntrySignal(153, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_153()
  {
   // Moving Average (Simple, Close, 31, 0)
   double ind3buffer[]; CopyBuffer(indHandlers[153][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   // MACD Signal (Close, 19, 24, 9)
   double ind4buffer0[]; CopyBuffer(indHandlers[153][4][0], 0, 1, 3, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[153][4][0], 1, 1, 3, ind4buffer1);
   double ind4val1  = ind4buffer0[2] - ind4buffer1[2];
   bool   ind4long  = ind4val1 < 0 - sigma;
   bool   ind4short = ind4val1 > 0 + sigma;
   // Moving Average (Simple, Close, 14, 0)
   double ind5buffer[]; CopyBuffer(indHandlers[153][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   bool   ind5long  = Open(0) > ind5val1 + sigma;
   bool   ind5short = Open(0) < ind5val1 - sigma;

   return CreateExitSignal(153, ind3long || ind4long || ind5long, ind3short || ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_154()
  {
   // Moving Averages Crossover (Simple, Simple, 16, 50)
   double ind0buffer0[]; CopyBuffer(indHandlers[154][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[154][0][1], 0, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer0[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   // Commodity Channel Index (Typical, 12)
   double ind1buffer[]; CopyBuffer(indHandlers[154][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Moving Average (Simple, Close, 1, 0)
   double ind2buffer[]; CopyBuffer(indHandlers[154][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = Open(0) > ind2val1 + sigma && Open(1) < ind2val2 - sigma;
   bool   ind2short = Open(0) < ind2val1 - sigma && Open(1) > ind2val2 + sigma;

   return CreateEntrySignal(154, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_154()
  {
   // Bears Power (15), Level: -33.9000
   double ind3buffer[]; CopyBuffer(indHandlers[154][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 < -33.9000 - sigma;
   bool   ind3short = ind3val1 > 33.9000 + sigma;
   // Stochastic Signal (8, 5, 2)
   double ind4buffer0[]; CopyBuffer(indHandlers[154][4][0], MAIN_LINE,   1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[154][4][0], SIGNAL_LINE, 1, 2, ind4buffer1);
   double ind4val1  = ind4buffer0[1];
   double ind4val2  = ind4buffer1[1];
   double ind4val3  = ind4buffer0[0];
   double ind4val4  = ind4buffer1[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val3 > ind4val4 + sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma && ind4val3 < ind4val4 - sigma;
   // Stochastic Signal (12, 7, 9)
   double ind5buffer0[]; CopyBuffer(indHandlers[154][5][0], MAIN_LINE,   1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[154][5][0], SIGNAL_LINE, 1, 2, ind5buffer1);
   double ind5val1  = ind5buffer0[1];
   double ind5val2  = ind5buffer1[1];
   double ind5val3  = ind5buffer0[0];
   double ind5val4  = ind5buffer1[0];
   bool   ind5long  = ind5val1 > ind5val2 + sigma && ind5val3 < ind5val4 - sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma && ind5val3 > ind5val4 + sigma;

   return CreateExitSignal(154, ind3long || ind4long || ind5long, ind3short || ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_155()
  {
   // RSI (Close, 48), Level: 30
   double ind0buffer[]; CopyBuffer(indHandlers[155][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 30 + sigma && ind0val2 < 30 - sigma;
   bool   ind0short = ind0val1 < 100 - 30 - sigma && ind0val2 > 100 - 30 + sigma;
   // ADX (30)
   double ind1buffer[]; CopyBuffer(indHandlers[155][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1long;

   return CreateEntrySignal(155, ind0long && ind1long, ind0short && ind1short, 41, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_155()
  {
   // RSI (Close, 42)
   double ind2buffer[]; CopyBuffer(indHandlers[155][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;
   // Moving Average (Simple, Close, 50, 0)
   double ind3buffer[]; CopyBuffer(indHandlers[155][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;

   return CreateExitSignal(155, ind2long || ind3long, ind2short || ind3short, 41, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_156()
  {
   // MACD (Close, 12, 38, 9)
   double ind0buffer[]; CopyBuffer(indHandlers[156][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 0 - sigma && ind0val2 > 0 + sigma;
   bool   ind0short = ind0val1 > 0 + sigma && ind0val2 < 0 - sigma;
   // Standard Deviation (Close, Simple, 47)
   double ind1buffer[]; CopyBuffer(indHandlers[156][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1long;
   // Directional Indicators (13)
   double ind2buffer0[]; CopyBuffer(indHandlers[156][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[156][2][0], 2, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;
   // Standard Deviation (Close, Simple, 46)
   double ind3buffer[]; CopyBuffer(indHandlers[156][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   bool   ind3short = ind3long;

   return CreateEntrySignal(156, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 63, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_156()
  {
   // DeMarker (42), Level: 0.19
   double ind4buffer[]; CopyBuffer(indHandlers[156][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < 0.19 - sigma && ind4val2 > 0.19 + sigma;
   bool   ind4short = ind4val1 > 1 - 0.19 + sigma && ind4val2 < 1 - 0.19 - sigma;
   // MACD Signal (Close, 21, 38, 8)
   double ind5buffer0[]; CopyBuffer(indHandlers[156][5][0], 0, 1, 3, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[156][5][0], 1, 1, 3, ind5buffer1);
   double ind5val1  = ind5buffer0[2] - ind5buffer1[2];
   bool   ind5long  = ind5val1 < 0 - sigma;
   bool   ind5short = ind5val1 > 0 + sigma;

   return CreateExitSignal(156, ind4long || ind5long, ind4short || ind5short, 63, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_157()
  {
   // Pin Bar (9, 37)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 37 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 37 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(157, ind0long, ind0short, 84, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_157()
  {
   // Moving Average (Simple, Close, 28, 0)
   double ind1buffer[]; CopyBuffer(indHandlers[157][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = Open(0) < ind1val1 - sigma && Open(1) > ind1val2 + sigma;
   bool   ind1short = Open(0) > ind1val1 + sigma && Open(1) < ind1val2 - sigma;
   // Accelerator Oscillator, Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[157][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < 0.0000 - sigma && ind2val2 > 0.0000 + sigma;
   bool   ind2short = ind2val1 > 0.0000 + sigma && ind2val2 < 0.0000 - sigma;
   // ADX (23), Level: 34.0
   double ind3buffer[]; CopyBuffer(indHandlers[157][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 34.0 + sigma;
   bool   ind3short = ind3long;

   return CreateExitSignal(157, ind1long || ind2long || ind3long, ind1short || ind2short || ind3short, 84, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_158()
  {
   // Stochastic (4, 3, 1), Level: 37.0
   double ind0buffer[]; CopyBuffer(indHandlers[158][0][0], MAIN_LINE, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   bool   ind0long  = ind0val1 < 37.0 - sigma;
   bool   ind0short = ind0val1 > 100 - 37.0 + sigma;
   // Stochastic (2, 1, 2), Level: 60.0
   double ind1buffer[]; CopyBuffer(indHandlers[158][1][0], MAIN_LINE, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 60.0 + sigma;
   bool   ind1short = ind1val1 < 100 - 60.0 - sigma;
   // Stochastic Signal (5, 2, 1)
   double ind2buffer0[]; CopyBuffer(indHandlers[158][2][0], MAIN_LINE,   1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[158][2][0], SIGNAL_LINE, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   double ind2val3  = ind2buffer0[0];
   double ind2val4  = ind2buffer1[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;
   // Standard Deviation (Close, Simple, 2)
   double ind3buffer[]; CopyBuffer(indHandlers[158][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3long;

   return CreateEntrySignal(158, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_158()
  {
   // Awesome Oscillator
   double ind4buffer[]; CopyBuffer(indHandlers[158][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < ind4val2 - sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma;
   // MACD Signal (Close, 7, 49, 7)
   double ind5buffer0[]; CopyBuffer(indHandlers[158][5][0], 0, 1, 3, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[158][5][0], 1, 1, 3, ind5buffer1);
   double ind5val1  = ind5buffer0[2] - ind5buffer1[2];
   double ind5val2  = ind5buffer0[1] - ind5buffer1[1];
   bool   ind5long  = ind5val1 > 0 + sigma && ind5val2 < 0 - sigma;
   bool   ind5short = ind5val1 < 0 - sigma && ind5val2 > 0 + sigma;
   // Awesome Oscillator
   double ind6buffer[]; CopyBuffer(indHandlers[158][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   bool   ind6long  = ind6val1 < ind6val2 - sigma;
   bool   ind6short = ind6val1 > ind6val2 + sigma;
   // Moving Average (Simple, Close, 43, 0)
   double ind7buffer[]; CopyBuffer(indHandlers[158][7][0], 0, 1, 3, ind7buffer);
   double ind7val1  = ind7buffer[2];
   bool   ind7long  = Open(0) < ind7val1 - sigma;
   bool   ind7short = Open(0) > ind7val1 + sigma;

   return CreateExitSignal(158, ind4long || ind5long || ind6long || ind7long, ind4short || ind5short || ind6short || ind7short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_159()
  {
   // Alligator (Smoothed, Median, 22, 11, 11, 6, 6, 2)
   double ind0buffer0[]; CopyBuffer(indHandlers[159][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[159][0][0], 1, 1, 2, ind0buffer1);
   double ind0buffer2[]; CopyBuffer(indHandlers[159][0][0], 2, 1, 2, ind0buffer2);
   double ind0val1  = ind0buffer2[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer2[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   // Moving Average of Oscillator (Close, 11, 13, 3)
   double ind1buffer[]; CopyBuffer(indHandlers[159][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Candle Color (45, 2)
   bool ind2long  = false;
   bool ind2short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 45;

      for (int b = 2 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind2long  = consecutiveBullish >= 2;
      ind2short = consecutiveBearish >= 2;
   }

   return CreateEntrySignal(159, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_159()
  {
   // Bears Power (2)
   double ind3buffer[]; CopyBuffer(indHandlers[159][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // Directional Indicators (9)
   double ind4buffer0[]; CopyBuffer(indHandlers[159][4][0], 1, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[159][4][0], 2, 1, 2, ind4buffer1);
   double ind4val1  = ind4buffer0[1];
   double ind4val2  = ind4buffer1[1];
   double ind4val3  = ind4buffer0[0];
   double ind4val4  = ind4buffer1[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val3 > ind4val4 + sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma && ind4val3 < ind4val4 - sigma;
   // Accelerator Oscillator, Level: 0.0000
   double ind5buffer[]; CopyBuffer(indHandlers[159][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < 0.0000 - sigma && ind5val2 > 0.0000 + sigma;
   bool   ind5short = ind5val1 > 0.0000 + sigma && ind5val2 < 0.0000 - sigma;
   // Williams' Percent Range (49)
   double ind6buffer[]; CopyBuffer(indHandlers[159][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   bool   ind6long  = ind6val1 < ind6val2 - sigma;
   bool   ind6short = ind6val1 > ind6val2 + sigma;

   return CreateExitSignal(159, ind3long || ind4long || ind5long || ind6long, ind3short || ind4short || ind5short || ind6short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_160()
  {
   // Pin Bar (9, 49)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 49 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 49 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(160, ind0long, ind0short, 92, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_160()
  {
   // Pin Bar (7, 49)

   bool ind1long  = false;
   bool ind1short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 7 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 49 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 49 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind1long  = isBullishPinBar;
      ind1short = isBearishPinBar;
   }
   // DeMarker (27)
   double ind2buffer[]; CopyBuffer(indHandlers[160][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;
   // Stochastic (5, 4, 5), Level: 4.0
   double ind3buffer[]; CopyBuffer(indHandlers[160][3][0], MAIN_LINE, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 < 4.0 - sigma;
   bool   ind3short = ind3val1 > 100 - 4.0 + sigma;
   // Williams' Percent Range (3), Level: -98.0
   double ind4buffer[]; CopyBuffer(indHandlers[160][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > -98.0 + sigma && ind4val2 < -98.0 - sigma;
   bool   ind4short = ind4val1 < -100 - -98.0 - sigma && ind4val2 > -100 - -98.0 + sigma;

   return CreateExitSignal(160, ind1long || ind2long || ind3long || ind4long, ind1short || ind2short || ind3short || ind4short, 92, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_161()
  {
   // Standard Deviation (Close, Simple, 6), Level: 9.3000
   double ind0buffer[]; CopyBuffer(indHandlers[161][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 9.3000 + sigma && ind0val2 < 9.3000 - sigma;
   bool   ind0short = ind0long;
   // Stochastic Signal (3, 2, 1)
   double ind1buffer0[]; CopyBuffer(indHandlers[161][1][0], MAIN_LINE,   1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[161][1][0], SIGNAL_LINE, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;

   return CreateEntrySignal(161, ind0long && ind1long, ind0short && ind1short, 64, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_161()
  {
   // MACD Signal (Close, 11, 15, 9)
   double ind2buffer0[]; CopyBuffer(indHandlers[161][2][0], 0, 1, 3, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[161][2][0], 1, 1, 3, ind2buffer1);
   double ind2val1  = ind2buffer0[2] - ind2buffer1[2];
   double ind2val2  = ind2buffer0[1] - ind2buffer1[1];
   bool   ind2long  = ind2val1 > 0 + sigma && ind2val2 < 0 - sigma;
   bool   ind2short = ind2val1 < 0 - sigma && ind2val2 > 0 + sigma;
   // DeMarker (2), Level: 0.88
   double ind3buffer[]; CopyBuffer(indHandlers[161][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > 0.88 + sigma && ind3val2 < 0.88 - sigma;
   bool   ind3short = ind3val1 < 1 - 0.88 - sigma && ind3val2 > 1 - 0.88 + sigma;
   // Bollinger Bands (Close, 5, 3.49)
   double ind4buffer0[]; CopyBuffer(indHandlers[161][4][0], 1, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[161][4][0], 2, 1, 2, ind4buffer1);
   double ind4upBand1 = ind4buffer0[1];
   double ind4dnBand1 = ind4buffer1[1];
   double ind4upBand2 = ind4buffer0[0];
   double ind4dnBand2 = ind4buffer1[0];
   bool   ind4long    = Open(0) < ind4dnBand1 - sigma && Open(1) > ind4dnBand2 + sigma;
   bool   ind4short   = Open(0) > ind4upBand1 + sigma && Open(1) < ind4upBand2 - sigma;
   // Candle Color (15, 3)
   bool ind5long  = false;
   bool ind5short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 15;

      for (int b = 3 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind5long  = consecutiveBearish >= 3;
      ind5short = consecutiveBullish >= 3;
   }

   return CreateExitSignal(161, ind2long || ind3long || ind4long || ind5long, ind2short || ind3short || ind4short || ind5short, 64, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_162()
  {
   // Bollinger Bands (Close, 34, 3.51)
   double ind0buffer0[]; CopyBuffer(indHandlers[162][0][0], 1, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[162][0][0], 2, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;
   bool   ind0short   = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;

   return CreateEntrySignal(162, ind0long, ind0short, 93, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_162()
  {
   // Directional Indicators (29)
   double ind1buffer0[]; CopyBuffer(indHandlers[162][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[162][1][0], 2, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Envelopes (Close, Simple, 38, 0.96)
   double ind2buffer0[]; CopyBuffer(indHandlers[162][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[162][2][0], 1, 1, 2, ind2buffer1);
   double ind2upBand1 = ind2buffer0[1];
   double ind2dnBand1 = ind2buffer1[1];
   bool   ind2long  = Open(0) < ind2dnBand1 - sigma;
   bool   ind2short = Open(0) > ind2upBand1 + sigma;
   // Average True Range (23)
   double ind3buffer[]; CopyBuffer(indHandlers[162][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3long;

   return CreateExitSignal(162, ind1long || ind2long || ind3long, ind1short || ind2short || ind3short, 93, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_163()
  {
   // Accelerator Oscillator, Level: 8.2000
   double ind0buffer[]; CopyBuffer(indHandlers[163][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 8.2000 - sigma && ind0val2 > 8.2000 + sigma;
   bool   ind0short = ind0val1 > -8.2000 + sigma && ind0val2 < -8.2000 - sigma;
   // Momentum (Close, 48)
   double ind1buffer[]; CopyBuffer(indHandlers[163][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;

   return CreateEntrySignal(163, ind0long && ind1long, ind0short && ind1short, 90, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_163()
  {
   // Envelopes (Close, Simple, 34, 0.10)
   double ind2buffer0[]; CopyBuffer(indHandlers[163][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[163][2][0], 1, 1, 2, ind2buffer1);
   double ind2upBand1 = ind2buffer0[1];
   double ind2dnBand1 = ind2buffer1[1];
   double ind2upBand2 = ind2buffer0[0];
   double ind2dnBand2 = ind2buffer1[0];
   bool   ind2long    = Open(0) > ind2upBand1 + sigma && Open(1) < ind2upBand2 - sigma;
   bool   ind2short   = Open(0) < ind2dnBand1 - sigma && Open(1) > ind2dnBand2 + sigma;
   // Stochastic Signal (11, 5, 8)
   double ind3buffer0[]; CopyBuffer(indHandlers[163][3][0], MAIN_LINE,   1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[163][3][0], SIGNAL_LINE, 1, 2, ind3buffer1);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer1[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateExitSignal(163, ind2long || ind3long, ind2short || ind3short, 90, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_164()
  {
   // Envelopes (Close, Simple, 34, 0.97)
   double ind0buffer0[]; CopyBuffer(indHandlers[164][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[164][0][0], 1, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;
   bool   ind0short   = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;
   // Bears Power (50), Level: 0.0000
   double ind1buffer[]; CopyBuffer(indHandlers[164][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 0.0000 + sigma;
   bool   ind1short = ind1val1 < 0.0000 - sigma;
   // Bollinger Bands (Close, 22, 2.68)
   double ind2buffer0[]; CopyBuffer(indHandlers[164][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[164][2][0], 2, 1, 2, ind2buffer1);
   double ind2upBand1 = ind2buffer0[1];
   double ind2dnBand1 = ind2buffer1[1];
   bool   ind2long  = Open(0) > ind2upBand1 + sigma;
   bool   ind2short = Open(0) < ind2dnBand1 - sigma;

   return CreateEntrySignal(164, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 75, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_164()
  {
   // MACD Signal (Close, 22, 40, 11)
   double ind3buffer0[]; CopyBuffer(indHandlers[164][3][0], 0, 1, 3, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[164][3][0], 1, 1, 3, ind3buffer1);
   double ind3val1  = ind3buffer0[2] - ind3buffer1[2];
   double ind3val2  = ind3buffer0[1] - ind3buffer1[1];
   bool   ind3long  = ind3val1 < 0 - sigma && ind3val2 > 0 + sigma;
   bool   ind3short = ind3val1 > 0 + sigma && ind3val2 < 0 - sigma;
   // Moving Average (Simple, Close, 17, 0)
   double ind4buffer[]; CopyBuffer(indHandlers[164][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = Open(0) < ind4val1 - sigma;
   bool   ind4short = Open(0) > ind4val1 + sigma;
   // MACD (Close, 25, 43, 9)
   double ind5buffer[]; CopyBuffer(indHandlers[164][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 > ind5val2 + sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma;
   // Commodity Channel Index (Typical, 21)
   double ind6buffer[]; CopyBuffer(indHandlers[164][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   double ind6val3  = ind6buffer[0];
   bool   ind6long  = ind6val1 > ind6val2 + sigma && ind6val2 < ind6val3 - sigma;
   bool   ind6short = ind6val1 < ind6val2 - sigma && ind6val2 > ind6val3 + sigma;

   return CreateExitSignal(164, ind3long || ind4long || ind5long || ind6long, ind3short || ind4short || ind5short || ind6short, 75, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_165()
  {
   // MACD Signal (Close, 21, 28, 11)
   double ind0buffer0[]; CopyBuffer(indHandlers[165][0][0], 0, 1, 3, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[165][0][0], 1, 1, 3, ind0buffer1);
   double ind0val1  = ind0buffer0[2] - ind0buffer1[2];
   double ind0val2  = ind0buffer0[1] - ind0buffer1[1];
   bool   ind0long  = ind0val1 < 0 - sigma && ind0val2 > 0 + sigma;
   bool   ind0short = ind0val1 > 0 + sigma && ind0val2 < 0 - sigma;
   // Moving Average of Oscillator (Close, 6, 43, 5), Level: -3.4000
   double ind1buffer[]; CopyBuffer(indHandlers[165][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < -3.4000 - sigma && ind1val2 > -3.4000 + sigma;
   bool   ind1short = ind1val1 > 3.4000 + sigma && ind1val2 < 3.4000 - sigma;
   // Commodity Channel Index (Typical, 27)
   double ind2buffer[]; CopyBuffer(indHandlers[165][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;

   return CreateEntrySignal(165, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 99, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_165()
  {
   // Moving Averages Crossover (Simple, Simple, 20, 30)
   double ind3buffer0[]; CopyBuffer(indHandlers[165][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[165][3][1], 0, 1, 2, ind3buffer1);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer1[1];
   double ind3val3  = ind3buffer0[0];
   double ind3val4  = ind3buffer1[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val3 < ind3val4 - sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma && ind3val3 > ind3val4 + sigma;
   // Envelopes (Close, Simple, 16, 0.78)
   double ind4buffer0[]; CopyBuffer(indHandlers[165][4][0], 0, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[165][4][0], 1, 1, 2, ind4buffer1);
   double ind4upBand1 = ind4buffer0[1];
   double ind4dnBand1 = ind4buffer1[1];
   double ind4upBand2 = ind4buffer0[0];
   double ind4dnBand2 = ind4buffer1[0];
   bool   ind4long    = Open(0) < ind4upBand1 - sigma && Open(1) > ind4upBand2 + sigma;
   bool   ind4short   = Open(0) > ind4dnBand1 + sigma && Open(1) < ind4dnBand2 - sigma;
   // Candle Color (14, 1)
   bool ind5long  = false;
   bool ind5short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 14;

      for (int b = 1 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind5long  = consecutiveBearish >= 1;
      ind5short = consecutiveBullish >= 1;
   }

   return CreateExitSignal(165, ind3long || ind4long || ind5long, ind3short || ind4short || ind5short, 99, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_166()
  {
   // RSI (Close, 50), Level: 30
   double ind0buffer[]; CopyBuffer(indHandlers[166][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 30 - sigma && ind0val2 > 30 + sigma;
   bool   ind0short = ind0val1 > 100 - 30 + sigma && ind0val2 < 100 - 30 - sigma;

   return CreateEntrySignal(166, ind0long, ind0short, 95, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_166()
  {
   // Moving Averages Crossover (Simple, Simple, 13, 32)
   double ind1buffer0[]; CopyBuffer(indHandlers[166][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[166][1][1], 0, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Stochastic (9, 9, 2)
   double ind2buffer[]; CopyBuffer(indHandlers[166][2][0], MAIN_LINE, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;

   return CreateExitSignal(166, ind1long || ind2long, ind1short || ind2short, 95, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_167()
  {
   // Commodity Channel Index (Typical, 34), Level: 0
   double ind0buffer[]; CopyBuffer(indHandlers[167][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0 + sigma && ind0val2 < 0 - sigma;
   bool   ind0short = ind0val1 < 0 - sigma && ind0val2 > 0 + sigma;
   // Momentum (Close, 48)
   double ind1buffer[]; CopyBuffer(indHandlers[167][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Moving Average (Simple, Close, 14, 0)
   double ind2buffer[]; CopyBuffer(indHandlers[167][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = Open(0) > ind2val1 + sigma;
   bool   ind2short = Open(0) < ind2val1 - sigma;
   // Average True Range (49)
   double ind3buffer[]; CopyBuffer(indHandlers[167][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   bool   ind3short = ind3long;

   return CreateEntrySignal(167, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 81, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_167()
  {
   // Williams' Percent Range (19)
   double ind4buffer[]; CopyBuffer(indHandlers[167][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;
   // Envelopes (Close, Simple, 18, 0.20)
   double ind5buffer0[]; CopyBuffer(indHandlers[167][5][0], 0, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[167][5][0], 1, 1, 2, ind5buffer1);
   double ind5upBand1 = ind5buffer0[1];
   double ind5dnBand1 = ind5buffer1[1];
   bool   ind5long  = Open(0) > ind5upBand1 + sigma;
   bool   ind5short = Open(0) < ind5dnBand1 - sigma;
   // Envelopes (Close, Simple, 2, 0.63)
   double ind6buffer0[]; CopyBuffer(indHandlers[167][6][0], 0, 1, 2, ind6buffer0);
   double ind6buffer1[]; CopyBuffer(indHandlers[167][6][0], 1, 1, 2, ind6buffer1);
   double ind6upBand1 = ind6buffer0[1];
   double ind6dnBand1 = ind6buffer1[1];
   double ind6upBand2 = ind6buffer0[0];
   double ind6dnBand2 = ind6buffer1[0];
   bool   ind6long    = Open(0) < ind6upBand1 - sigma && Open(1) > ind6upBand2 + sigma;
   bool   ind6short   = Open(0) > ind6dnBand1 + sigma && Open(1) < ind6dnBand2 - sigma;

   return CreateExitSignal(167, ind4long || ind5long || ind6long, ind4short || ind5short || ind6short, 81, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_168()
  {
   // Candle Color (22, 2)
   bool ind0long  = false;
   bool ind0short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 22;

      for (int b = 2 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind0long  = consecutiveBullish >= 2;
      ind0short = consecutiveBearish >= 2;
   }
   // Directional Indicators (5)
   double ind1buffer0[]; CopyBuffer(indHandlers[168][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[168][1][0], 2, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   double ind1val3  = ind1buffer0[0];
   double ind1val4  = ind1buffer1[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;

   return CreateEntrySignal(168, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_168()
  {
   // Awesome Oscillator
   double ind2buffer[]; CopyBuffer(indHandlers[168][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;

   return CreateExitSignal(168, ind2long, ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_169()
  {
   // Alligator (Smoothed, Median, 31, 27, 27, 11, 11, 2)
   double ind0buffer0[]; CopyBuffer(indHandlers[169][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[169][0][0], 1, 1, 2, ind0buffer1);
   double ind0buffer2[]; CopyBuffer(indHandlers[169][0][0], 2, 1, 2, ind0buffer2);
   double ind0val1  = ind0buffer2[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer2[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   // Moving Averages Crossover (Simple, Simple, 20, 44)
   double ind1buffer0[]; CopyBuffer(indHandlers[169][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[169][1][1], 0, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Alligator (Smoothed, Median, 12, 11, 11, 2, 2, 1)
   double ind2buffer0[]; CopyBuffer(indHandlers[169][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[169][2][0], 1, 1, 2, ind2buffer1);
   double ind2buffer2[]; CopyBuffer(indHandlers[169][2][0], 2, 1, 2, ind2buffer2);
   double ind2val1  = ind2buffer2[1];
   double ind2val2  = ind2buffer2[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;

   return CreateEntrySignal(169, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 49, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_169()
  {
   // Pin Bar (9, 50)

   bool ind3long  = false;
   bool ind3short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 50 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 50 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind3long  = isBullishPinBar;
      ind3short = isBearishPinBar;
   }

   return CreateExitSignal(169, ind3long, ind3short, 49, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_170()
  {
   // Stochastic Signal (16, 8, 10)
   double ind0buffer0[]; CopyBuffer(indHandlers[170][0][0], MAIN_LINE,   1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[170][0][0], SIGNAL_LINE, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer0[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   // Moving Average (Simple, Close, 16, 0)
   double ind1buffer[]; CopyBuffer(indHandlers[170][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // MACD Signal (Close, 23, 34, 4)
   double ind2buffer0[]; CopyBuffer(indHandlers[170][2][0], 0, 1, 3, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[170][2][0], 1, 1, 3, ind2buffer1);
   double ind2val1  = ind2buffer0[2] - ind2buffer1[2];
   bool   ind2long  = ind2val1 < 0 - sigma;
   bool   ind2short = ind2val1 > 0 + sigma;
   // Commodity Channel Index (Typical, 24)
   double ind3buffer[]; CopyBuffer(indHandlers[170][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;
   // Moving Average (Simple, Close, 10, 0)
   double ind4buffer[]; CopyBuffer(indHandlers[170][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > ind4val2 + sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma;
   // Stochastic (4, 1, 1)
   double ind5buffer[]; CopyBuffer(indHandlers[170][5][0], MAIN_LINE, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;

   return CreateEntrySignal(170, ind0long && ind1long && ind2long && ind3long && ind4long && ind5long, ind0short && ind1short && ind2short && ind3short && ind4short && ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_170()
  {
   // Bears Power (41), Level: 0.0000
   double ind6buffer[]; CopyBuffer(indHandlers[170][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   bool   ind6long  = ind6val1 > 0.0000 + sigma && ind6val2 < 0.0000 - sigma;
   bool   ind6short = ind6val1 < 0.0000 - sigma && ind6val2 > 0.0000 + sigma;
   // Envelopes (Close, Simple, 17, 0.47)
   double ind7buffer0[]; CopyBuffer(indHandlers[170][7][0], 0, 1, 2, ind7buffer0);
   double ind7buffer1[]; CopyBuffer(indHandlers[170][7][0], 1, 1, 2, ind7buffer1);
   double ind7upBand1 = ind7buffer0[1];
   double ind7dnBand1 = ind7buffer1[1];
   bool   ind7long  = Open(0) < ind7dnBand1 - sigma;
   bool   ind7short = Open(0) > ind7upBand1 + sigma;
   // Envelopes (Close, Simple, 22, 0.91)
   double ind8buffer0[]; CopyBuffer(indHandlers[170][8][0], 0, 1, 2, ind8buffer0);
   double ind8buffer1[]; CopyBuffer(indHandlers[170][8][0], 1, 1, 2, ind8buffer1);
   double ind8upBand1 = ind8buffer0[1];
   double ind8dnBand1 = ind8buffer1[1];
   bool   ind8long  = Open(0) < ind8dnBand1 - sigma;
   bool   ind8short = Open(0) > ind8upBand1 + sigma;

   return CreateExitSignal(170, ind6long || ind7long || ind8long, ind6short || ind7short || ind8short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_171()
  {
   // Stochastic Signal (8, 2, 5)
   double ind0buffer0[]; CopyBuffer(indHandlers[171][0][0], MAIN_LINE,   1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[171][0][0], SIGNAL_LINE, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer0[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   // Envelopes (Close, Simple, 11, 0.06)
   double ind1buffer0[]; CopyBuffer(indHandlers[171][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[171][1][0], 1, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   double ind1upBand2 = ind1buffer0[0];
   double ind1dnBand2 = ind1buffer1[0];
   bool   ind1long    = Open(0) > ind1upBand1 + sigma && Open(1) < ind1upBand2 - sigma;
   bool   ind1short   = Open(0) < ind1dnBand1 - sigma && Open(1) > ind1dnBand2 + sigma;
   // Momentum (Close, 49)
   double ind2buffer[]; CopyBuffer(indHandlers[171][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;

   return CreateEntrySignal(171, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 100, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_171()
  {
   // RSI (Close, 35), Level: 59
   double ind3buffer[]; CopyBuffer(indHandlers[171][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < 59 - sigma && ind3val2 > 59 + sigma;
   bool   ind3short = ind3val1 > 100 - 59 + sigma && ind3val2 < 100 - 59 - sigma;

   return CreateExitSignal(171, ind3long, ind3short, 100, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_172()
  {
   // Momentum (Close, 34), Level: 102.0000
   double ind0buffer[]; CopyBuffer(indHandlers[172][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 102.0000 + sigma && ind0val2 < 102.0000 - sigma;
   bool   ind0short = ind0val1 < 200 - 102.0000 - sigma && ind0val2 > 200 - 102.0000 + sigma;
   // DeMarker (39)
   double ind1buffer[]; CopyBuffer(indHandlers[172][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;

   return CreateEntrySignal(172, ind0long && ind1long, ind0short && ind1short, 11, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_172()
  {
   // MACD (Close, 21, 24, 9)
   double ind2buffer[]; CopyBuffer(indHandlers[172][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;

   return CreateExitSignal(172, ind2long, ind2short, 11, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_173()
  {
   // Stochastic (11, 4, 11), Level: 71.0
   double ind0buffer[]; CopyBuffer(indHandlers[173][0][0], MAIN_LINE, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 71.0 - sigma && ind0val2 > 71.0 + sigma;
   bool   ind0short = ind0val1 > 100 - 71.0 + sigma && ind0val2 < 100 - 71.0 - sigma;
   // Stochastic (5, 3, 1), Level: 49.0
   double ind1buffer[]; CopyBuffer(indHandlers[173][1][0], MAIN_LINE, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > 49.0 + sigma && ind1val2 < 49.0 - sigma;
   bool   ind1short = ind1val1 < 100 - 49.0 - sigma && ind1val2 > 100 - 49.0 + sigma;

   return CreateEntrySignal(173, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_173()
  {
   // RSI (Close, 50), Level: 65
   double ind2buffer[]; CopyBuffer(indHandlers[173][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 > 65 + sigma;
   bool   ind2short = ind2val1 < 100 - 65 - sigma;
   // Average True Range (28), Level: 3.0000
   double ind3buffer[]; CopyBuffer(indHandlers[173][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 3.0000 + sigma;
   bool   ind3short = ind3long;
   // Envelopes (Close, Simple, 39, 0.18)
   double ind4buffer0[]; CopyBuffer(indHandlers[173][4][0], 0, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[173][4][0], 1, 1, 2, ind4buffer1);
   double ind4upBand1 = ind4buffer0[1];
   double ind4dnBand1 = ind4buffer1[1];
   double ind4upBand2 = ind4buffer0[0];
   double ind4dnBand2 = ind4buffer1[0];
   bool   ind4long    = Open(0) < ind4dnBand1 - sigma && Open(1) > ind4dnBand2 + sigma;
   bool   ind4short   = Open(0) > ind4upBand1 + sigma && Open(1) < ind4upBand2 - sigma;

   return CreateExitSignal(173, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_174()
  {
   // Envelopes (Close, Simple, 3, 0.56)
   double ind0buffer0[]; CopyBuffer(indHandlers[174][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[174][0][0], 1, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;
   bool   ind0short   = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;

   return CreateEntrySignal(174, ind0long, ind0short, 70, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_174()
  {
   // Pin Bar (7, 49)

   bool ind1long  = false;
   bool ind1short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 7 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 49 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 49 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind1long  = isBullishPinBar;
      ind1short = isBearishPinBar;
   }
   // DeMarker (27)
   double ind2buffer[]; CopyBuffer(indHandlers[174][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;
   // Alligator (Smoothed, Median, 42, 22, 22, 11, 11, 1)
   double ind3buffer0[]; CopyBuffer(indHandlers[174][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[174][3][0], 1, 1, 2, ind3buffer1);
   double ind3buffer2[]; CopyBuffer(indHandlers[174][3][0], 2, 1, 2, ind3buffer2);
   double ind3val1  = ind3buffer2[1];
   double ind3val2  = ind3buffer0[1];
   double ind3val3  = ind3buffer2[0];
   double ind3val4  = ind3buffer0[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val3 < ind3val4 - sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma && ind3val3 > ind3val4 + sigma;
   // RSI (Close, 23), Level: 63
   double ind4buffer[]; CopyBuffer(indHandlers[174][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 > 63 + sigma;
   bool   ind4short = ind4val1 < 100 - 63 - sigma;

   return CreateExitSignal(174, ind1long || ind2long || ind3long || ind4long, ind1short || ind2short || ind3short || ind4short, 70, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_175()
  {
   // Bulls Power (44), Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[175][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   // Moving Average (Simple, Close, 29, 0)
   double ind1buffer[]; CopyBuffer(indHandlers[175][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = Open(0) > ind1val1 + sigma;
   bool   ind1short = Open(0) < ind1val1 - sigma;
   // Standard Deviation (Close, Simple, 21)
   double ind2buffer[]; CopyBuffer(indHandlers[175][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2long;
   // MACD (Close, 8, 42, 9)
   double ind3buffer[]; CopyBuffer(indHandlers[175][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   // MACD (Close, 20, 22, 9)
   double ind4buffer[]; CopyBuffer(indHandlers[175][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > ind4val2 + sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma;
   // Bears Power (4)
   double ind5buffer[]; CopyBuffer(indHandlers[175][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;

   return CreateEntrySignal(175, ind0long && ind1long && ind2long && ind3long && ind4long && ind5long, ind0short && ind1short && ind2short && ind3short && ind4short && ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_175()
  {
   // Moving Average of Oscillator (Close, 22, 31, 9)
   double ind6buffer[]; CopyBuffer(indHandlers[175][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   double ind6val3  = ind6buffer[0];
   bool   ind6long  = ind6val1 < ind6val2 - sigma && ind6val2 > ind6val3 + sigma;
   bool   ind6short = ind6val1 > ind6val2 + sigma && ind6val2 < ind6val3 - sigma;
   // Stochastic (14, 9, 13)
   double ind7buffer[]; CopyBuffer(indHandlers[175][7][0], MAIN_LINE, 1, 3, ind7buffer);
   double ind7val1  = ind7buffer[2];
   double ind7val2  = ind7buffer[1];
   bool   ind7long  = ind7val1 < ind7val2 - sigma;
   bool   ind7short = ind7val1 > ind7val2 + sigma;
   // RSI (Close, 31), Level: 37
   double ind8buffer[]; CopyBuffer(indHandlers[175][8][0], 0, 1, 3, ind8buffer);
   double ind8val1  = ind8buffer[2];
   bool   ind8long  = ind8val1 < 37 - sigma;
   bool   ind8short = ind8val1 > 100 - 37 + sigma;

   return CreateExitSignal(175, ind6long || ind7long || ind8long, ind6short || ind7short || ind8short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_176()
  {
   // Candle Color (39, 1)
   bool ind0long  = false;
   bool ind0short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 39;

      for (int b = 1 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind0long  = consecutiveBullish >= 1;
      ind0short = consecutiveBearish >= 1;
   }
   // Williams' Percent Range (42), Level: -20.0
   double ind1buffer[]; CopyBuffer(indHandlers[176][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < -20.0 - sigma && ind1val2 > -20.0 + sigma;
   bool   ind1short = ind1val1 > -100 - -20.0 + sigma && ind1val2 < -100 - -20.0 - sigma;

   return CreateEntrySignal(176, ind0long && ind1long, ind0short && ind1short, 51, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_176()
  {
   // Stochastic (12, 6, 3)
   double ind2buffer[]; CopyBuffer(indHandlers[176][2][0], MAIN_LINE, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;

   return CreateExitSignal(176, ind2long, ind2short, 51, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_177()
  {
   // Pin Bar (9, 46)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 46 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 46 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(177, ind0long, ind0short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_177()
  {
   // Momentum (Close, 36)
   double ind1buffer[]; CopyBuffer(indHandlers[177][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;

   return CreateExitSignal(177, ind1long, ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_178()
  {
   // Pin Bar (9, 41)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 41 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 41 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(178, ind0long, ind0short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_178()
  {
   // Commodity Channel Index (Typical, 21)
   double ind1buffer[]; CopyBuffer(indHandlers[178][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;

   return CreateExitSignal(178, ind1long, ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_179()
  {
   // Bears Power (2), Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[179][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;

   return CreateEntrySignal(179, ind0long, ind0short, 26, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_179()
  {
   // Candle Color (35, 3)
   bool ind1long  = false;
   bool ind1short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 35;

      for (int b = 3 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind1long  = consecutiveBearish >= 3;
      ind1short = consecutiveBullish >= 3;
   }
   // Pin Bar (9, 30)

   bool ind2long  = false;
   bool ind2short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 30 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 30 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind2long  = isBullishPinBar;
      ind2short = isBearishPinBar;
   }

   return CreateExitSignal(179, ind1long || ind2long, ind1short || ind2short, 26, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_180()
  {
   // Envelopes (Close, Simple, 48, 0.94)
   double ind0buffer0[]; CopyBuffer(indHandlers[180][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[180][0][0], 1, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) < ind0upBand1 - sigma && Open(1) > ind0upBand2 + sigma;
   bool   ind0short   = Open(0) > ind0dnBand1 + sigma && Open(1) < ind0dnBand2 - sigma;
   // Directional Indicators (28)
   double ind1buffer0[]; CopyBuffer(indHandlers[180][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[180][1][0], 2, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Bulls Power (7)
   double ind2buffer[]; CopyBuffer(indHandlers[180][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;
   // MACD (Close, 22, 42, 9)
   double ind3buffer[]; CopyBuffer(indHandlers[180][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateEntrySignal(180, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 71, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_180()
  {
   // Envelopes (Close, Simple, 13, 0.28)
   double ind4buffer0[]; CopyBuffer(indHandlers[180][4][0], 0, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[180][4][0], 1, 1, 2, ind4buffer1);
   double ind4upBand1 = ind4buffer0[1];
   double ind4dnBand1 = ind4buffer1[1];
   double ind4upBand2 = ind4buffer0[0];
   double ind4dnBand2 = ind4buffer1[0];
   bool   ind4long    = Open(0) < ind4upBand1 - sigma && Open(1) > ind4upBand2 + sigma;
   bool   ind4short   = Open(0) > ind4dnBand1 + sigma && Open(1) < ind4dnBand2 - sigma;

   return CreateExitSignal(180, ind4long, ind4short, 71, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_181()
  {
   // Alligator (Smoothed, Median, 15, 10, 10, 4, 4, 1)
   double ind0buffer0[]; CopyBuffer(indHandlers[181][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[181][0][0], 1, 1, 2, ind0buffer1);
   double ind0buffer2[]; CopyBuffer(indHandlers[181][0][0], 2, 1, 2, ind0buffer2);
   double ind0val1  = ind0buffer1[1];
   double ind0val2  = ind0buffer0[1];
   double ind0val3  = ind0buffer1[0];
   double ind0val4  = ind0buffer0[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   // Moving Averages Crossover (Simple, Simple, 20, 44)
   double ind1buffer0[]; CopyBuffer(indHandlers[181][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[181][1][1], 0, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Alligator (Smoothed, Median, 12, 11, 11, 2, 2, 1)
   double ind2buffer0[]; CopyBuffer(indHandlers[181][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[181][2][0], 1, 1, 2, ind2buffer1);
   double ind2buffer2[]; CopyBuffer(indHandlers[181][2][0], 2, 1, 2, ind2buffer2);
   double ind2val1  = ind2buffer2[1];
   double ind2val2  = ind2buffer2[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;

   return CreateEntrySignal(181, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 49, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_181()
  {
   // Pin Bar (9, 50)

   bool ind3long  = false;
   bool ind3short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 50 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 50 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind3long  = isBullishPinBar;
      ind3short = isBearishPinBar;
   }

   return CreateExitSignal(181, ind3long, ind3short, 49, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_182()
  {
   // Envelopes (Close, Simple, 5, 0.80)
   double ind0buffer0[]; CopyBuffer(indHandlers[182][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[182][0][0], 1, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;
   bool   ind0short   = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;

   return CreateEntrySignal(182, ind0long, ind0short, 94, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_182()
  {
   // DeMarker (39)
   double ind1buffer[]; CopyBuffer(indHandlers[182][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Bulls Power (5), Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[182][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 0.0000 - sigma;
   bool   ind2short = ind2val1 > 0.0000 + sigma;
   // Accelerator Oscillator, Level: 0.0000
   double ind3buffer[]; CopyBuffer(indHandlers[182][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < 0.0000 - sigma && ind3val2 > 0.0000 + sigma;
   bool   ind3short = ind3val1 > 0.0000 + sigma && ind3val2 < 0.0000 - sigma;
   // Bollinger Bands (Close, 41, 2.15)
   double ind4buffer0[]; CopyBuffer(indHandlers[182][4][0], 1, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[182][4][0], 2, 1, 2, ind4buffer1);
   double ind4upBand1 = ind4buffer0[1];
   double ind4dnBand1 = ind4buffer1[1];
   double ind4upBand2 = ind4buffer0[0];
   double ind4dnBand2 = ind4buffer1[0];
   bool   ind4long    = Open(0) < ind4upBand1 - sigma && Open(1) > ind4upBand2 + sigma;
   bool   ind4short   = Open(0) > ind4dnBand1 + sigma && Open(1) < ind4dnBand2 - sigma;

   return CreateExitSignal(182, ind1long || ind2long || ind3long || ind4long, ind1short || ind2short || ind3short || ind4short, 94, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_183()
  {
   // Bears Power (29)
   double ind0buffer[]; CopyBuffer(indHandlers[183][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   double ind0val3  = ind0buffer[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val2 > ind0val3 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val2 < ind0val3 - sigma;
   // MACD Signal (Close, 13, 44, 9)
   double ind1buffer0[]; CopyBuffer(indHandlers[183][1][0], 0, 1, 3, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[183][1][0], 1, 1, 3, ind1buffer1);
   double ind1val1  = ind1buffer0[2] - ind1buffer1[2];
   double ind1val2  = ind1buffer0[1] - ind1buffer1[1];
   bool   ind1long  = ind1val1 < 0 - sigma && ind1val2 > 0 + sigma;
   bool   ind1short = ind1val1 > 0 + sigma && ind1val2 < 0 - sigma;
   // Awesome Oscillator
   double ind2buffer[]; CopyBuffer(indHandlers[183][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;
   // Williams' Percent Range (35)
   double ind3buffer[]; CopyBuffer(indHandlers[183][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;

   return CreateEntrySignal(183, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 96, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_183()
  {
   // MACD (Close, 24, 38, 9)
   double ind4buffer[]; CopyBuffer(indHandlers[183][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 < 0 - sigma;
   bool   ind4short = ind4val1 > 0 + sigma;
   // DeMarker (10), Level: 0.09
   double ind5buffer[]; CopyBuffer(indHandlers[183][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   bool   ind5long  = ind5val1 < 0.09 - sigma;
   bool   ind5short = ind5val1 > 1 - 0.09 + sigma;

   return CreateExitSignal(183, ind4long || ind5long, ind4short || ind5short, 96, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_184()
  {
   // Moving Average of Oscillator (Close, 22, 26, 6), Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[184][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   bool   ind0short = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   // MACD Signal (Close, 24, 31, 10)
   double ind1buffer0[]; CopyBuffer(indHandlers[184][1][0], 0, 1, 3, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[184][1][0], 1, 1, 3, ind1buffer1);
   double ind1val1  = ind1buffer0[2] - ind1buffer1[2];
   bool   ind1long  = ind1val1 < 0 - sigma;
   bool   ind1short = ind1val1 > 0 + sigma;
   // Directional Indicators (9)
   double ind2buffer0[]; CopyBuffer(indHandlers[184][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[184][2][0], 2, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;
   // Moving Average (Simple, Close, 34, 0)
   double ind3buffer[]; CopyBuffer(indHandlers[184][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = Open(0) > ind3val1 + sigma;
   bool   ind3short = Open(0) < ind3val1 - sigma;

   return CreateEntrySignal(184, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 54, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_184()
  {
   // Commodity Channel Index (Typical, 29), Level: -60
   double ind4buffer[]; CopyBuffer(indHandlers[184][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 < -60 - sigma;
   bool   ind4short = ind4val1 > 60 + sigma;

   return CreateExitSignal(184, ind4long, ind4short, 54, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_185()
  {
   // RSI (Close, 38), Level: 30
   double ind0buffer[]; CopyBuffer(indHandlers[185][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 30 - sigma && ind0val2 > 30 + sigma;
   bool   ind0short = ind0val1 > 100 - 30 + sigma && ind0val2 < 100 - 30 - sigma;

   return CreateEntrySignal(185, ind0long, ind0short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_185()
  {
   // ADX (14)
   double ind1buffer[]; CopyBuffer(indHandlers[185][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   bool   ind1short = ind1long;
   // Moving Average (Simple, Close, 50, 0)
   double ind2buffer[]; CopyBuffer(indHandlers[185][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = Open(0) > ind2val1 + sigma && Open(1) < ind2val2 - sigma;
   bool   ind2short = Open(0) < ind2val1 - sigma && Open(1) > ind2val2 + sigma;

   return CreateExitSignal(185, ind1long || ind2long, ind1short || ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_186()
  {
   // Moving Average of Oscillator (Close, 7, 40, 13), Level: 5.2000
   double ind0buffer[]; CopyBuffer(indHandlers[186][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   bool   ind0long  = ind0val1 > 5.2000 + sigma;
   bool   ind0short = ind0val1 < -5.2000 - sigma;
   // Envelopes (Close, Simple, 33, 0.06)
   double ind1buffer0[]; CopyBuffer(indHandlers[186][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[186][1][0], 1, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   bool   ind1long  = Open(0) > ind1upBand1 + sigma;
   bool   ind1short = Open(0) < ind1dnBand1 - sigma;
   // Bollinger Bands (Close, 9, 1.03)
   double ind2buffer0[]; CopyBuffer(indHandlers[186][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[186][2][0], 2, 1, 2, ind2buffer1);
   double ind2upBand1 = ind2buffer0[1];
   double ind2dnBand1 = ind2buffer1[1];
   double ind2upBand2 = ind2buffer0[0];
   double ind2dnBand2 = ind2buffer1[0];
   bool   ind2long    = Open(0) > ind2upBand1 + sigma && Open(1) < ind2upBand2 - sigma;
   bool   ind2short   = Open(0) < ind2dnBand1 - sigma && Open(1) > ind2dnBand2 + sigma;

   return CreateEntrySignal(186, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 60, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_186()
  {
   // Awesome Oscillator, Level: 3.6000
   double ind3buffer[]; CopyBuffer(indHandlers[186][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 3.6000 + sigma;
   bool   ind3short = ind3val1 < -3.6000 - sigma;

   return CreateExitSignal(186, ind3long, ind3short, 60, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_187()
  {
   // Standard Deviation (Close, Simple, 4), Level: 2.4000
   double ind0buffer[]; CopyBuffer(indHandlers[187][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 2.4000 - sigma && ind0val2 > 2.4000 + sigma;
   bool   ind0short = ind0long;
   // Moving Average (Simple, Close, 48, 0)
   double ind1buffer[]; CopyBuffer(indHandlers[187][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;

   return CreateEntrySignal(187, ind0long && ind1long, ind0short && ind1short, 66, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_187()
  {
   // Bollinger Bands (Close, 24, 2.07)
   double ind2buffer0[]; CopyBuffer(indHandlers[187][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[187][2][0], 2, 1, 2, ind2buffer1);
   double ind2upBand1 = ind2buffer0[1];
   double ind2dnBand1 = ind2buffer1[1];
   bool   ind2long  = Open(0) < ind2dnBand1 - sigma;
   bool   ind2short = Open(0) > ind2upBand1 + sigma;
   // Moving Average (Simple, Close, 42, 0)
   double ind3buffer[]; CopyBuffer(indHandlers[187][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = Open(0) < ind3val1 - sigma && Open(1) > ind3val2 + sigma;
   bool   ind3short = Open(0) > ind3val1 + sigma && Open(1) < ind3val2 - sigma;
   // Awesome Oscillator
   double ind4buffer[]; CopyBuffer(indHandlers[187][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > ind4val2 + sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma;

   return CreateExitSignal(187, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 66, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_188()
  {
   // Moving Average (Simple, Close, 17, 0)
   double ind0buffer[]; CopyBuffer(indHandlers[188][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = Open(0) < ind0val1 - sigma && Open(1) > ind0val2 + sigma;
   bool   ind0short = Open(0) > ind0val1 + sigma && Open(1) < ind0val2 - sigma;
   // Candle Color (42, 2)
   bool ind1long  = false;
   bool ind1short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 42;

      for (int b = 2 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind1long  = consecutiveBearish >= 2;
      ind1short = consecutiveBullish >= 2;
   }
   // Directional Indicators (5)
   double ind2buffer0[]; CopyBuffer(indHandlers[188][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[188][2][0], 2, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   double ind2val3  = ind2buffer0[0];
   double ind2val4  = ind2buffer1[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;
   // Alligator (Smoothed, Median, 23, 21, 21, 7, 7, 2)
   double ind3buffer0[]; CopyBuffer(indHandlers[188][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[188][3][0], 1, 1, 2, ind3buffer1);
   double ind3buffer2[]; CopyBuffer(indHandlers[188][3][0], 2, 1, 2, ind3buffer2);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer0[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // Stochastic (13, 5, 3), Level: 54.0
   double ind4buffer[]; CopyBuffer(indHandlers[188][4][0], MAIN_LINE, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < 54.0 - sigma && ind4val2 > 54.0 + sigma;
   bool   ind4short = ind4val1 > 100 - 54.0 + sigma && ind4val2 < 100 - 54.0 - sigma;
   // Commodity Channel Index (Typical, 5), Level: 0
   double ind5buffer[]; CopyBuffer(indHandlers[188][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < 0 - sigma && ind5val2 > 0 + sigma;
   bool   ind5short = ind5val1 > 0 + sigma && ind5val2 < 0 - sigma;
   // Bears Power (8)
   double ind6buffer[]; CopyBuffer(indHandlers[188][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   bool   ind6long  = ind6val1 < ind6val2 - sigma;
   bool   ind6short = ind6val1 > ind6val2 + sigma;

   return CreateEntrySignal(188, ind0long && ind1long && ind2long && ind3long && ind4long && ind5long && ind6long, ind0short && ind1short && ind2short && ind3short && ind4short && ind5short && ind6short, 77, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_188()
  {
   // MACD Signal (Close, 20, 27, 6)
   double ind7buffer0[]; CopyBuffer(indHandlers[188][7][0], 0, 1, 3, ind7buffer0);
   double ind7buffer1[]; CopyBuffer(indHandlers[188][7][0], 1, 1, 3, ind7buffer1);
   double ind7val1  = ind7buffer0[2] - ind7buffer1[2];
   double ind7val2  = ind7buffer0[1] - ind7buffer1[1];
   bool   ind7long  = ind7val1 < 0 - sigma && ind7val2 > 0 + sigma;
   bool   ind7short = ind7val1 > 0 + sigma && ind7val2 < 0 - sigma;

   return CreateExitSignal(188, ind7long, ind7short, 77, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_189()
  {
   // Bulls Power (12), Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[189][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   bool   ind0long  = ind0val1 > 0.0000 + sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma;
   // Average True Range (1), Level: 17.5000
   double ind1buffer[]; CopyBuffer(indHandlers[189][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > 17.5000 + sigma && ind1val2 < 17.5000 - sigma;
   bool   ind1short = ind1long;

   return CreateEntrySignal(189, ind0long && ind1long, ind0short && ind1short, 37, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_189()
  {
   // Awesome Oscillator, Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[189][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < 0.0000 - sigma && ind2val2 > 0.0000 + sigma;
   bool   ind2short = ind2val1 > 0.0000 + sigma && ind2val2 < 0.0000 - sigma;
   // Stochastic Signal (9, 1, 6)
   double ind3buffer0[]; CopyBuffer(indHandlers[189][3][0], MAIN_LINE,   1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[189][3][0], SIGNAL_LINE, 1, 2, ind3buffer1);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer1[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // Moving Average (Simple, Close, 10, 0)
   double ind4buffer[]; CopyBuffer(indHandlers[189][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < ind4val2 - sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma;

   return CreateExitSignal(189, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 37, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_190()
  {
   // Average True Range (1), Level: 17.5000
   double ind0buffer[]; CopyBuffer(indHandlers[190][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 17.5000 + sigma && ind0val2 < 17.5000 - sigma;
   bool   ind0short = ind0long;
   // Bulls Power (3), Level: 0.0000
   double ind1buffer[]; CopyBuffer(indHandlers[190][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 0.0000 + sigma;
   bool   ind1short = ind1val1 < 0.0000 - sigma;

   return CreateEntrySignal(190, ind0long && ind1long, ind0short && ind1short, 37, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_190()
  {
   // Awesome Oscillator, Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[190][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < 0.0000 - sigma && ind2val2 > 0.0000 + sigma;
   bool   ind2short = ind2val1 > 0.0000 + sigma && ind2val2 < 0.0000 - sigma;
   // DeMarker (33)
   double ind3buffer[]; CopyBuffer(indHandlers[190][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // Moving Average (Simple, Close, 10, 0)
   double ind4buffer[]; CopyBuffer(indHandlers[190][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < ind4val2 - sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma;
   // Momentum (Close, 37), Level: 100.0000
   double ind5buffer[]; CopyBuffer(indHandlers[190][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   bool   ind5long  = ind5val1 > 100.0000 + sigma;
   bool   ind5short = ind5val1 < 200 - 100.0000 - sigma;

   return CreateExitSignal(190, ind2long || ind3long || ind4long || ind5long, ind2short || ind3short || ind4short || ind5short, 37, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_191()
  {
   // MACD (Close, 16, 36, 9)
   double ind0buffer[]; CopyBuffer(indHandlers[191][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   bool   ind0long  = ind0val1 > 0 + sigma;
   bool   ind0short = ind0val1 < 0 - sigma;
   // Average True Range (15)
   double ind1buffer[]; CopyBuffer(indHandlers[191][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   bool   ind1short = ind1long;
   // Moving Average (Simple, Close, 18, 0)
   double ind2buffer[]; CopyBuffer(indHandlers[191][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = Open(0) > ind2val1 + sigma && Open(1) < ind2val2 - sigma;
   bool   ind2short = Open(0) < ind2val1 - sigma && Open(1) > ind2val2 + sigma;
   // MACD Signal (Close, 13, 17, 3)
   double ind3buffer0[]; CopyBuffer(indHandlers[191][3][0], 0, 1, 3, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[191][3][0], 1, 1, 3, ind3buffer1);
   double ind3val1  = ind3buffer0[2] - ind3buffer1[2];
   double ind3val2  = ind3buffer0[1] - ind3buffer1[1];
   bool   ind3long  = ind3val1 > 0 + sigma && ind3val2 < 0 - sigma;
   bool   ind3short = ind3val1 < 0 - sigma && ind3val2 > 0 + sigma;

   return CreateEntrySignal(191, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 88, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_191()
  {
   // Envelopes (Close, Simple, 41, 0.31)
   double ind4buffer0[]; CopyBuffer(indHandlers[191][4][0], 0, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[191][4][0], 1, 1, 2, ind4buffer1);
   double ind4upBand1 = ind4buffer0[1];
   double ind4dnBand1 = ind4buffer1[1];
   double ind4upBand2 = ind4buffer0[0];
   double ind4dnBand2 = ind4buffer1[0];
   bool   ind4long    = Open(0) < ind4dnBand1 - sigma && Open(1) > ind4dnBand2 + sigma;
   bool   ind4short   = Open(0) > ind4upBand1 + sigma && Open(1) < ind4upBand2 - sigma;
   // Momentum (Close, 45)
   double ind5buffer[]; CopyBuffer(indHandlers[191][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 > ind5val2 + sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma;

   return CreateExitSignal(191, ind4long || ind5long, ind4short || ind5short, 88, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_192()
  {
   // Bollinger Bands (Close, 32, 2.50)
   double ind0buffer0[]; CopyBuffer(indHandlers[192][0][0], 1, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[192][0][0], 2, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) < ind0upBand1 - sigma && Open(1) > ind0upBand2 + sigma;
   bool   ind0short   = Open(0) > ind0dnBand1 + sigma && Open(1) < ind0dnBand2 - sigma;
   // Candle Color (48, 2)
   bool ind1long  = false;
   bool ind1short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 48;

      for (int b = 2 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind1long  = consecutiveBullish >= 2;
      ind1short = consecutiveBearish >= 2;
   }
   // Alligator (Smoothed, Median, 31, 24, 24, 15, 15, 5)
   double ind2buffer0[]; CopyBuffer(indHandlers[192][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[192][2][0], 1, 1, 2, ind2buffer1);
   double ind2buffer2[]; CopyBuffer(indHandlers[192][2][0], 2, 1, 2, ind2buffer2);
   double ind2val1  = ind2buffer2[1];
   double ind2val2  = ind2buffer2[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;

   return CreateEntrySignal(192, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 58, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_192()
  {
   // Commodity Channel Index (Typical, 20), Level: 0
   double ind3buffer[]; CopyBuffer(indHandlers[192][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 0 + sigma;
   bool   ind3short = ind3val1 < 0 - sigma;

   return CreateExitSignal(192, ind3long, ind3short, 58, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_193()
  {
   // Alligator (Smoothed, Median, 28, 12, 12, 7, 7, 3)
   double ind0buffer0[]; CopyBuffer(indHandlers[193][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[193][0][0], 1, 1, 2, ind0buffer1);
   double ind0buffer2[]; CopyBuffer(indHandlers[193][0][0], 2, 1, 2, ind0buffer2);
   double ind0val1  = ind0buffer1[1];
   double ind0val2  = ind0buffer0[1];
   double ind0val3  = ind0buffer1[0];
   double ind0val4  = ind0buffer0[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   // Moving Averages Crossover (Simple, Simple, 9, 20)
   double ind1buffer0[]; CopyBuffer(indHandlers[193][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[193][1][1], 0, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Commodity Channel Index (Typical, 20)
   double ind2buffer[]; CopyBuffer(indHandlers[193][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;

   return CreateEntrySignal(193, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_193()
  {
   // Directional Indicators (38)
   double ind3buffer0[]; CopyBuffer(indHandlers[193][3][0], 1, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[193][3][0], 2, 1, 2, ind3buffer1);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer1[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateExitSignal(193, ind3long, ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_194()
  {
   // RSI (Close, 31), Level: 30
   double ind0buffer[]; CopyBuffer(indHandlers[194][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 30 - sigma && ind0val2 > 30 + sigma;
   bool   ind0short = ind0val1 > 100 - 30 + sigma && ind0val2 < 100 - 30 - sigma;

   return CreateEntrySignal(194, ind0long, ind0short, 66, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_194()
  {
   // Bulls Power (35), Level: 0.0000
   double ind1buffer[]; CopyBuffer(indHandlers[194][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 < 0.0000 - sigma;
   bool   ind1short = ind1val1 > 0.0000 + sigma;

   return CreateExitSignal(194, ind1long, ind1short, 66, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_195()
  {
   // MACD (Close, 18, 38, 9)
   double ind0buffer[]; CopyBuffer(indHandlers[195][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   double ind0val3  = ind0buffer[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val2 > ind0val3 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val2 < ind0val3 - sigma;
   // Alligator (Smoothed, Median, 22, 18, 18, 7, 7, 4)
   double ind1buffer0[]; CopyBuffer(indHandlers[195][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[195][1][0], 1, 1, 2, ind1buffer1);
   double ind1buffer2[]; CopyBuffer(indHandlers[195][1][0], 2, 1, 2, ind1buffer2);
   double ind1val1  = ind1buffer1[1];
   double ind1val2  = ind1buffer1[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Moving Averages Crossover (Simple, Simple, 10, 23)
   double ind2buffer0[]; CopyBuffer(indHandlers[195][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[195][2][1], 0, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   double ind2val3  = ind2buffer0[0];
   double ind2val4  = ind2buffer1[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;

   return CreateEntrySignal(195, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_195()
  {
   // MACD Signal (Close, 20, 32, 8)
   double ind3buffer0[]; CopyBuffer(indHandlers[195][3][0], 0, 1, 3, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[195][3][0], 1, 1, 3, ind3buffer1);
   double ind3val1  = ind3buffer0[2] - ind3buffer1[2];
   bool   ind3long  = ind3val1 > 0 + sigma;
   bool   ind3short = ind3val1 < 0 - sigma;
   // Stochastic (9, 6, 7)
   double ind4buffer[]; CopyBuffer(indHandlers[195][4][0], MAIN_LINE, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;
   // Moving Average of Oscillator (Close, 18, 36, 13), Level: 0.0000
   double ind5buffer[]; CopyBuffer(indHandlers[195][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 > 0.0000 + sigma && ind5val2 < 0.0000 - sigma;
   bool   ind5short = ind5val1 < 0.0000 - sigma && ind5val2 > 0.0000 + sigma;
   // Bulls Power (17)
   double ind6buffer[]; CopyBuffer(indHandlers[195][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   bool   ind6long  = ind6val1 > ind6val2 + sigma;
   bool   ind6short = ind6val1 < ind6val2 - sigma;

   return CreateExitSignal(195, ind3long || ind4long || ind5long || ind6long, ind3short || ind4short || ind5short || ind6short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_196()
  {
   // Moving Average (Simple, Close, 16, 0)
   double ind0buffer[]; CopyBuffer(indHandlers[196][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = Open(0) < ind0val1 - sigma && Open(1) > ind0val2 + sigma;
   bool   ind0short = Open(0) > ind0val1 + sigma && Open(1) < ind0val2 - sigma;
   // RSI (Close, 22)
   double ind1buffer[]; CopyBuffer(indHandlers[196][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   // Directional Indicators (46)
   double ind2buffer0[]; CopyBuffer(indHandlers[196][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[196][2][0], 2, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;
   // Bears Power (40), Level: 0.0000
   double ind3buffer[]; CopyBuffer(indHandlers[196][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 < 0.0000 - sigma;
   bool   ind3short = ind3val1 > 0.0000 + sigma;
   // Standard Deviation (Close, Simple, 9)
   double ind4buffer[]; CopyBuffer(indHandlers[196][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < ind4val2 - sigma;
   bool   ind4short = ind4long;
   // Awesome Oscillator
   double ind5buffer[]; CopyBuffer(indHandlers[196][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;

   return CreateEntrySignal(196, ind0long && ind1long && ind2long && ind3long && ind4long && ind5long, ind0short && ind1short && ind2short && ind3short && ind4short && ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_196()
  {
   // Stochastic Signal (8, 5, 2)
   double ind6buffer0[]; CopyBuffer(indHandlers[196][6][0], MAIN_LINE,   1, 2, ind6buffer0);
   double ind6buffer1[]; CopyBuffer(indHandlers[196][6][0], SIGNAL_LINE, 1, 2, ind6buffer1);
   double ind6val1  = ind6buffer0[1];
   double ind6val2  = ind6buffer1[1];
   double ind6val3  = ind6buffer0[0];
   double ind6val4  = ind6buffer1[0];
   bool   ind6long  = ind6val1 < ind6val2 - sigma && ind6val3 > ind6val4 + sigma;
   bool   ind6short = ind6val1 > ind6val2 + sigma && ind6val3 < ind6val4 - sigma;

   return CreateExitSignal(196, ind6long, ind6short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_197()
  {
   // Pin Bar (9, 34)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 34 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 34 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(197, ind0long, ind0short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_197()
  {
   // MACD Signal (Close, 13, 46, 11)
   double ind1buffer0[]; CopyBuffer(indHandlers[197][1][0], 0, 1, 3, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[197][1][0], 1, 1, 3, ind1buffer1);
   double ind1val1  = ind1buffer0[2] - ind1buffer1[2];
   bool   ind1long  = ind1val1 < 0 - sigma;
   bool   ind1short = ind1val1 > 0 + sigma;
   // Pin Bar (4, 32)

   bool ind2long  = false;
   bool ind2short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 4 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 32 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 32 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind2long  = isBullishPinBar;
      ind2short = isBearishPinBar;
   }
   // ADX (19)
   double ind3buffer[]; CopyBuffer(indHandlers[197][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3long;
   // RSI (Close, 20), Level: 41
   double ind4buffer[]; CopyBuffer(indHandlers[197][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 < 41 - sigma;
   bool   ind4short = ind4val1 > 100 - 41 + sigma;

   return CreateExitSignal(197, ind1long || ind2long || ind3long || ind4long, ind1short || ind2short || ind3short || ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_198()
  {
   // Alligator (Smoothed, Median, 12, 11, 11, 7, 7, 4)
   double ind0buffer0[]; CopyBuffer(indHandlers[198][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[198][0][0], 1, 1, 2, ind0buffer1);
   double ind0buffer2[]; CopyBuffer(indHandlers[198][0][0], 2, 1, 2, ind0buffer2);
   double ind0val1  = ind0buffer2[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer2[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   // Commodity Channel Index (Typical, 7)
   double ind1buffer[]; CopyBuffer(indHandlers[198][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Awesome Oscillator
   double ind2buffer[]; CopyBuffer(indHandlers[198][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   // Stochastic Signal (12, 10, 8)
   double ind3buffer0[]; CopyBuffer(indHandlers[198][3][0], MAIN_LINE,   1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[198][3][0], SIGNAL_LINE, 1, 2, ind3buffer1);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer1[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateEntrySignal(198, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_198()
  {
   // Bears Power (5)
   double ind4buffer[]; CopyBuffer(indHandlers[198][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;

   return CreateExitSignal(198, ind4long, ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_199()
  {
   // Accelerator Oscillator, Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[199][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   bool   ind0short = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   // Moving Averages Crossover (Simple, Simple, 6, 45)
   double ind1buffer0[]; CopyBuffer(indHandlers[199][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[199][1][1], 0, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   double ind1val3  = ind1buffer0[0];
   double ind1val4  = ind1buffer1[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;

   return CreateEntrySignal(199, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_199()
  {
   // Commodity Channel Index (Typical, 31), Level: -8
   double ind2buffer[]; CopyBuffer(indHandlers[199][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < -8 - sigma;
   bool   ind2short = ind2val1 > 8 + sigma;
   // Bollinger Bands (Close, 47, 1.30)
   double ind3buffer0[]; CopyBuffer(indHandlers[199][3][0], 1, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[199][3][0], 2, 1, 2, ind3buffer1);
   double ind3upBand1 = ind3buffer0[1];
   double ind3dnBand1 = ind3buffer1[1];
   double ind3upBand2 = ind3buffer0[0];
   double ind3dnBand2 = ind3buffer1[0];
   bool   ind3long    = Open(0) < ind3dnBand1 - sigma && Open(1) > ind3dnBand2 + sigma;
   bool   ind3short   = Open(0) > ind3upBand1 + sigma && Open(1) < ind3upBand2 - sigma;
   // Awesome Oscillator
   double ind4buffer[]; CopyBuffer(indHandlers[199][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > ind4val2 + sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma;
   // Accelerator Oscillator, Level: 0.0000
   double ind5buffer[]; CopyBuffer(indHandlers[199][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 > 0.0000 + sigma && ind5val2 < 0.0000 - sigma;
   bool   ind5short = ind5val1 < 0.0000 - sigma && ind5val2 > 0.0000 + sigma;

   return CreateExitSignal(199, ind2long || ind3long || ind4long || ind5long, ind2short || ind3short || ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_200()
  {
   // Commodity Channel Index (Typical, 37)
   double ind0buffer[]; CopyBuffer(indHandlers[200][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < ind0val2 - sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma;
   // Directional Indicators (40)
   double ind1buffer0[]; CopyBuffer(indHandlers[200][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[200][1][0], 2, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   double ind1val3  = ind1buffer0[0];
   double ind1val4  = ind1buffer1[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;
   // RSI (Close, 27), Level: 52
   double ind2buffer[]; CopyBuffer(indHandlers[200][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 > 52 + sigma;
   bool   ind2short = ind2val1 < 100 - 52 - sigma;
   // Commodity Channel Index (Typical, 21)
   double ind3buffer[]; CopyBuffer(indHandlers[200][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;

   return CreateEntrySignal(200, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_200()
  {
   // Moving Average (Simple, Close, 29, 0)
   double ind4buffer[]; CopyBuffer(indHandlers[200][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = Open(0) < ind4val1 - sigma && Open(1) > ind4val2 + sigma;
   bool   ind4short = Open(0) > ind4val1 + sigma && Open(1) < ind4val2 - sigma;
   // Envelopes (Close, Simple, 22, 0.76)
   double ind5buffer0[]; CopyBuffer(indHandlers[200][5][0], 0, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[200][5][0], 1, 1, 2, ind5buffer1);
   double ind5upBand1 = ind5buffer0[1];
   double ind5dnBand1 = ind5buffer1[1];
   double ind5upBand2 = ind5buffer0[0];
   double ind5dnBand2 = ind5buffer1[0];
   bool   ind5long    = Open(0) < ind5upBand1 - sigma && Open(1) > ind5upBand2 + sigma;
   bool   ind5short   = Open(0) > ind5dnBand1 + sigma && Open(1) < ind5dnBand2 - sigma;
   // Moving Averages Crossover (Simple, Simple, 7, 34)
   double ind6buffer0[]; CopyBuffer(indHandlers[200][6][0], 0, 1, 2, ind6buffer0);
   double ind6buffer1[]; CopyBuffer(indHandlers[200][6][1], 0, 1, 2, ind6buffer1);
   double ind6val1  = ind6buffer0[1];
   double ind6val2  = ind6buffer1[1];
   bool   ind6long  = ind6val1 > ind6val2 + sigma;
   bool   ind6short = ind6val1 < ind6val2 - sigma;
   // Bollinger Bands (Close, 36, 3.31)
   double ind7buffer0[]; CopyBuffer(indHandlers[200][7][0], 1, 1, 2, ind7buffer0);
   double ind7buffer1[]; CopyBuffer(indHandlers[200][7][0], 2, 1, 2, ind7buffer1);
   double ind7upBand1 = ind7buffer0[1];
   double ind7dnBand1 = ind7buffer1[1];
   double ind7upBand2 = ind7buffer0[0];
   double ind7dnBand2 = ind7buffer1[0];
   bool   ind7long    = Open(0) > ind7upBand1 + sigma && Open(1) < ind7upBand2 - sigma;
   bool   ind7short   = Open(0) < ind7dnBand1 - sigma && Open(1) > ind7dnBand2 + sigma;

   return CreateExitSignal(200, ind4long || ind5long || ind6long || ind7long, ind4short || ind5short || ind6short || ind7short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_201()
  {
   // Bulls Power (33), Level: 16.3000
   double ind0buffer[]; CopyBuffer(indHandlers[201][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 16.3000 + sigma && ind0val2 < 16.3000 - sigma;
   bool   ind0short = ind0val1 < -16.3000 - sigma && ind0val2 > -16.3000 + sigma;

   return CreateEntrySignal(201, ind0long, ind0short, 73, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_201()
  {
   // Stochastic Signal (16, 5, 4)
   double ind1buffer0[]; CopyBuffer(indHandlers[201][1][0], MAIN_LINE,   1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[201][1][0], SIGNAL_LINE, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Commodity Channel Index (Typical, 37), Level: -39
   double ind2buffer[]; CopyBuffer(indHandlers[201][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < -39 - sigma;
   bool   ind2short = ind2val1 > 39 + sigma;

   return CreateExitSignal(201, ind1long || ind2long, ind1short || ind2short, 73, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_202()
  {
   // Bears Power (42)
   double ind0buffer[]; CopyBuffer(indHandlers[202][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < ind0val2 - sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma;
   // Moving Average of Oscillator (Close, 22, 48, 4), Level: 0.0000
   double ind1buffer[]; CopyBuffer(indHandlers[202][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < 0.0000 - sigma && ind1val2 > 0.0000 + sigma;
   bool   ind1short = ind1val1 > 0.0000 + sigma && ind1val2 < 0.0000 - sigma;
   // Moving Averages Crossover (Simple, Simple, 19, 24)
   double ind2buffer0[]; CopyBuffer(indHandlers[202][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[202][2][1], 0, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   double ind2val3  = ind2buffer0[0];
   double ind2val4  = ind2buffer1[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;

   return CreateEntrySignal(202, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_202()
  {
   // Stochastic (6, 2, 1)
   double ind3buffer[]; CopyBuffer(indHandlers[202][3][0], MAIN_LINE, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // RSI (Close, 5)
   double ind4buffer[]; CopyBuffer(indHandlers[202][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;
   // RSI (Close, 3), Level: 32
   double ind5buffer[]; CopyBuffer(indHandlers[202][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   bool   ind5long  = ind5val1 < 32 - sigma;
   bool   ind5short = ind5val1 > 100 - 32 + sigma;

   return CreateExitSignal(202, ind3long || ind4long || ind5long, ind3short || ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_203()
  {
   // Candle Color (49, 1)
   bool ind0long  = false;
   bool ind0short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 49;

      for (int b = 1 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind0long  = consecutiveBullish >= 1;
      ind0short = consecutiveBearish >= 1;
   }
   // Momentum (Close, 26)
   double ind1buffer[]; CopyBuffer(indHandlers[203][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   // Standard Deviation (Close, Simple, 13)
   double ind2buffer[]; CopyBuffer(indHandlers[203][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2long;
   // DeMarker (45)
   double ind3buffer[]; CopyBuffer(indHandlers[203][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // Williams' Percent Range (12), Level: -69.0
   double ind4buffer[]; CopyBuffer(indHandlers[203][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > -69.0 + sigma && ind4val2 < -69.0 - sigma;
   bool   ind4short = ind4val1 < -100 - -69.0 - sigma && ind4val2 > -100 - -69.0 + sigma;

   return CreateEntrySignal(203, ind0long && ind1long && ind2long && ind3long && ind4long, ind0short && ind1short && ind2short && ind3short && ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_203()
  {
   // Moving Average (Simple, Close, 24, 0)
   double ind5buffer[]; CopyBuffer(indHandlers[203][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   bool   ind5long  = Open(0) > ind5val1 + sigma;
   bool   ind5short = Open(0) < ind5val1 - sigma;
   // MACD (Close, 4, 49, 9)
   double ind6buffer[]; CopyBuffer(indHandlers[203][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   double ind6val3  = ind6buffer[0];
   bool   ind6long  = ind6val1 < ind6val2 - sigma && ind6val2 > ind6val3 + sigma;
   bool   ind6short = ind6val1 > ind6val2 + sigma && ind6val2 < ind6val3 - sigma;

   return CreateExitSignal(203, ind5long || ind6long, ind5short || ind6short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_204()
  {
   // Moving Average (Simple, Close, 16, 0)
   double ind0buffer[]; CopyBuffer(indHandlers[204][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = Open(0) < ind0val1 - sigma && Open(1) > ind0val2 + sigma;
   bool   ind0short = Open(0) > ind0val1 + sigma && Open(1) < ind0val2 - sigma;
   // Moving Averages Crossover (Simple, Simple, 11, 17)
   double ind1buffer0[]; CopyBuffer(indHandlers[204][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[204][1][1], 0, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Stochastic (13, 3, 5), Level: 52.0
   double ind2buffer[]; CopyBuffer(indHandlers[204][2][0], MAIN_LINE, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 > 52.0 + sigma;
   bool   ind2short = ind2val1 < 100 - 52.0 - sigma;
   // Candle Color (14, 2)
   bool ind3long  = false;
   bool ind3short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 14;

      for (int b = 2 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind3long  = consecutiveBearish >= 2;
      ind3short = consecutiveBullish >= 2;
   }
   // Standard Deviation (Close, Simple, 10)
   double ind4buffer[]; CopyBuffer(indHandlers[204][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;
   bool   ind4short = ind4long;

   return CreateEntrySignal(204, ind0long && ind1long && ind2long && ind3long && ind4long, ind0short && ind1short && ind2short && ind3short && ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_204()
  {
   // Stochastic (10, 7, 2)
   double ind5buffer[]; CopyBuffer(indHandlers[204][5][0], MAIN_LINE, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;
   // Bulls Power (18), Level: 0.0000
   double ind6buffer[]; CopyBuffer(indHandlers[204][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   bool   ind6long  = ind6val1 < 0.0000 - sigma;
   bool   ind6short = ind6val1 > 0.0000 + sigma;

   return CreateExitSignal(204, ind5long || ind6long, ind5short || ind6short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_205()
  {
   // Momentum (Close, 45), Level: 100.0000
   double ind0buffer[]; CopyBuffer(indHandlers[205][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 100.0000 - sigma && ind0val2 > 100.0000 + sigma;
   bool   ind0short = ind0val1 > 200 - 100.0000 + sigma && ind0val2 < 200 - 100.0000 - sigma;
   // Standard Deviation (Close, Simple, 28)
   double ind1buffer[]; CopyBuffer(indHandlers[205][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1long;
   // Average True Range (44)
   double ind2buffer[]; CopyBuffer(indHandlers[205][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2long;

   return CreateEntrySignal(205, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_205()
  {
   // RSI (Close, 48)
   double ind3buffer[]; CopyBuffer(indHandlers[205][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // Directional Indicators (28)
   double ind4buffer0[]; CopyBuffer(indHandlers[205][4][0], 1, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[205][4][0], 2, 1, 2, ind4buffer1);
   double ind4val1  = ind4buffer0[1];
   double ind4val2  = ind4buffer1[1];
   double ind4val3  = ind4buffer0[0];
   double ind4val4  = ind4buffer1[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val3 > ind4val4 + sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma && ind4val3 < ind4val4 - sigma;

   return CreateExitSignal(205, ind3long || ind4long, ind3short || ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_206()
  {
   // Accelerator Oscillator, Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[206][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   // Accelerator Oscillator, Level: 0.0000
   double ind1buffer[]; CopyBuffer(indHandlers[206][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 0.0000 + sigma;
   bool   ind1short = ind1val1 < 0.0000 - sigma;
   // Directional Indicators (50)
   double ind2buffer0[]; CopyBuffer(indHandlers[206][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[206][2][0], 2, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   double ind2val3  = ind2buffer0[0];
   double ind2val4  = ind2buffer1[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;
   // Bears Power (5)
   double ind3buffer[]; CopyBuffer(indHandlers[206][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateEntrySignal(206, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 96, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_206()
  {
   // Average True Range (35), Level: 9.6000
   double ind4buffer[]; CopyBuffer(indHandlers[206][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 > 9.6000 + sigma;
   bool   ind4short = ind4long;
   // Pin Bar (8, 26)

   bool ind5long  = false;
   bool ind5short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 8 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 26 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 26 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind5long  = isBullishPinBar;
      ind5short = isBearishPinBar;
   }

   return CreateExitSignal(206, ind4long || ind5long, ind4short || ind5short, 96, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_207()
  {
   // Candle Color (48, 1)
   bool ind0long  = false;
   bool ind0short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 48;

      for (int b = 1 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind0long  = consecutiveBearish >= 1;
      ind0short = consecutiveBullish >= 1;
   }
   // Directional Indicators (10)
   double ind1buffer0[]; CopyBuffer(indHandlers[207][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[207][1][0], 2, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Stochastic (7, 3, 4), Level: 64.0
   double ind2buffer[]; CopyBuffer(indHandlers[207][2][0], MAIN_LINE, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > 64.0 + sigma && ind2val2 < 64.0 - sigma;
   bool   ind2short = ind2val1 < 100 - 64.0 - sigma && ind2val2 > 100 - 64.0 + sigma;

   return CreateEntrySignal(207, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_207()
  {
   // Williams' Percent Range (10)
   double ind3buffer[]; CopyBuffer(indHandlers[207][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;

   return CreateExitSignal(207, ind3long, ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_208()
  {
   // Momentum (Close, 47), Level: 97.0000
   double ind0buffer[]; CopyBuffer(indHandlers[208][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 97.0000 - sigma && ind0val2 > 97.0000 + sigma;
   bool   ind0short = ind0val1 > 200 - 97.0000 + sigma && ind0val2 < 200 - 97.0000 - sigma;

   return CreateEntrySignal(208, ind0long, ind0short, 67, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_208()
  {
   // Standard Deviation (Close, Simple, 48)
   double ind1buffer[]; CopyBuffer(indHandlers[208][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1long;
   // Accelerator Oscillator
   double ind2buffer[]; CopyBuffer(indHandlers[208][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;

   return CreateExitSignal(208, ind1long || ind2long, ind1short || ind2short, 67, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_209()
  {
   // Candle Color (12, 2)
   bool ind0long  = false;
   bool ind0short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 12;

      for (int b = 2 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind0long  = consecutiveBearish >= 2;
      ind0short = consecutiveBullish >= 2;
   }
   // Standard Deviation (Close, Simple, 47), Level: 5.8000
   double ind1buffer[]; CopyBuffer(indHandlers[209][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 < 5.8000 - sigma;
   bool   ind1short = ind1long;
   // MACD Signal (Close, 21, 27, 12)
   double ind2buffer0[]; CopyBuffer(indHandlers[209][2][0], 0, 1, 3, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[209][2][0], 1, 1, 3, ind2buffer1);
   double ind2val1  = ind2buffer0[2] - ind2buffer1[2];
   double ind2val2  = ind2buffer0[1] - ind2buffer1[1];
   bool   ind2long  = ind2val1 < 0 - sigma && ind2val2 > 0 + sigma;
   bool   ind2short = ind2val1 > 0 + sigma && ind2val2 < 0 - sigma;
   // Accelerator Oscillator
   double ind3buffer[]; CopyBuffer(indHandlers[209][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   // Commodity Channel Index (Typical, 41), Level: 0
   double ind4buffer[]; CopyBuffer(indHandlers[209][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 > 0 + sigma;
   bool   ind4short = ind4val1 < 0 - sigma;

   return CreateEntrySignal(209, ind0long && ind1long && ind2long && ind3long && ind4long, ind0short && ind1short && ind2short && ind3short && ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_209()
  {
   // Awesome Oscillator, Level: -17.3000
   double ind5buffer[]; CopyBuffer(indHandlers[209][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 > -17.3000 + sigma && ind5val2 < -17.3000 - sigma;
   bool   ind5short = ind5val1 < 17.3000 - sigma && ind5val2 > 17.3000 + sigma;
   // Candle Color (7, 1)
   bool ind6long  = false;
   bool ind6short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 7;

      for (int b = 1 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind6long  = consecutiveBearish >= 1;
      ind6short = consecutiveBullish >= 1;
   }
   // Alligator (Smoothed, Median, 23, 10, 10, 9, 9, 5)
   double ind7buffer0[]; CopyBuffer(indHandlers[209][7][0], 0, 1, 2, ind7buffer0);
   double ind7buffer1[]; CopyBuffer(indHandlers[209][7][0], 1, 1, 2, ind7buffer1);
   double ind7buffer2[]; CopyBuffer(indHandlers[209][7][0], 2, 1, 2, ind7buffer2);
   double ind7val1  = ind7buffer2[1];
   double ind7val2  = ind7buffer0[1];
   double ind7val3  = ind7buffer2[0];
   double ind7val4  = ind7buffer0[0];
   bool   ind7long  = ind7val1 > ind7val2 + sigma && ind7val3 < ind7val4 - sigma;
   bool   ind7short = ind7val1 < ind7val2 - sigma && ind7val3 > ind7val4 + sigma;

   return CreateExitSignal(209, ind5long || ind6long || ind7long, ind5short || ind6short || ind7short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_210()
  {
   // Pin Bar (9, 39)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 39 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 39 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(210, ind0long, ind0short, 89, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_210()
  {
   // Envelopes (Close, Simple, 20, 0.75)
   double ind1buffer0[]; CopyBuffer(indHandlers[210][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[210][1][0], 1, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   bool   ind1long  = Open(0) > ind1upBand1 + sigma;
   bool   ind1short = Open(0) < ind1dnBand1 - sigma;

   return CreateExitSignal(210, ind1long, ind1short, 89, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_211()
  {
   // RSI (Close, 38), Level: 30
   double ind0buffer[]; CopyBuffer(indHandlers[211][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 30 - sigma && ind0val2 > 30 + sigma;
   bool   ind0short = ind0val1 > 100 - 30 + sigma && ind0val2 < 100 - 30 - sigma;

   return CreateEntrySignal(211, ind0long, ind0short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_211()
  {
   // ADX (14)
   double ind1buffer[]; CopyBuffer(indHandlers[211][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   bool   ind1short = ind1long;
   // Awesome Oscillator
   double ind2buffer[]; CopyBuffer(indHandlers[211][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;

   return CreateExitSignal(211, ind1long || ind2long, ind1short || ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_212()
  {
   // Bollinger Bands (Close, 24, 1.98)
   double ind0buffer0[]; CopyBuffer(indHandlers[212][0][0], 1, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[212][0][0], 2, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;
   bool   ind0short   = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;
   // DeMarker (35), Level: 0.34
   double ind1buffer[]; CopyBuffer(indHandlers[212][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 < 0.34 - sigma;
   bool   ind1short = ind1val1 > 1 - 0.34 + sigma;
   // Commodity Channel Index (Typical, 48)
   double ind2buffer[]; CopyBuffer(indHandlers[212][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;
   // Moving Average of Oscillator (Close, 21, 41, 11), Level: 0.0000
   double ind3buffer[]; CopyBuffer(indHandlers[212][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < 0.0000 - sigma && ind3val2 > 0.0000 + sigma;
   bool   ind3short = ind3val1 > 0.0000 + sigma && ind3val2 < 0.0000 - sigma;

   return CreateEntrySignal(212, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_212()
  {
   // Accelerator Oscillator, Level: 0.0000
   double ind4buffer[]; CopyBuffer(indHandlers[212][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > 0.0000 + sigma && ind4val2 < 0.0000 - sigma;
   bool   ind4short = ind4val1 < 0.0000 - sigma && ind4val2 > 0.0000 + sigma;
   // RSI (Close, 12)
   double ind5buffer[]; CopyBuffer(indHandlers[212][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   double ind5val3  = ind5buffer[0];
   bool   ind5long  = ind5val1 > ind5val2 + sigma && ind5val2 < ind5val3 - sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma && ind5val2 > ind5val3 + sigma;
   // RSI (Close, 25), Level: 40
   double ind6buffer[]; CopyBuffer(indHandlers[212][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   bool   ind6long  = ind6val1 < 40 - sigma && ind6val2 > 40 + sigma;
   bool   ind6short = ind6val1 > 100 - 40 + sigma && ind6val2 < 100 - 40 - sigma;

   return CreateExitSignal(212, ind4long || ind5long || ind6long, ind4short || ind5short || ind6short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_213()
  {
   // Accelerator Oscillator
   double ind0buffer[]; CopyBuffer(indHandlers[213][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   double ind0val3  = ind0buffer[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val2 > ind0val3 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val2 < ind0val3 - sigma;
   // Momentum (Close, 30), Level: 101.0000
   double ind1buffer[]; CopyBuffer(indHandlers[213][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > 101.0000 + sigma && ind1val2 < 101.0000 - sigma;
   bool   ind1short = ind1val1 < 200 - 101.0000 - sigma && ind1val2 > 200 - 101.0000 + sigma;
   // Commodity Channel Index (Typical, 17)
   double ind2buffer[]; CopyBuffer(indHandlers[213][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;

   return CreateEntrySignal(213, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 49, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_213()
  {
   // DeMarker (20)
   double ind3buffer[]; CopyBuffer(indHandlers[213][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateExitSignal(213, ind3long, ind3short, 49, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_214()
  {
   // Moving Average of Oscillator (Close, 14, 43, 8), Level: -3.6500
   double ind0buffer[]; CopyBuffer(indHandlers[214][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > -3.6500 + sigma && ind0val2 < -3.6500 - sigma;
   bool   ind0short = ind0val1 < 3.6500 - sigma && ind0val2 > 3.6500 + sigma;

   return CreateEntrySignal(214, ind0long, ind0short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_214()
  {
   // Commodity Channel Index (Typical, 32), Level: 0
   double ind1buffer[]; CopyBuffer(indHandlers[214][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 0 + sigma;
   bool   ind1short = ind1val1 < 0 - sigma;
   // ADX (23), Level: 39.0
   double ind2buffer[]; CopyBuffer(indHandlers[214][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 39.0 - sigma;
   bool   ind2short = ind2long;
   // MACD Signal (Close, 8, 43, 13)
   double ind3buffer0[]; CopyBuffer(indHandlers[214][3][0], 0, 1, 3, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[214][3][0], 1, 1, 3, ind3buffer1);
   double ind3val1  = ind3buffer0[2] - ind3buffer1[2];
   double ind3val2  = ind3buffer0[1] - ind3buffer1[1];
   bool   ind3long  = ind3val1 > 0 + sigma && ind3val2 < 0 - sigma;
   bool   ind3short = ind3val1 < 0 - sigma && ind3val2 > 0 + sigma;
   // Standard Deviation (Close, Simple, 18), Level: 22.8000
   double ind4buffer[]; CopyBuffer(indHandlers[214][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 < 22.8000 - sigma;
   bool   ind4short = ind4long;

   return CreateExitSignal(214, ind1long || ind2long || ind3long || ind4long, ind1short || ind2short || ind3short || ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_215()
  {
   // MACD (Close, 22, 33, 9)
   double ind0buffer[]; CopyBuffer(indHandlers[215][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 0 - sigma && ind0val2 > 0 + sigma;
   bool   ind0short = ind0val1 > 0 + sigma && ind0val2 < 0 - sigma;
   // Momentum (Close, 42)
   double ind1buffer[]; CopyBuffer(indHandlers[215][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Standard Deviation (Close, Simple, 17), Level: 7.0000
   double ind2buffer[]; CopyBuffer(indHandlers[215][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 7.0000 - sigma;
   bool   ind2short = ind2long;
   // Accelerator Oscillator
   double ind3buffer[]; CopyBuffer(indHandlers[215][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // Commodity Channel Index (Typical, 20)
   double ind4buffer[]; CopyBuffer(indHandlers[215][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;

   return CreateEntrySignal(215, ind0long && ind1long && ind2long && ind3long && ind4long, ind0short && ind1short && ind2short && ind3short && ind4short, 74, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_215()
  {
   // Directional Indicators (12)
   double ind5buffer0[]; CopyBuffer(indHandlers[215][5][0], 1, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[215][5][0], 2, 1, 2, ind5buffer1);
   double ind5val1  = ind5buffer0[1];
   double ind5val2  = ind5buffer1[1];
   double ind5val3  = ind5buffer0[0];
   double ind5val4  = ind5buffer1[0];
   bool   ind5long  = ind5val1 < ind5val2 - sigma && ind5val3 > ind5val4 + sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma && ind5val3 < ind5val4 - sigma;
   // Pin Bar (7, 45)

   bool ind6long  = false;
   bool ind6short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 7 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 45 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 45 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind6long  = isBullishPinBar;
      ind6short = isBearishPinBar;
   }
   // Envelopes (Close, Simple, 44, 0.52)
   double ind7buffer0[]; CopyBuffer(indHandlers[215][7][0], 0, 1, 2, ind7buffer0);
   double ind7buffer1[]; CopyBuffer(indHandlers[215][7][0], 1, 1, 2, ind7buffer1);
   double ind7upBand1 = ind7buffer0[1];
   double ind7dnBand1 = ind7buffer1[1];
   double ind7upBand2 = ind7buffer0[0];
   double ind7dnBand2 = ind7buffer1[0];
   bool   ind7long    = Open(0) > ind7dnBand1 + sigma && Open(1) < ind7dnBand2 - sigma;
   bool   ind7short   = Open(0) < ind7upBand1 - sigma && Open(1) > ind7upBand2 + sigma;
   // Bollinger Bands (Close, 16, 1.84)
   double ind8buffer0[]; CopyBuffer(indHandlers[215][8][0], 1, 1, 2, ind8buffer0);
   double ind8buffer1[]; CopyBuffer(indHandlers[215][8][0], 2, 1, 2, ind8buffer1);
   double ind8upBand1 = ind8buffer0[1];
   double ind8dnBand1 = ind8buffer1[1];
   double ind8upBand2 = ind8buffer0[0];
   double ind8dnBand2 = ind8buffer1[0];
   bool   ind8long    = Open(0) > ind8dnBand1 + sigma && Open(1) < ind8dnBand2 - sigma;
   bool   ind8short   = Open(0) < ind8upBand1 - sigma && Open(1) > ind8upBand2 + sigma;

   return CreateExitSignal(215, ind5long || ind6long || ind7long || ind8long, ind5short || ind6short || ind7short || ind8short, 74, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_216()
  {
   // Moving Averages Crossover (Simple, Simple, 22, 32)
   double ind0buffer0[]; CopyBuffer(indHandlers[216][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[216][0][1], 0, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer0[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   // Awesome Oscillator
   double ind1buffer[]; CopyBuffer(indHandlers[216][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // MACD Signal (Close, 19, 31, 5)
   double ind2buffer0[]; CopyBuffer(indHandlers[216][2][0], 0, 1, 3, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[216][2][0], 1, 1, 3, ind2buffer1);
   double ind2val1  = ind2buffer0[2] - ind2buffer1[2];
   bool   ind2long  = ind2val1 < 0 - sigma;
   bool   ind2short = ind2val1 > 0 + sigma;
   // Bulls Power (30)
   double ind3buffer[]; CopyBuffer(indHandlers[216][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // Bollinger Bands (Close, 31, 2.29)
   double ind4buffer0[]; CopyBuffer(indHandlers[216][4][0], 1, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[216][4][0], 2, 1, 2, ind4buffer1);
   double ind4upBand1 = ind4buffer0[1];
   double ind4dnBand1 = ind4buffer1[1];
   bool   ind4long  = Open(0) < ind4dnBand1 - sigma;
   bool   ind4short = Open(0) > ind4upBand1 + sigma;

   return CreateEntrySignal(216, ind0long && ind1long && ind2long && ind3long && ind4long, ind0short && ind1short && ind2short && ind3short && ind4short, 70, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_216()
  {
   // Stochastic Signal (3, 2, 2)
   double ind5buffer0[]; CopyBuffer(indHandlers[216][5][0], MAIN_LINE,   1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[216][5][0], SIGNAL_LINE, 1, 2, ind5buffer1);
   double ind5val1  = ind5buffer0[1];
   double ind5val2  = ind5buffer1[1];
   bool   ind5long  = ind5val1 > ind5val2 + sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma;
   // Envelopes (Close, Simple, 25, 0.33)
   double ind6buffer0[]; CopyBuffer(indHandlers[216][6][0], 0, 1, 2, ind6buffer0);
   double ind6buffer1[]; CopyBuffer(indHandlers[216][6][0], 1, 1, 2, ind6buffer1);
   double ind6upBand1 = ind6buffer0[1];
   double ind6dnBand1 = ind6buffer1[1];
   double ind6upBand2 = ind6buffer0[0];
   double ind6dnBand2 = ind6buffer1[0];
   bool   ind6long    = Open(0) > ind6upBand1 + sigma && Open(1) < ind6upBand2 - sigma;
   bool   ind6short   = Open(0) < ind6dnBand1 - sigma && Open(1) > ind6dnBand2 + sigma;
   // Average True Range (30)
   double ind7buffer[]; CopyBuffer(indHandlers[216][7][0], 0, 1, 3, ind7buffer);
   double ind7val1  = ind7buffer[2];
   double ind7val2  = ind7buffer[1];
   double ind7val3  = ind7buffer[0];
   bool   ind7long  = ind7val1 < ind7val2 - sigma && ind7val2 > ind7val3 + sigma;
   bool   ind7short = ind7long;
   // Envelopes (Close, Simple, 42, 0.79)
   double ind8buffer0[]; CopyBuffer(indHandlers[216][8][0], 0, 1, 2, ind8buffer0);
   double ind8buffer1[]; CopyBuffer(indHandlers[216][8][0], 1, 1, 2, ind8buffer1);
   double ind8upBand1 = ind8buffer0[1];
   double ind8dnBand1 = ind8buffer1[1];
   bool   ind8long  = Open(0) > ind8upBand1 + sigma;
   bool   ind8short = Open(0) < ind8dnBand1 - sigma;

   return CreateExitSignal(216, ind5long || ind6long || ind7long || ind8long, ind5short || ind6short || ind7short || ind8short, 70, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_217()
  {
   // MACD Signal (Close, 23, 24, 13)
   double ind0buffer0[]; CopyBuffer(indHandlers[217][0][0], 0, 1, 3, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[217][0][0], 1, 1, 3, ind0buffer1);
   double ind0val1  = ind0buffer0[2] - ind0buffer1[2];
   double ind0val2  = ind0buffer0[1] - ind0buffer1[1];
   bool   ind0long  = ind0val1 > 0 + sigma && ind0val2 < 0 - sigma;
   bool   ind0short = ind0val1 < 0 - sigma && ind0val2 > 0 + sigma;
   // Moving Averages Crossover (Simple, Simple, 24, 27)
   double ind1buffer0[]; CopyBuffer(indHandlers[217][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[217][1][1], 0, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   double ind1val3  = ind1buffer0[0];
   double ind1val4  = ind1buffer1[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;

   return CreateEntrySignal(217, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_217()
  {
   // Bulls Power (40), Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[217][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 0.0000 - sigma;
   bool   ind2short = ind2val1 > 0.0000 + sigma;
   // Moving Average (Simple, Close, 31, 0)
   double ind3buffer[]; CopyBuffer(indHandlers[217][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = Open(0) < ind3val1 - sigma && Open(1) > ind3val2 + sigma;
   bool   ind3short = Open(0) > ind3val1 + sigma && Open(1) < ind3val2 - sigma;
   // Momentum (Close, 3), Level: 95.0000
   double ind4buffer[]; CopyBuffer(indHandlers[217][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 < 95.0000 - sigma;
   bool   ind4short = ind4val1 > 200 - 95.0000 + sigma;
   // DeMarker (24), Level: 0.24
   double ind5buffer[]; CopyBuffer(indHandlers[217][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 > 0.24 + sigma && ind5val2 < 0.24 - sigma;
   bool   ind5short = ind5val1 < 1 - 0.24 - sigma && ind5val2 > 1 - 0.24 + sigma;

   return CreateExitSignal(217, ind2long || ind3long || ind4long || ind5long, ind2short || ind3short || ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_218()
  {
   // Bollinger Bands (Close, 44, 1.77)
   double ind0buffer0[]; CopyBuffer(indHandlers[218][0][0], 1, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[218][0][0], 2, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) < ind0upBand1 - sigma && Open(1) > ind0upBand2 + sigma;
   bool   ind0short   = Open(0) > ind0dnBand1 + sigma && Open(1) < ind0dnBand2 - sigma;
   // MACD (Close, 11, 20, 9)
   double ind1buffer[]; CopyBuffer(indHandlers[218][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Moving Average of Oscillator (Close, 21, 34, 8), Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[218][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 > 0.0000 + sigma;
   bool   ind2short = ind2val1 < 0.0000 - sigma;
   // MACD (Close, 18, 19, 9)
   double ind3buffer[]; CopyBuffer(indHandlers[218][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 0 + sigma;
   bool   ind3short = ind3val1 < 0 - sigma;
   // Moving Averages Crossover (Simple, Simple, 19, 31)
   double ind4buffer0[]; CopyBuffer(indHandlers[218][4][0], 0, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[218][4][1], 0, 1, 2, ind4buffer1);
   double ind4val1  = ind4buffer0[1];
   double ind4val2  = ind4buffer1[1];
   bool   ind4long  = ind4val1 < ind4val2 - sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma;

   return CreateEntrySignal(218, ind0long && ind1long && ind2long && ind3long && ind4long, ind0short && ind1short && ind2short && ind3short && ind4short, 94, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_218()
  {
   // MACD (Close, 20, 48, 9)
   double ind5buffer[]; CopyBuffer(indHandlers[218][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;
   // Moving Average of Oscillator (Close, 12, 21, 4)
   double ind6buffer[]; CopyBuffer(indHandlers[218][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   bool   ind6long  = ind6val1 > ind6val2 + sigma;
   bool   ind6short = ind6val1 < ind6val2 - sigma;

   return CreateExitSignal(218, ind5long || ind6long, ind5short || ind6short, 94, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_219()
  {
   // RSI (Close, 8), Level: 80
   double ind0buffer[]; CopyBuffer(indHandlers[219][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 80 - sigma && ind0val2 > 80 + sigma;
   bool   ind0short = ind0val1 > 100 - 80 + sigma && ind0val2 < 100 - 80 - sigma;
   // Accelerator Oscillator
   double ind1buffer[]; CopyBuffer(indHandlers[219][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Standard Deviation (Close, Simple, 23)
   double ind2buffer[]; CopyBuffer(indHandlers[219][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2long;

   return CreateEntrySignal(219, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_219()
  {
   // Stochastic (11, 3, 11), Level: 70.0
   double ind3buffer[]; CopyBuffer(indHandlers[219][3][0], MAIN_LINE, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < 70.0 - sigma && ind3val2 > 70.0 + sigma;
   bool   ind3short = ind3val1 > 100 - 70.0 + sigma && ind3val2 < 100 - 70.0 - sigma;
   // DeMarker (28), Level: 0.63
   double ind4buffer[]; CopyBuffer(indHandlers[219][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < 0.63 - sigma && ind4val2 > 0.63 + sigma;
   bool   ind4short = ind4val1 > 1 - 0.63 + sigma && ind4val2 < 1 - 0.63 - sigma;
   // Accelerator Oscillator, Level: 0.0000
   double ind5buffer[]; CopyBuffer(indHandlers[219][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 > 0.0000 + sigma && ind5val2 < 0.0000 - sigma;
   bool   ind5short = ind5val1 < 0.0000 - sigma && ind5val2 > 0.0000 + sigma;

   return CreateExitSignal(219, ind3long || ind4long || ind5long, ind3short || ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_220()
  {
   // RSI (Close, 33), Level: 30
   double ind0buffer[]; CopyBuffer(indHandlers[220][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 30 - sigma && ind0val2 > 30 + sigma;
   bool   ind0short = ind0val1 > 100 - 30 + sigma && ind0val2 < 100 - 30 - sigma;

   return CreateEntrySignal(220, ind0long, ind0short, 49, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_220()
  {
   // Average True Range (4), Level: 0.7000
   double ind1buffer[]; CopyBuffer(indHandlers[220][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 0.7000 + sigma;
   bool   ind1short = ind1long;

   return CreateExitSignal(220, ind1long, ind1short, 49, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_221()
  {
   // Moving Average (Simple, Close, 33, 0)
   double ind0buffer[]; CopyBuffer(indHandlers[221][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < ind0val2 - sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma;
   // Commodity Channel Index (Typical, 6)
   double ind1buffer[]; CopyBuffer(indHandlers[221][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Bulls Power (22)
   double ind2buffer[]; CopyBuffer(indHandlers[221][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   // Average True Range (17)
   double ind3buffer[]; CopyBuffer(indHandlers[221][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3long;
   // Stochastic (9, 8, 8)
   double ind4buffer[]; CopyBuffer(indHandlers[221][4][0], MAIN_LINE, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;

   return CreateEntrySignal(221, ind0long && ind1long && ind2long && ind3long && ind4long, ind0short && ind1short && ind2short && ind3short && ind4short, 79, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_221()
  {
   // Bollinger Bands (Close, 37, 1.88)
   double ind5buffer0[]; CopyBuffer(indHandlers[221][5][0], 1, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[221][5][0], 2, 1, 2, ind5buffer1);
   double ind5upBand1 = ind5buffer0[1];
   double ind5dnBand1 = ind5buffer1[1];
   double ind5upBand2 = ind5buffer0[0];
   double ind5dnBand2 = ind5buffer1[0];
   bool   ind5long    = Open(0) < ind5upBand1 - sigma && Open(1) > ind5upBand2 + sigma;
   bool   ind5short   = Open(0) > ind5dnBand1 + sigma && Open(1) < ind5dnBand2 - sigma;

   return CreateExitSignal(221, ind5long, ind5short, 79, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_222()
  {
   // MACD (Close, 10, 39, 9)
   double ind0buffer[]; CopyBuffer(indHandlers[222][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0 + sigma && ind0val2 < 0 - sigma;
   bool   ind0short = ind0val1 < 0 - sigma && ind0val2 > 0 + sigma;
   // Bears Power (29), Level: 0.0000
   double ind1buffer[]; CopyBuffer(indHandlers[222][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 0.0000 + sigma;
   bool   ind1short = ind1val1 < 0.0000 - sigma;
   // Average True Range (3), Level: 1.4000
   double ind2buffer[]; CopyBuffer(indHandlers[222][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 1.4000 - sigma;
   bool   ind2short = ind2long;
   // Bears Power (3)
   double ind3buffer[]; CopyBuffer(indHandlers[222][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   // Directional Indicators (8)
   double ind4buffer0[]; CopyBuffer(indHandlers[222][4][0], 1, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[222][4][0], 2, 1, 2, ind4buffer1);
   double ind4val1  = ind4buffer0[1];
   double ind4val2  = ind4buffer1[1];
   bool   ind4long  = ind4val1 > ind4val2 + sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma;

   return CreateEntrySignal(222, ind0long && ind1long && ind2long && ind3long && ind4long, ind0short && ind1short && ind2short && ind3short && ind4short, 94, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_222()
  {
   // Moving Average of Oscillator (Close, 20, 49, 8)
   double ind5buffer[]; CopyBuffer(indHandlers[222][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   double ind5val3  = ind5buffer[0];
   bool   ind5long  = ind5val1 < ind5val2 - sigma && ind5val2 > ind5val3 + sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma && ind5val2 < ind5val3 - sigma;
   // Candle Color (15, 1)
   bool ind6long  = false;
   bool ind6short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 15;

      for (int b = 1 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind6long  = consecutiveBearish >= 1;
      ind6short = consecutiveBullish >= 1;
   }

   return CreateExitSignal(222, ind5long || ind6long, ind5short || ind6short, 94, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_223()
  {
   // Bollinger Bands (Close, 36, 3.59)
   double ind0buffer0[]; CopyBuffer(indHandlers[223][0][0], 1, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[223][0][0], 2, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;
   bool   ind0short   = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;
   // DeMarker (11)
   double ind1buffer[]; CopyBuffer(indHandlers[223][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;

   return CreateEntrySignal(223, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_223()
  {
   // Average True Range (14)
   double ind2buffer[]; CopyBuffer(indHandlers[223][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2long;
   // Accelerator Oscillator, Level: -4.2000
   double ind3buffer[]; CopyBuffer(indHandlers[223][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > -4.2000 + sigma && ind3val2 < -4.2000 - sigma;
   bool   ind3short = ind3val1 < 4.2000 - sigma && ind3val2 > 4.2000 + sigma;
   // Stochastic Signal (6, 5, 2)
   double ind4buffer0[]; CopyBuffer(indHandlers[223][4][0], MAIN_LINE,   1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[223][4][0], SIGNAL_LINE, 1, 2, ind4buffer1);
   double ind4val1  = ind4buffer0[1];
   double ind4val2  = ind4buffer1[1];
   double ind4val3  = ind4buffer0[0];
   double ind4val4  = ind4buffer1[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val3 > ind4val4 + sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma && ind4val3 < ind4val4 - sigma;

   return CreateExitSignal(223, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_224()
  {
   // Moving Average of Oscillator (Close, 17, 20, 10), Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[224][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   bool   ind0short = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   // RSI (Close, 45)
   double ind1buffer[]; CopyBuffer(indHandlers[224][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Williams' Percent Range (32)
   double ind2buffer[]; CopyBuffer(indHandlers[224][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;
   // DeMarker (19), Level: 0.62
   double ind3buffer[]; CopyBuffer(indHandlers[224][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 0.62 + sigma;
   bool   ind3short = ind3val1 < 1 - 0.62 - sigma;
   // Accelerator Oscillator
   double ind4buffer[]; CopyBuffer(indHandlers[224][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;

   return CreateEntrySignal(224, ind0long && ind1long && ind2long && ind3long && ind4long, ind0short && ind1short && ind2short && ind3short && ind4short, 49, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_224()
  {
   // RSI (Close, 29)
   double ind5buffer[]; CopyBuffer(indHandlers[224][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   double ind5val3  = ind5buffer[0];
   bool   ind5long  = ind5val1 < ind5val2 - sigma && ind5val2 > ind5val3 + sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma && ind5val2 < ind5val3 - sigma;

   return CreateExitSignal(224, ind5long, ind5short, 49, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_225()
  {
   // Pin Bar (9, 39)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 39 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 39 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }
   // Pin Bar (9, 30)

   bool ind1long  = false;
   bool ind1short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 30 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 30 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind1long  = isBullishPinBar;
      ind1short = isBearishPinBar;
   }

   return CreateEntrySignal(225, ind0long && ind1long, ind0short && ind1short, 71, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_225()
  {
   // Standard Deviation (Close, Simple, 18), Level: 3.1000
   double ind2buffer[]; CopyBuffer(indHandlers[225][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > 3.1000 + sigma && ind2val2 < 3.1000 - sigma;
   bool   ind2short = ind2long;
   // Momentum (Close, 3), Level: 97.0000
   double ind3buffer[]; CopyBuffer(indHandlers[225][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 < 97.0000 - sigma;
   bool   ind3short = ind3val1 > 200 - 97.0000 + sigma;
   // Moving Average (Simple, Close, 35, 0)
   double ind4buffer[]; CopyBuffer(indHandlers[225][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = Open(0) < ind4val1 - sigma && Open(1) > ind4val2 + sigma;
   bool   ind4short = Open(0) > ind4val1 + sigma && Open(1) < ind4val2 - sigma;
   // DeMarker (49), Level: 0.92
   double ind5buffer[]; CopyBuffer(indHandlers[225][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 > 0.92 + sigma && ind5val2 < 0.92 - sigma;
   bool   ind5short = ind5val1 < 1 - 0.92 - sigma && ind5val2 > 1 - 0.92 + sigma;

   return CreateExitSignal(225, ind2long || ind3long || ind4long || ind5long, ind2short || ind3short || ind4short || ind5short, 71, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_226()
  {
   // Moving Average (Simple, Close, 5, 0)
   double ind0buffer[]; CopyBuffer(indHandlers[226][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = Open(0) < ind0val1 - sigma && Open(1) > ind0val2 + sigma;
   bool   ind0short = Open(0) > ind0val1 + sigma && Open(1) < ind0val2 - sigma;
   // Commodity Channel Index (Typical, 9)
   double ind1buffer[]; CopyBuffer(indHandlers[226][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   // Bulls Power (19)
   double ind2buffer[]; CopyBuffer(indHandlers[226][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;
   // MACD Signal (Close, 11, 37, 12)
   double ind3buffer0[]; CopyBuffer(indHandlers[226][3][0], 0, 1, 3, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[226][3][0], 1, 1, 3, ind3buffer1);
   double ind3val1  = ind3buffer0[2] - ind3buffer1[2];
   bool   ind3long  = ind3val1 < 0 - sigma;
   bool   ind3short = ind3val1 > 0 + sigma;

   return CreateEntrySignal(226, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 23, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_226()
  {
   // Awesome Oscillator, Level: 0.0000
   double ind4buffer[]; CopyBuffer(indHandlers[226][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 < 0.0000 - sigma;
   bool   ind4short = ind4val1 > 0.0000 + sigma;

   return CreateExitSignal(226, ind4long, ind4short, 23, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_227()
  {
   // Williams' Percent Range (21), Level: -49.0
   double ind0buffer[]; CopyBuffer(indHandlers[227][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   bool   ind0long  = ind0val1 > -49.0 + sigma;
   bool   ind0short = ind0val1 < -100 - -49.0 - sigma;
   // MACD Signal (Close, 15, 45, 7)
   double ind1buffer0[]; CopyBuffer(indHandlers[227][1][0], 0, 1, 3, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[227][1][0], 1, 1, 3, ind1buffer1);
   double ind1val1  = ind1buffer0[2] - ind1buffer1[2];
   bool   ind1long  = ind1val1 < 0 - sigma;
   bool   ind1short = ind1val1 > 0 + sigma;
   // Awesome Oscillator, Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[227][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < 0.0000 - sigma && ind2val2 > 0.0000 + sigma;
   bool   ind2short = ind2val1 > 0.0000 + sigma && ind2val2 < 0.0000 - sigma;

   return CreateEntrySignal(227, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 79, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_227()
  {
   // Stochastic (14, 4, 1)
   double ind3buffer[]; CopyBuffer(indHandlers[227][3][0], MAIN_LINE, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;
   // Directional Indicators (1)
   double ind4buffer0[]; CopyBuffer(indHandlers[227][4][0], 1, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[227][4][0], 2, 1, 2, ind4buffer1);
   double ind4val1  = ind4buffer0[1];
   double ind4val2  = ind4buffer1[1];
   bool   ind4long  = ind4val1 < ind4val2 - sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma;
   // Awesome Oscillator
   double ind5buffer[]; CopyBuffer(indHandlers[227][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;

   return CreateExitSignal(227, ind3long || ind4long || ind5long, ind3short || ind4short || ind5short, 79, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_228()
  {
   // MACD (Close, 21, 38, 9)
   double ind0buffer[]; CopyBuffer(indHandlers[228][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0 + sigma && ind0val2 < 0 - sigma;
   bool   ind0short = ind0val1 < 0 - sigma && ind0val2 > 0 + sigma;
   // Momentum (Close, 22)
   double ind1buffer[]; CopyBuffer(indHandlers[228][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Stochastic Signal (9, 8, 4)
   double ind2buffer0[]; CopyBuffer(indHandlers[228][2][0], MAIN_LINE,   1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[228][2][0], SIGNAL_LINE, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   double ind2val3  = ind2buffer0[0];
   double ind2val4  = ind2buffer1[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;

   return CreateEntrySignal(228, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 62, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_228()
  {
   // Momentum (Close, 43)
   double ind3buffer[]; CopyBuffer(indHandlers[228][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;
   // Awesome Oscillator, Level: 0.0000
   double ind4buffer[]; CopyBuffer(indHandlers[228][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < 0.0000 - sigma && ind4val2 > 0.0000 + sigma;
   bool   ind4short = ind4val1 > 0.0000 + sigma && ind4val2 < 0.0000 - sigma;
   // Bulls Power (44), Level: 0.0000
   double ind5buffer[]; CopyBuffer(indHandlers[228][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   bool   ind5long  = ind5val1 > 0.0000 + sigma;
   bool   ind5short = ind5val1 < 0.0000 - sigma;
   // Pin Bar (6, 31)

   bool ind6long  = false;
   bool ind6short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 6 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 31 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 31 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind6long  = isBullishPinBar;
      ind6short = isBearishPinBar;
   }

   return CreateExitSignal(228, ind3long || ind4long || ind5long || ind6long, ind3short || ind4short || ind5short || ind6short, 62, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_229()
  {
   // Directional Indicators (19)
   double ind0buffer0[]; CopyBuffer(indHandlers[229][0][0], 1, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[229][0][0], 2, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer0[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   // ADX (9), Level: 24.0
   double ind1buffer[]; CopyBuffer(indHandlers[229][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > 24.0 + sigma && ind1val2 < 24.0 - sigma;
   bool   ind1short = ind1long;

   return CreateEntrySignal(229, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_229()
  {
   // ADX (13), Level: 36.0
   double ind2buffer[]; CopyBuffer(indHandlers[229][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 36.0 - sigma;
   bool   ind2short = ind2long;
   // Bollinger Bands (Close, 23, 3.50)
   double ind3buffer0[]; CopyBuffer(indHandlers[229][3][0], 1, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[229][3][0], 2, 1, 2, ind3buffer1);
   double ind3upBand1 = ind3buffer0[1];
   double ind3dnBand1 = ind3buffer1[1];
   double ind3upBand2 = ind3buffer0[0];
   double ind3dnBand2 = ind3buffer1[0];
   bool   ind3long    = Open(0) > ind3dnBand1 + sigma && Open(1) < ind3dnBand2 - sigma;
   bool   ind3short   = Open(0) < ind3upBand1 - sigma && Open(1) > ind3upBand2 + sigma;
   // MACD Signal (Close, 18, 36, 10)
   double ind4buffer0[]; CopyBuffer(indHandlers[229][4][0], 0, 1, 3, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[229][4][0], 1, 1, 3, ind4buffer1);
   double ind4val1  = ind4buffer0[2] - ind4buffer1[2];
   double ind4val2  = ind4buffer0[1] - ind4buffer1[1];
   bool   ind4long  = ind4val1 > 0 + sigma && ind4val2 < 0 - sigma;
   bool   ind4short = ind4val1 < 0 - sigma && ind4val2 > 0 + sigma;

   return CreateExitSignal(229, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_230()
  {
   // Moving Average of Oscillator (Close, 4, 18, 9), Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[230][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   bool   ind0short = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   // Stochastic (6, 3, 3), Level: 75.0
   double ind1buffer[]; CopyBuffer(indHandlers[230][1][0], MAIN_LINE, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 75.0 + sigma;
   bool   ind1short = ind1val1 < 100 - 75.0 - sigma;

   return CreateEntrySignal(230, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_230()
  {
   // Stochastic (2, 1, 1)
   double ind2buffer[]; CopyBuffer(indHandlers[230][2][0], MAIN_LINE, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   // Envelopes (Close, Simple, 15, 0.90)
   double ind3buffer0[]; CopyBuffer(indHandlers[230][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[230][3][0], 1, 1, 2, ind3buffer1);
   double ind3upBand1 = ind3buffer0[1];
   double ind3dnBand1 = ind3buffer1[1];
   double ind3upBand2 = ind3buffer0[0];
   double ind3dnBand2 = ind3buffer1[0];
   bool   ind3long    = Open(0) > ind3upBand1 + sigma && Open(1) < ind3upBand2 - sigma;
   bool   ind3short   = Open(0) < ind3dnBand1 - sigma && Open(1) > ind3dnBand2 + sigma;
   // MACD Signal (Close, 5, 11, 8)
   double ind4buffer0[]; CopyBuffer(indHandlers[230][4][0], 0, 1, 3, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[230][4][0], 1, 1, 3, ind4buffer1);
   double ind4val1  = ind4buffer0[2] - ind4buffer1[2];
   double ind4val2  = ind4buffer0[1] - ind4buffer1[1];
   bool   ind4long  = ind4val1 > 0 + sigma && ind4val2 < 0 - sigma;
   bool   ind4short = ind4val1 < 0 - sigma && ind4val2 > 0 + sigma;

   return CreateExitSignal(230, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_231()
  {
   // Envelopes (Close, Simple, 34, 0.97)
   double ind0buffer0[]; CopyBuffer(indHandlers[231][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[231][0][0], 1, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;
   bool   ind0short   = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;
   // Bears Power (50), Level: 0.0000
   double ind1buffer[]; CopyBuffer(indHandlers[231][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 0.0000 + sigma;
   bool   ind1short = ind1val1 < 0.0000 - sigma;

   return CreateEntrySignal(231, ind0long && ind1long, ind0short && ind1short, 75, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_231()
  {
   // MACD Signal (Close, 22, 40, 11)
   double ind2buffer0[]; CopyBuffer(indHandlers[231][2][0], 0, 1, 3, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[231][2][0], 1, 1, 3, ind2buffer1);
   double ind2val1  = ind2buffer0[2] - ind2buffer1[2];
   double ind2val2  = ind2buffer0[1] - ind2buffer1[1];
   bool   ind2long  = ind2val1 < 0 - sigma && ind2val2 > 0 + sigma;
   bool   ind2short = ind2val1 > 0 + sigma && ind2val2 < 0 - sigma;
   // Moving Average (Simple, Close, 17, 0)
   double ind3buffer[]; CopyBuffer(indHandlers[231][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = Open(0) < ind3val1 - sigma;
   bool   ind3short = Open(0) > ind3val1 + sigma;
   // MACD (Close, 25, 43, 9)
   double ind4buffer[]; CopyBuffer(indHandlers[231][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > ind4val2 + sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma;
   // Commodity Channel Index (Typical, 21)
   double ind5buffer[]; CopyBuffer(indHandlers[231][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   double ind5val3  = ind5buffer[0];
   bool   ind5long  = ind5val1 > ind5val2 + sigma && ind5val2 < ind5val3 - sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma && ind5val2 > ind5val3 + sigma;

   return CreateExitSignal(231, ind2long || ind3long || ind4long || ind5long, ind2short || ind3short || ind4short || ind5short, 75, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_232()
  {
   // Momentum (Close, 44), Level: 97.0000
   double ind0buffer[]; CopyBuffer(indHandlers[232][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 97.0000 - sigma && ind0val2 > 97.0000 + sigma;
   bool   ind0short = ind0val1 > 200 - 97.0000 + sigma && ind0val2 < 200 - 97.0000 - sigma;

   return CreateEntrySignal(232, ind0long, ind0short, 65, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_232()
  {
   // Stochastic Signal (13, 9, 1)
   double ind1buffer0[]; CopyBuffer(indHandlers[232][1][0], MAIN_LINE,   1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[232][1][0], SIGNAL_LINE, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   double ind1val3  = ind1buffer0[0];
   double ind1val4  = ind1buffer1[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;
   // Directional Indicators (49)
   double ind2buffer0[]; CopyBuffer(indHandlers[232][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[232][2][0], 2, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;
   // RSI (Close, 19), Level: 11
   double ind3buffer[]; CopyBuffer(indHandlers[232][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 < 11 - sigma;
   bool   ind3short = ind3val1 > 100 - 11 + sigma;

   return CreateExitSignal(232, ind1long || ind2long || ind3long, ind1short || ind2short || ind3short, 65, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_233()
  {
   // Candle Color (31, 5)
   bool ind0long  = false;
   bool ind0short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 31;

      for (int b = 5 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind0long  = consecutiveBullish >= 5;
      ind0short = consecutiveBearish >= 5;
   }
   // ADX (7), Level: 39.0
   double ind1buffer[]; CopyBuffer(indHandlers[233][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > 39.0 + sigma && ind1val2 < 39.0 - sigma;
   bool   ind1short = ind1long;

   return CreateEntrySignal(233, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_233()
  {
   // Bears Power (35), Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[233][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 0.0000 - sigma;
   bool   ind2short = ind2val1 > 0.0000 + sigma;
   // Commodity Channel Index (Typical, 44), Level: 0
   double ind3buffer[]; CopyBuffer(indHandlers[233][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 < 0 - sigma;
   bool   ind3short = ind3val1 > 0 + sigma;
   // Average True Range (20), Level: 19.6000
   double ind4buffer[]; CopyBuffer(indHandlers[233][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 < 19.6000 - sigma;
   bool   ind4short = ind4long;
   // Average True Range (43)
   double ind5buffer[]; CopyBuffer(indHandlers[233][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   double ind5val3  = ind5buffer[0];
   bool   ind5long  = ind5val1 < ind5val2 - sigma && ind5val2 > ind5val3 + sigma;
   bool   ind5short = ind5long;

   return CreateExitSignal(233, ind2long || ind3long || ind4long || ind5long, ind2short || ind3short || ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_234()
  {
   // MACD Signal (Close, 4, 40, 10)
   double ind0buffer0[]; CopyBuffer(indHandlers[234][0][0], 0, 1, 3, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[234][0][0], 1, 1, 3, ind0buffer1);
   double ind0val1  = ind0buffer0[2] - ind0buffer1[2];
   double ind0val2  = ind0buffer0[1] - ind0buffer1[1];
   bool   ind0long  = ind0val1 < 0 - sigma && ind0val2 > 0 + sigma;
   bool   ind0short = ind0val1 > 0 + sigma && ind0val2 < 0 - sigma;
   // ADX (36), Level: 30.0
   double ind1buffer[]; CopyBuffer(indHandlers[234][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 < 30.0 - sigma;
   bool   ind1short = ind1long;
   // Bollinger Bands (Close, 20, 2.82)
   double ind2buffer0[]; CopyBuffer(indHandlers[234][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[234][2][0], 2, 1, 2, ind2buffer1);
   double ind2upBand1 = ind2buffer0[1];
   double ind2dnBand1 = ind2buffer1[1];
   bool   ind2long  = Open(0) < ind2dnBand1 - sigma;
   bool   ind2short = Open(0) > ind2upBand1 + sigma;

   return CreateEntrySignal(234, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_234()
  {
   // ADX (19)
   double ind3buffer[]; CopyBuffer(indHandlers[234][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   bool   ind3short = ind3long;
   // DeMarker (40), Level: 0.89
   double ind4buffer[]; CopyBuffer(indHandlers[234][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 > 0.89 + sigma;
   bool   ind4short = ind4val1 < 1 - 0.89 - sigma;
   // Williams' Percent Range (27), Level: -60.0
   double ind5buffer[]; CopyBuffer(indHandlers[234][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   bool   ind5long  = ind5val1 < -60.0 - sigma;
   bool   ind5short = ind5val1 > -100 - -60.0 + sigma;

   return CreateExitSignal(234, ind3long || ind4long || ind5long, ind3short || ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_235()
  {
   // Envelopes (Close, Simple, 37, 0.83)
   double ind0buffer0[]; CopyBuffer(indHandlers[235][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[235][0][0], 1, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;
   bool   ind0short   = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;

   return CreateEntrySignal(235, ind0long, ind0short, 33, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_235()
  {
   // Average True Range (7)
   double ind1buffer[]; CopyBuffer(indHandlers[235][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1long;
   // Stochastic Signal (4, 2, 1)
   double ind2buffer0[]; CopyBuffer(indHandlers[235][2][0], MAIN_LINE,   1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[235][2][0], SIGNAL_LINE, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   double ind2val3  = ind2buffer0[0];
   double ind2val4  = ind2buffer1[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;
   // Moving Average (Simple, Close, 32, 0)
   double ind3buffer[]; CopyBuffer(indHandlers[235][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;
   // Envelopes (Close, Simple, 44, 0.65)
   double ind4buffer0[]; CopyBuffer(indHandlers[235][4][0], 0, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[235][4][0], 1, 1, 2, ind4buffer1);
   double ind4upBand1 = ind4buffer0[1];
   double ind4dnBand1 = ind4buffer1[1];
   double ind4upBand2 = ind4buffer0[0];
   double ind4dnBand2 = ind4buffer1[0];
   bool   ind4long    = Open(0) > ind4dnBand1 + sigma && Open(1) < ind4dnBand2 - sigma;
   bool   ind4short   = Open(0) < ind4upBand1 - sigma && Open(1) > ind4upBand2 + sigma;

   return CreateExitSignal(235, ind1long || ind2long || ind3long || ind4long, ind1short || ind2short || ind3short || ind4short, 33, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_236()
  {
   // Moving Average (Simple, Close, 23, 0)
   double ind0buffer[]; CopyBuffer(indHandlers[236][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   double ind0val3  = ind0buffer[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val2 > ind0val3 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val2 < ind0val3 - sigma;
   // MACD Signal (Close, 16, 42, 13)
   double ind1buffer0[]; CopyBuffer(indHandlers[236][1][0], 0, 1, 3, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[236][1][0], 1, 1, 3, ind1buffer1);
   double ind1val1  = ind1buffer0[2] - ind1buffer1[2];
   bool   ind1long  = ind1val1 < 0 - sigma;
   bool   ind1short = ind1val1 > 0 + sigma;
   // Envelopes (Close, Simple, 18, 0.06)
   double ind2buffer0[]; CopyBuffer(indHandlers[236][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[236][2][0], 1, 1, 2, ind2buffer1);
   double ind2upBand1 = ind2buffer0[1];
   double ind2dnBand1 = ind2buffer1[1];
   double ind2upBand2 = ind2buffer0[0];
   double ind2dnBand2 = ind2buffer1[0];
   bool   ind2long    = Open(0) < ind2dnBand1 - sigma && Open(1) > ind2dnBand2 + sigma;
   bool   ind2short   = Open(0) > ind2upBand1 + sigma && Open(1) < ind2upBand2 - sigma;
   // Awesome Oscillator
   double ind3buffer[]; CopyBuffer(indHandlers[236][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;

   return CreateEntrySignal(236, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_236()
  {
   // Awesome Oscillator
   double ind4buffer[]; CopyBuffer(indHandlers[236][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < ind4val2 - sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma;
   // Williams' Percent Range (31), Level: -58.0
   double ind5buffer[]; CopyBuffer(indHandlers[236][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < -58.0 - sigma && ind5val2 > -58.0 + sigma;
   bool   ind5short = ind5val1 > -100 - -58.0 + sigma && ind5val2 < -100 - -58.0 - sigma;
   // MACD (Close, 12, 15, 9)
   double ind6buffer[]; CopyBuffer(indHandlers[236][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   double ind6val3  = ind6buffer[0];
   bool   ind6long  = ind6val1 > ind6val2 + sigma && ind6val2 < ind6val3 - sigma;
   bool   ind6short = ind6val1 < ind6val2 - sigma && ind6val2 > ind6val3 + sigma;

   return CreateExitSignal(236, ind4long || ind5long || ind6long, ind4short || ind5short || ind6short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_237()
  {
   // Bears Power (46)
   double ind0buffer[]; CopyBuffer(indHandlers[237][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   double ind0val3  = ind0buffer[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val2 < ind0val3 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val2 > ind0val3 + sigma;
   // Envelopes (Close, Simple, 50, 0.80)
   double ind1buffer0[]; CopyBuffer(indHandlers[237][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[237][1][0], 1, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   double ind1upBand2 = ind1buffer0[0];
   double ind1dnBand2 = ind1buffer1[0];
   bool   ind1long    = Open(0) > ind1upBand1 + sigma && Open(1) < ind1upBand2 - sigma;
   bool   ind1short   = Open(0) < ind1dnBand1 - sigma && Open(1) > ind1dnBand2 + sigma;
   // Standard Deviation (Close, Simple, 9), Level: 20.6000
   double ind2buffer[]; CopyBuffer(indHandlers[237][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < 20.6000 - sigma;
   bool   ind2short = ind2long;
   // Envelopes (Close, Simple, 49, 0.76)
   double ind3buffer0[]; CopyBuffer(indHandlers[237][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[237][3][0], 1, 1, 2, ind3buffer1);
   double ind3upBand1 = ind3buffer0[1];
   double ind3dnBand1 = ind3buffer1[1];
   double ind3upBand2 = ind3buffer0[0];
   double ind3dnBand2 = ind3buffer1[0];
   bool   ind3long    = Open(0) > ind3upBand1 + sigma && Open(1) < ind3upBand2 - sigma;
   bool   ind3short   = Open(0) < ind3dnBand1 - sigma && Open(1) > ind3dnBand2 + sigma;
   // Accelerator Oscillator
   double ind4buffer[]; CopyBuffer(indHandlers[237][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > ind4val2 + sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma;

   return CreateEntrySignal(237, ind0long && ind1long && ind2long && ind3long && ind4long, ind0short && ind1short && ind2short && ind3short && ind4short, 21, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_237()
  {
   // Alligator (Smoothed, Median, 31, 14, 14, 6, 6, 5)
   double ind5buffer0[]; CopyBuffer(indHandlers[237][5][0], 0, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[237][5][0], 1, 1, 2, ind5buffer1);
   double ind5buffer2[]; CopyBuffer(indHandlers[237][5][0], 2, 1, 2, ind5buffer2);
   double ind5val1  = ind5buffer1[1];
   double ind5val2  = ind5buffer1[0];
   bool   ind5long  = ind5val1 > ind5val2 + sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma;
   // Pin Bar (9, 22)

   bool ind6long  = false;
   bool ind6short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 22 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 22 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind6long  = isBullishPinBar;
      ind6short = isBearishPinBar;
   }
   // Moving Averages Crossover (Simple, Simple, 20, 43)
   double ind7buffer0[]; CopyBuffer(indHandlers[237][7][0], 0, 1, 2, ind7buffer0);
   double ind7buffer1[]; CopyBuffer(indHandlers[237][7][1], 0, 1, 2, ind7buffer1);
   double ind7val1  = ind7buffer0[1];
   double ind7val2  = ind7buffer1[1];
   bool   ind7long  = ind7val1 < ind7val2 - sigma;
   bool   ind7short = ind7val1 > ind7val2 + sigma;
   // RSI (Close, 43), Level: 33
   double ind8buffer[]; CopyBuffer(indHandlers[237][8][0], 0, 1, 3, ind8buffer);
   double ind8val1  = ind8buffer[2];
   bool   ind8long  = ind8val1 < 33 - sigma;
   bool   ind8short = ind8val1 > 100 - 33 + sigma;

   return CreateExitSignal(237, ind5long || ind6long || ind7long || ind8long, ind5short || ind6short || ind7short || ind8short, 21, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_238()
  {
   // Pin Bar (9, 39)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 39 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 39 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(238, ind0long, ind0short, 89, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_238()
  {
   // Alligator (Smoothed, Median, 39, 19, 19, 5, 5, 4)
   double ind1buffer0[]; CopyBuffer(indHandlers[238][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[238][1][0], 1, 1, 2, ind1buffer1);
   double ind1buffer2[]; CopyBuffer(indHandlers[238][1][0], 2, 1, 2, ind1buffer2);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer0[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;

   return CreateExitSignal(238, ind1long, ind1short, 89, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_239()
  {
   // Alligator (Smoothed, Median, 36, 20, 20, 6, 6, 1)
   double ind0buffer0[]; CopyBuffer(indHandlers[239][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[239][0][0], 1, 1, 2, ind0buffer1);
   double ind0buffer2[]; CopyBuffer(indHandlers[239][0][0], 2, 1, 2, ind0buffer2);
   double ind0val1  = ind0buffer1[1];
   double ind0val2  = ind0buffer0[1];
   double ind0val3  = ind0buffer1[0];
   double ind0val4  = ind0buffer0[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   // Stochastic (4, 4, 4), Level: 48.0
   double ind1buffer[]; CopyBuffer(indHandlers[239][1][0], MAIN_LINE, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > 48.0 + sigma && ind1val2 < 48.0 - sigma;
   bool   ind1short = ind1val1 < 100 - 48.0 - sigma && ind1val2 > 100 - 48.0 + sigma;

   return CreateEntrySignal(239, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_239()
  {
   // Bears Power (35)
   double ind2buffer[]; CopyBuffer(indHandlers[239][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   // Moving Average (Simple, Close, 45, 0)
   double ind3buffer[]; CopyBuffer(indHandlers[239][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   // Bulls Power (2), Level: -69.2000
   double ind4buffer[]; CopyBuffer(indHandlers[239][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < -69.2000 - sigma && ind4val2 > -69.2000 + sigma;
   bool   ind4short = ind4val1 > 69.2000 + sigma && ind4val2 < 69.2000 - sigma;

   return CreateExitSignal(239, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_240()
  {
   // RSI (Close, 43), Level: 30
   double ind0buffer[]; CopyBuffer(indHandlers[240][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 30 - sigma && ind0val2 > 30 + sigma;
   bool   ind0short = ind0val1 > 100 - 30 + sigma && ind0val2 < 100 - 30 - sigma;

   return CreateEntrySignal(240, ind0long, ind0short, 83, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_240()
  {
   // Average True Range (15)
   double ind1buffer[]; CopyBuffer(indHandlers[240][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1long;
   // Alligator (Smoothed, Median, 33, 9, 9, 5, 5, 2)
   double ind2buffer0[]; CopyBuffer(indHandlers[240][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[240][2][0], 1, 1, 2, ind2buffer1);
   double ind2buffer2[]; CopyBuffer(indHandlers[240][2][0], 2, 1, 2, ind2buffer2);
   double ind2val1  = ind2buffer1[1];
   double ind2val2  = ind2buffer1[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;

   return CreateExitSignal(240, ind1long || ind2long, ind1short || ind2short, 83, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_241()
  {
   // Commodity Channel Index (Typical, 20), Level: 0
   double ind0buffer[]; CopyBuffer(indHandlers[241][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 0 - sigma && ind0val2 > 0 + sigma;
   bool   ind0short = ind0val1 > 0 + sigma && ind0val2 < 0 - sigma;
   // Alligator (Smoothed, Median, 40, 15, 15, 5, 5, 2)
   double ind1buffer0[]; CopyBuffer(indHandlers[241][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[241][1][0], 1, 1, 2, ind1buffer1);
   double ind1buffer2[]; CopyBuffer(indHandlers[241][1][0], 2, 1, 2, ind1buffer2);
   double ind1val1  = ind1buffer2[1];
   double ind1val2  = ind1buffer2[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Bollinger Bands (Close, 12, 1.93)
   double ind2buffer0[]; CopyBuffer(indHandlers[241][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[241][2][0], 2, 1, 2, ind2buffer1);
   double ind2upBand1 = ind2buffer0[1];
   double ind2dnBand1 = ind2buffer1[1];
   bool   ind2long  = Open(0) < ind2dnBand1 - sigma;
   bool   ind2short = Open(0) > ind2upBand1 + sigma;
   // Moving Averages Crossover (Simple, Simple, 17, 20)
   double ind3buffer0[]; CopyBuffer(indHandlers[241][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[241][3][1], 0, 1, 2, ind3buffer1);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer1[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;
   // Standard Deviation (Close, Simple, 42)
   double ind4buffer[]; CopyBuffer(indHandlers[241][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > ind4val2 + sigma;
   bool   ind4short = ind4long;
   // Moving Average (Simple, Close, 21, 0)
   double ind5buffer[]; CopyBuffer(indHandlers[241][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   bool   ind5long  = Open(0) < ind5val1 - sigma;
   bool   ind5short = Open(0) > ind5val1 + sigma;

   return CreateEntrySignal(241, ind0long && ind1long && ind2long && ind3long && ind4long && ind5long, ind0short && ind1short && ind2short && ind3short && ind4short && ind5short, 92, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_241()
  {
   // Envelopes (Close, Simple, 17, 0.08)
   double ind6buffer0[]; CopyBuffer(indHandlers[241][6][0], 0, 1, 2, ind6buffer0);
   double ind6buffer1[]; CopyBuffer(indHandlers[241][6][0], 1, 1, 2, ind6buffer1);
   double ind6upBand1 = ind6buffer0[1];
   double ind6dnBand1 = ind6buffer1[1];
   double ind6upBand2 = ind6buffer0[0];
   double ind6dnBand2 = ind6buffer1[0];
   bool   ind6long    = Open(0) < ind6dnBand1 - sigma && Open(1) > ind6dnBand2 + sigma;
   bool   ind6short   = Open(0) > ind6upBand1 + sigma && Open(1) < ind6upBand2 - sigma;
   // Moving Average of Oscillator (Close, 20, 39, 8)
   double ind7buffer[]; CopyBuffer(indHandlers[241][7][0], 0, 1, 3, ind7buffer);
   double ind7val1  = ind7buffer[2];
   double ind7val2  = ind7buffer[1];
   bool   ind7long  = ind7val1 > ind7val2 + sigma;
   bool   ind7short = ind7val1 < ind7val2 - sigma;
   // Alligator (Smoothed, Median, 24, 17, 17, 9, 9, 1)
   double ind8buffer0[]; CopyBuffer(indHandlers[241][8][0], 0, 1, 2, ind8buffer0);
   double ind8buffer1[]; CopyBuffer(indHandlers[241][8][0], 1, 1, 2, ind8buffer1);
   double ind8buffer2[]; CopyBuffer(indHandlers[241][8][0], 2, 1, 2, ind8buffer2);
   double ind8val1  = ind8buffer1[1];
   double ind8val2  = ind8buffer0[1];
   double ind8val3  = ind8buffer1[0];
   double ind8val4  = ind8buffer0[0];
   bool   ind8long  = ind8val1 < ind8val2 - sigma && ind8val3 > ind8val4 + sigma;
   bool   ind8short = ind8val1 > ind8val2 + sigma && ind8val3 < ind8val4 - sigma;

   return CreateExitSignal(241, ind6long || ind7long || ind8long, ind6short || ind7short || ind8short, 92, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_242()
  {
   // Candle Color (39, 3)
   bool ind0long  = false;
   bool ind0short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 39;

      for (int b = 3 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind0long  = consecutiveBullish >= 3;
      ind0short = consecutiveBearish >= 3;
   }
   // Alligator (Smoothed, Median, 26, 12, 12, 5, 5, 2)
   double ind1buffer0[]; CopyBuffer(indHandlers[242][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[242][1][0], 1, 1, 2, ind1buffer1);
   double ind1buffer2[]; CopyBuffer(indHandlers[242][1][0], 2, 1, 2, ind1buffer2);
   double ind1val1  = ind1buffer2[1];
   double ind1val2  = ind1buffer0[1];
   double ind1val3  = ind1buffer2[0];
   double ind1val4  = ind1buffer0[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;

   return CreateEntrySignal(242, ind0long && ind1long, ind0short && ind1short, 47, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_242()
  {
   // Stochastic Signal (4, 3, 1)
   double ind2buffer0[]; CopyBuffer(indHandlers[242][2][0], MAIN_LINE,   1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[242][2][0], SIGNAL_LINE, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;
   // Awesome Oscillator, Level: 0.0000
   double ind3buffer[]; CopyBuffer(indHandlers[242][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < 0.0000 - sigma && ind3val2 > 0.0000 + sigma;
   bool   ind3short = ind3val1 > 0.0000 + sigma && ind3val2 < 0.0000 - sigma;
   // Awesome Oscillator, Level: 8.5000
   double ind4buffer[]; CopyBuffer(indHandlers[242][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > 8.5000 + sigma && ind4val2 < 8.5000 - sigma;
   bool   ind4short = ind4val1 < -8.5000 - sigma && ind4val2 > -8.5000 + sigma;
   // Pin Bar (8, 29)

   bool ind5long  = false;
   bool ind5short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 8 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 29 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 29 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind5long  = isBullishPinBar;
      ind5short = isBearishPinBar;
   }

   return CreateExitSignal(242, ind2long || ind3long || ind4long || ind5long, ind2short || ind3short || ind4short || ind5short, 47, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_243()
  {
   // Bears Power (43), Level: 1.7100
   double ind0buffer[]; CopyBuffer(indHandlers[243][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 1.7100 + sigma && ind0val2 < 1.7100 - sigma;
   bool   ind0short = ind0val1 < -1.7100 - sigma && ind0val2 > -1.7100 + sigma;
   // Commodity Channel Index (Typical, 14)
   double ind1buffer[]; CopyBuffer(indHandlers[243][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Bears Power (7), Level: -0.1500
   double ind2buffer[]; CopyBuffer(indHandlers[243][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 < -0.1500 - sigma;
   bool   ind2short = ind2val1 > 0.1500 + sigma;

   return CreateEntrySignal(243, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 48, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_243()
  {
   // Williams' Percent Range (21), Level: -96.0
   double ind3buffer[]; CopyBuffer(indHandlers[243][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 < -96.0 - sigma;
   bool   ind3short = ind3val1 > -100 - -96.0 + sigma;
   // Alligator (Smoothed, Median, 33, 7, 7, 5, 5, 2)
   double ind4buffer0[]; CopyBuffer(indHandlers[243][4][0], 0, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[243][4][0], 1, 1, 2, ind4buffer1);
   double ind4buffer2[]; CopyBuffer(indHandlers[243][4][0], 2, 1, 2, ind4buffer2);
   double ind4val1  = ind4buffer1[1];
   double ind4val2  = ind4buffer0[1];
   double ind4val3  = ind4buffer1[0];
   double ind4val4  = ind4buffer0[0];
   bool   ind4long  = ind4val1 > ind4val2 + sigma && ind4val3 < ind4val4 - sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma && ind4val3 > ind4val4 + sigma;
   // Moving Averages Crossover (Simple, Simple, 19, 20)
   double ind5buffer0[]; CopyBuffer(indHandlers[243][5][0], 0, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[243][5][1], 0, 1, 2, ind5buffer1);
   double ind5val1  = ind5buffer0[1];
   double ind5val2  = ind5buffer1[1];
   double ind5val3  = ind5buffer0[0];
   double ind5val4  = ind5buffer1[0];
   bool   ind5long  = ind5val1 > ind5val2 + sigma && ind5val3 < ind5val4 - sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma && ind5val3 > ind5val4 + sigma;
   // Candle Color (33, 3)
   bool ind6long  = false;
   bool ind6short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 33;

      for (int b = 3 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind6long  = consecutiveBullish >= 3;
      ind6short = consecutiveBearish >= 3;
   }

   return CreateExitSignal(243, ind3long || ind4long || ind5long || ind6long, ind3short || ind4short || ind5short || ind6short, 48, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_244()
  {
   // Momentum (Close, 47), Level: 97.0000
   double ind0buffer[]; CopyBuffer(indHandlers[244][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 97.0000 - sigma && ind0val2 > 97.0000 + sigma;
   bool   ind0short = ind0val1 > 200 - 97.0000 + sigma && ind0val2 < 200 - 97.0000 - sigma;

   return CreateEntrySignal(244, ind0long, ind0short, 67, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_244()
  {
   // Stochastic Signal (2, 1, 1)
   double ind1buffer0[]; CopyBuffer(indHandlers[244][1][0], MAIN_LINE,   1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[244][1][0], SIGNAL_LINE, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   double ind1val3  = ind1buffer0[0];
   double ind1val4  = ind1buffer1[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;
   // Accelerator Oscillator
   double ind2buffer[]; CopyBuffer(indHandlers[244][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;

   return CreateExitSignal(244, ind1long || ind2long, ind1short || ind2short, 67, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_245()
  {
   // Moving Average of Oscillator (Close, 15, 41, 13), Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[245][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   bool   ind0short = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   // Envelopes (Close, Simple, 3, 0.44)
   double ind1buffer0[]; CopyBuffer(indHandlers[245][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[245][1][0], 1, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   bool   ind1long  = Open(0) < ind1dnBand1 - sigma;
   bool   ind1short = Open(0) > ind1upBand1 + sigma;

   return CreateEntrySignal(245, ind0long && ind1long, ind0short && ind1short, 70, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_245()
  {
   // Moving Average of Oscillator (Close, 16, 24, 8), Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[245][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < 0.0000 - sigma && ind2val2 > 0.0000 + sigma;
   bool   ind2short = ind2val1 > 0.0000 + sigma && ind2val2 < 0.0000 - sigma;

   return CreateExitSignal(245, ind2long, ind2short, 70, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_246()
  {
   // Bulls Power (7), Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[246][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   bool   ind0long  = ind0val1 > 0.0000 + sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma;
   // Accelerator Oscillator
   double ind1buffer[]; CopyBuffer(indHandlers[246][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   // Directional Indicators (14)
   double ind2buffer0[]; CopyBuffer(indHandlers[246][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[246][2][0], 2, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   double ind2val3  = ind2buffer0[0];
   double ind2val4  = ind2buffer1[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;
   // Moving Average (Simple, Close, 28, 0)
   double ind3buffer[]; CopyBuffer(indHandlers[246][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = Open(0) > ind3val1 + sigma;
   bool   ind3short = Open(0) < ind3val1 - sigma;

   return CreateEntrySignal(246, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 43, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_246()
  {
   // Moving Averages Crossover (Simple, Simple, 23, 49)
   double ind4buffer0[]; CopyBuffer(indHandlers[246][4][0], 0, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[246][4][1], 0, 1, 2, ind4buffer1);
   double ind4val1  = ind4buffer0[1];
   double ind4val2  = ind4buffer1[1];
   bool   ind4long  = ind4val1 < ind4val2 - sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma;

   return CreateExitSignal(246, ind4long, ind4short, 43, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_247()
  {
   // Momentum (Close, 21), Level: 102.0000
   double ind0buffer[]; CopyBuffer(indHandlers[247][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 102.0000 + sigma && ind0val2 < 102.0000 - sigma;
   bool   ind0short = ind0val1 < 200 - 102.0000 - sigma && ind0val2 > 200 - 102.0000 + sigma;

   return CreateEntrySignal(247, ind0long, ind0short, 12, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_247()
  {
   // Commodity Channel Index (Typical, 18), Level: 0
   double ind1buffer[]; CopyBuffer(indHandlers[247][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < 0 - sigma && ind1val2 > 0 + sigma;
   bool   ind1short = ind1val1 > 0 + sigma && ind1val2 < 0 - sigma;

   return CreateExitSignal(247, ind1long, ind1short, 12, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_248()
  {
   // Stochastic Signal (16, 11, 10)
   double ind0buffer0[]; CopyBuffer(indHandlers[248][0][0], MAIN_LINE,   1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[248][0][0], SIGNAL_LINE, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   bool   ind0long  = ind0val1 > ind0val2 + sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma;
   // Average True Range (1), Level: 17.5000
   double ind1buffer[]; CopyBuffer(indHandlers[248][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > 17.5000 + sigma && ind1val2 < 17.5000 - sigma;
   bool   ind1short = ind1long;
   // Bulls Power (3), Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[248][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 > 0.0000 + sigma;
   bool   ind2short = ind2val1 < 0.0000 - sigma;

   return CreateEntrySignal(248, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 37, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_248()
  {
   // Awesome Oscillator, Level: 0.0000
   double ind3buffer[]; CopyBuffer(indHandlers[248][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < 0.0000 - sigma && ind3val2 > 0.0000 + sigma;
   bool   ind3short = ind3val1 > 0.0000 + sigma && ind3val2 < 0.0000 - sigma;
   // DeMarker (33)
   double ind4buffer[]; CopyBuffer(indHandlers[248][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > ind4val2 + sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma;
   // Moving Average (Simple, Close, 10, 0)
   double ind5buffer[]; CopyBuffer(indHandlers[248][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;
   // Momentum (Close, 37), Level: 100.0000
   double ind6buffer[]; CopyBuffer(indHandlers[248][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   bool   ind6long  = ind6val1 > 100.0000 + sigma;
   bool   ind6short = ind6val1 < 200 - 100.0000 - sigma;

   return CreateExitSignal(248, ind3long || ind4long || ind5long || ind6long, ind3short || ind4short || ind5short || ind6short, 37, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_249()
  {
   // Accelerator Oscillator, Level: -9.8000
   double ind0buffer[]; CopyBuffer(indHandlers[249][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > -9.8000 + sigma && ind0val2 < -9.8000 - sigma;
   bool   ind0short = ind0val1 < 9.8000 - sigma && ind0val2 > 9.8000 + sigma;

   return CreateEntrySignal(249, ind0long, ind0short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_249()
  {
   // Envelopes (Close, Simple, 32, 0.06)
   double ind1buffer0[]; CopyBuffer(indHandlers[249][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[249][1][0], 1, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   bool   ind1long  = Open(0) > ind1upBand1 + sigma;
   bool   ind1short = Open(0) < ind1dnBand1 - sigma;
   // Bulls Power (41)
   double ind2buffer[]; CopyBuffer(indHandlers[249][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;

   return CreateExitSignal(249, ind1long || ind2long, ind1short || ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_250()
  {
   // Stochastic (14, 1, 4), Level: 77.0
   double ind0buffer[]; CopyBuffer(indHandlers[250][0][0], MAIN_LINE, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 77.0 + sigma && ind0val2 < 77.0 - sigma;
   bool   ind0short = ind0val1 < 100 - 77.0 - sigma && ind0val2 > 100 - 77.0 + sigma;
   // Moving Average of Oscillator (Close, 20, 22, 12)
   double ind1buffer[]; CopyBuffer(indHandlers[250][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Alligator (Smoothed, Median, 21, 18, 18, 12, 12, 3)
   double ind2buffer0[]; CopyBuffer(indHandlers[250][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[250][2][0], 1, 1, 2, ind2buffer1);
   double ind2buffer2[]; CopyBuffer(indHandlers[250][2][0], 2, 1, 2, ind2buffer2);
   double ind2val1  = ind2buffer1[1];
   double ind2val2  = ind2buffer1[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;

   return CreateEntrySignal(250, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_250()
  {
   // Awesome Oscillator, Level: 0.0000
   double ind3buffer[]; CopyBuffer(indHandlers[250][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 0.0000 + sigma;
   bool   ind3short = ind3val1 < 0.0000 - sigma;
   // Candle Color (29, 5)
   bool ind4long  = false;
   bool ind4short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 29;

      for (int b = 5 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind4long  = consecutiveBearish >= 5;
      ind4short = consecutiveBullish >= 5;
   }
   // Envelopes (Close, Simple, 50, 0.43)
   double ind5buffer0[]; CopyBuffer(indHandlers[250][5][0], 0, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[250][5][0], 1, 1, 2, ind5buffer1);
   double ind5upBand1 = ind5buffer0[1];
   double ind5dnBand1 = ind5buffer1[1];
   double ind5upBand2 = ind5buffer0[0];
   double ind5dnBand2 = ind5buffer1[0];
   bool   ind5long    = Open(0) < ind5upBand1 - sigma && Open(1) > ind5upBand2 + sigma;
   bool   ind5short   = Open(0) > ind5dnBand1 + sigma && Open(1) < ind5dnBand2 - sigma;
   // Envelopes (Close, Simple, 23, 0.87)
   double ind6buffer0[]; CopyBuffer(indHandlers[250][6][0], 0, 1, 2, ind6buffer0);
   double ind6buffer1[]; CopyBuffer(indHandlers[250][6][0], 1, 1, 2, ind6buffer1);
   double ind6upBand1 = ind6buffer0[1];
   double ind6dnBand1 = ind6buffer1[1];
   double ind6upBand2 = ind6buffer0[0];
   double ind6dnBand2 = ind6buffer1[0];
   bool   ind6long    = Open(0) < ind6dnBand1 - sigma && Open(1) > ind6dnBand2 + sigma;
   bool   ind6short   = Open(0) > ind6upBand1 + sigma && Open(1) < ind6upBand2 - sigma;

   return CreateExitSignal(250, ind3long || ind4long || ind5long || ind6long, ind3short || ind4short || ind5short || ind6short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_251()
  {
   // Alligator (Smoothed, Median, 23, 15, 15, 11, 11, 1)
   double ind0buffer0[]; CopyBuffer(indHandlers[251][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[251][0][0], 1, 1, 2, ind0buffer1);
   double ind0buffer2[]; CopyBuffer(indHandlers[251][0][0], 2, 1, 2, ind0buffer2);
   double ind0val1  = ind0buffer2[1];
   double ind0val2  = ind0buffer0[1];
   double ind0val3  = ind0buffer2[0];
   double ind0val4  = ind0buffer0[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   // Directional Indicators (9)
   double ind1buffer0[]; CopyBuffer(indHandlers[251][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[251][1][0], 2, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   double ind1val3  = ind1buffer0[0];
   double ind1val4  = ind1buffer1[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;

   return CreateEntrySignal(251, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_251()
  {
   // Moving Average (Simple, Close, 24, 0)
   double ind2buffer[]; CopyBuffer(indHandlers[251][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = Open(0) > ind2val1 + sigma;
   bool   ind2short = Open(0) < ind2val1 - sigma;

   return CreateExitSignal(251, ind2long, ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_252()
  {
   // Commodity Channel Index (Typical, 14), Level: 0
   double ind0buffer[]; CopyBuffer(indHandlers[252][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 0 - sigma && ind0val2 > 0 + sigma;
   bool   ind0short = ind0val1 > 0 + sigma && ind0val2 < 0 - sigma;
   // MACD (Close, 25, 32, 9)
   double ind1buffer[]; CopyBuffer(indHandlers[252][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 0 + sigma;
   bool   ind1short = ind1val1 < 0 - sigma;
   // Accelerator Oscillator
   double ind2buffer[]; CopyBuffer(indHandlers[252][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;

   return CreateEntrySignal(252, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_252()
  {
   // Momentum (Close, 5), Level: 101.0000
   double ind3buffer[]; CopyBuffer(indHandlers[252][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 101.0000 + sigma;
   bool   ind3short = ind3val1 < 200 - 101.0000 - sigma;
   // Moving Average of Oscillator (Close, 5, 23, 12), Level: 0.0000
   double ind4buffer[]; CopyBuffer(indHandlers[252][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 < 0.0000 - sigma;
   bool   ind4short = ind4val1 > 0.0000 + sigma;

   return CreateExitSignal(252, ind3long || ind4long, ind3short || ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_253()
  {
   // Candle Color (11, 2)
   bool ind0long  = false;
   bool ind0short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 11;

      for (int b = 2 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind0long  = consecutiveBearish >= 2;
      ind0short = consecutiveBullish >= 2;
   }
   // Moving Average (Simple, Close, 21, 0)
   double ind1buffer[]; CopyBuffer(indHandlers[253][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = Open(0) < ind1val1 - sigma && Open(1) > ind1val2 + sigma;
   bool   ind1short = Open(0) > ind1val1 + sigma && Open(1) < ind1val2 - sigma;
   // Average True Range (18)
   double ind2buffer[]; CopyBuffer(indHandlers[253][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2long;

   return CreateEntrySignal(253, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 75, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_253()
  {
   // MACD (Close, 20, 49, 9)
   double ind3buffer[]; CopyBuffer(indHandlers[253][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateExitSignal(253, ind3long, ind3short, 75, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_254()
  {
   // RSI (Close, 43), Level: 30
   double ind0buffer[]; CopyBuffer(indHandlers[254][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 30 + sigma && ind0val2 < 30 - sigma;
   bool   ind0short = ind0val1 < 100 - 30 - sigma && ind0val2 > 100 - 30 + sigma;

   return CreateEntrySignal(254, ind0long, ind0short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_254()
  {
   // Directional Indicators (24)
   double ind1buffer0[]; CopyBuffer(indHandlers[254][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[254][1][0], 2, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Candle Color (15, 3)
   bool ind2long  = false;
   bool ind2short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 15;

      for (int b = 3 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind2long  = consecutiveBullish >= 3;
      ind2short = consecutiveBearish >= 3;
   }
   // Moving Average of Oscillator (Close, 18, 25, 9), Level: 4.2500
   double ind3buffer[]; CopyBuffer(indHandlers[254][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 4.2500 + sigma;
   bool   ind3short = ind3val1 < -4.2500 - sigma;
   // Commodity Channel Index (Typical, 15)
   double ind4buffer[]; CopyBuffer(indHandlers[254][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;

   return CreateExitSignal(254, ind1long || ind2long || ind3long || ind4long, ind1short || ind2short || ind3short || ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_255()
  {
   // Alligator (Smoothed, Median, 37, 12, 12, 10, 10, 4)
   double ind0buffer0[]; CopyBuffer(indHandlers[255][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[255][0][0], 1, 1, 2, ind0buffer1);
   double ind0buffer2[]; CopyBuffer(indHandlers[255][0][0], 2, 1, 2, ind0buffer2);
   double ind0val1  = ind0buffer1[1];
   double ind0val2  = ind0buffer1[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma;
   // Alligator (Smoothed, Median, 37, 17, 17, 8, 8, 5)
   double ind1buffer0[]; CopyBuffer(indHandlers[255][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[255][1][0], 1, 1, 2, ind1buffer1);
   double ind1buffer2[]; CopyBuffer(indHandlers[255][1][0], 2, 1, 2, ind1buffer2);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer0[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Accelerator Oscillator
   double ind2buffer[]; CopyBuffer(indHandlers[255][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;
   // Stochastic Signal (12, 6, 2)
   double ind3buffer0[]; CopyBuffer(indHandlers[255][3][0], MAIN_LINE,   1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[255][3][0], SIGNAL_LINE, 1, 2, ind3buffer1);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer1[1];
   double ind3val3  = ind3buffer0[0];
   double ind3val4  = ind3buffer1[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val3 > ind3val4 + sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma && ind3val3 < ind3val4 - sigma;
   // Momentum (Close, 12)
   double ind4buffer[]; CopyBuffer(indHandlers[255][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;
   // DeMarker (36)
   double ind5buffer[]; CopyBuffer(indHandlers[255][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   double ind5val3  = ind5buffer[0];
   bool   ind5long  = ind5val1 > ind5val2 + sigma && ind5val2 < ind5val3 - sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma && ind5val2 > ind5val3 + sigma;

   return CreateEntrySignal(255, ind0long && ind1long && ind2long && ind3long && ind4long && ind5long, ind0short && ind1short && ind2short && ind3short && ind4short && ind5short, 36, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_255()
  {
   // RSI (Close, 13), Level: 84
   double ind6buffer[]; CopyBuffer(indHandlers[255][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   bool   ind6long  = ind6val1 < 84 - sigma && ind6val2 > 84 + sigma;
   bool   ind6short = ind6val1 > 100 - 84 + sigma && ind6val2 < 100 - 84 - sigma;

   return CreateExitSignal(255, ind6long, ind6short, 36, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_256()
  {
   // Commodity Channel Index (Typical, 49), Level: 0
   double ind0buffer[]; CopyBuffer(indHandlers[256][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0 + sigma && ind0val2 < 0 - sigma;
   bool   ind0short = ind0val1 < 0 - sigma && ind0val2 > 0 + sigma;
   // Alligator (Smoothed, Median, 27, 18, 18, 8, 8, 1)
   double ind1buffer0[]; CopyBuffer(indHandlers[256][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[256][1][0], 1, 1, 2, ind1buffer1);
   double ind1buffer2[]; CopyBuffer(indHandlers[256][1][0], 2, 1, 2, ind1buffer2);
   double ind1val1  = ind1buffer1[1];
   double ind1val2  = ind1buffer1[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Directional Indicators (44)
   double ind2buffer0[]; CopyBuffer(indHandlers[256][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[256][2][0], 2, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;
   // Moving Average (Simple, Close, 5, 0)
   double ind3buffer[]; CopyBuffer(indHandlers[256][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = Open(0) > ind3val1 + sigma && Open(1) < ind3val2 - sigma;
   bool   ind3short = Open(0) < ind3val1 - sigma && Open(1) > ind3val2 + sigma;
   // Alligator (Smoothed, Median, 40, 23, 23, 12, 12, 5)
   double ind4buffer0[]; CopyBuffer(indHandlers[256][4][0], 0, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[256][4][0], 1, 1, 2, ind4buffer1);
   double ind4buffer2[]; CopyBuffer(indHandlers[256][4][0], 2, 1, 2, ind4buffer2);
   double ind4val1  = ind4buffer2[1];
   double ind4val2  = ind4buffer2[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma;

   return CreateEntrySignal(256, ind0long && ind1long && ind2long && ind3long && ind4long, ind0short && ind1short && ind2short && ind3short && ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_256()
  {
   // Average True Range (45)
   double ind5buffer[]; CopyBuffer(indHandlers[256][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5long;

   return CreateExitSignal(256, ind5long, ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_257()
  {
   // Stochastic (11, 8, 1)
   double ind0buffer[]; CopyBuffer(indHandlers[257][0][0], MAIN_LINE, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   double ind0val3  = ind0buffer[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val2 < ind0val3 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val2 > ind0val3 + sigma;
   // ADX (7), Level: 18.0
   double ind1buffer[]; CopyBuffer(indHandlers[257][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 > 18.0 + sigma;
   bool   ind1short = ind1long;
   // Bollinger Bands (Close, 44, 3.54)
   double ind2buffer0[]; CopyBuffer(indHandlers[257][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[257][2][0], 2, 1, 2, ind2buffer1);
   double ind2upBand1 = ind2buffer0[1];
   double ind2dnBand1 = ind2buffer1[1];
   bool   ind2long  = Open(0) > ind2upBand1 + sigma;
   bool   ind2short = Open(0) < ind2dnBand1 - sigma;

   return CreateEntrySignal(257, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 67, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_257()
  {
   // Bulls Power (25), Level: 0.0000
   double ind3buffer[]; CopyBuffer(indHandlers[257][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > 0.0000 + sigma && ind3val2 < 0.0000 - sigma;
   bool   ind3short = ind3val1 < 0.0000 - sigma && ind3val2 > 0.0000 + sigma;
   // Bulls Power (5)
   double ind4buffer[]; CopyBuffer(indHandlers[257][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;
   // Commodity Channel Index (Typical, 8)
   double ind5buffer[]; CopyBuffer(indHandlers[257][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;

   return CreateExitSignal(257, ind3long || ind4long || ind5long, ind3short || ind4short || ind5short, 67, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_258()
  {
   // Williams' Percent Range (47)
   double ind0buffer[]; CopyBuffer(indHandlers[258][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > ind0val2 + sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma;
   // Envelopes (Close, Simple, 46, 0.23)
   double ind1buffer0[]; CopyBuffer(indHandlers[258][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[258][1][0], 1, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   double ind1upBand2 = ind1buffer0[0];
   double ind1dnBand2 = ind1buffer1[0];
   bool   ind1long    = Open(0) > ind1upBand1 + sigma && Open(1) < ind1upBand2 - sigma;
   bool   ind1short   = Open(0) < ind1dnBand1 - sigma && Open(1) > ind1dnBand2 + sigma;
   // Candle Color (40, 3)
   bool ind2long  = false;
   bool ind2short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 40;

      for (int b = 3 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind2long  = consecutiveBullish >= 3;
      ind2short = consecutiveBearish >= 3;
   }
   // Moving Average (Simple, Close, 18, 0)
   double ind3buffer[]; CopyBuffer(indHandlers[258][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   // Stochastic (3, 3, 2), Level: 55.0
   double ind4buffer[]; CopyBuffer(indHandlers[258][4][0], MAIN_LINE, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 > 55.0 + sigma;
   bool   ind4short = ind4val1 < 100 - 55.0 - sigma;
   // Bulls Power (17)
   double ind5buffer[]; CopyBuffer(indHandlers[258][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 > ind5val2 + sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma;

   return CreateEntrySignal(258, ind0long && ind1long && ind2long && ind3long && ind4long && ind5long, ind0short && ind1short && ind2short && ind3short && ind4short && ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_258()
  {
   // Moving Averages Crossover (Simple, Simple, 23, 30)
   double ind6buffer0[]; CopyBuffer(indHandlers[258][6][0], 0, 1, 2, ind6buffer0);
   double ind6buffer1[]; CopyBuffer(indHandlers[258][6][1], 0, 1, 2, ind6buffer1);
   double ind6val1  = ind6buffer0[1];
   double ind6val2  = ind6buffer1[1];
   bool   ind6long  = ind6val1 < ind6val2 - sigma;
   bool   ind6short = ind6val1 > ind6val2 + sigma;
   // Moving Averages Crossover (Simple, Simple, 15, 41)
   double ind7buffer0[]; CopyBuffer(indHandlers[258][7][0], 0, 1, 2, ind7buffer0);
   double ind7buffer1[]; CopyBuffer(indHandlers[258][7][1], 0, 1, 2, ind7buffer1);
   double ind7val1  = ind7buffer0[1];
   double ind7val2  = ind7buffer1[1];
   bool   ind7long  = ind7val1 > ind7val2 + sigma;
   bool   ind7short = ind7val1 < ind7val2 - sigma;
   // Commodity Channel Index (Typical, 17), Level: 77
   double ind8buffer[]; CopyBuffer(indHandlers[258][8][0], 0, 1, 3, ind8buffer);
   double ind8val1  = ind8buffer[2];
   bool   ind8long  = ind8val1 > 77 + sigma;
   bool   ind8short = ind8val1 < -77 - sigma;
   // Moving Average of Oscillator (Close, 11, 19, 6)
   double ind9buffer[]; CopyBuffer(indHandlers[258][9][0], 0, 1, 3, ind9buffer);
   double ind9val1  = ind9buffer[2];
   double ind9val2  = ind9buffer[1];
   double ind9val3  = ind9buffer[0];
   bool   ind9long  = ind9val1 < ind9val2 - sigma && ind9val2 > ind9val3 + sigma;
   bool   ind9short = ind9val1 > ind9val2 + sigma && ind9val2 < ind9val3 - sigma;

   return CreateExitSignal(258, ind6long || ind7long || ind8long || ind9long, ind6short || ind7short || ind8short || ind9short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_259()
  {
   // Directional Indicators (29)
   double ind0buffer0[]; CopyBuffer(indHandlers[259][0][0], 1, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[259][0][0], 2, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   bool   ind0long  = ind0val1 > ind0val2 + sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma;
   // Average True Range (35), Level: 2.4000
   double ind1buffer[]; CopyBuffer(indHandlers[259][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > 2.4000 + sigma && ind1val2 < 2.4000 - sigma;
   bool   ind1short = ind1long;

   return CreateEntrySignal(259, ind0long && ind1long, ind0short && ind1short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_259()
  {
   // Moving Average of Oscillator (Close, 21, 38, 7)
   double ind2buffer[]; CopyBuffer(indHandlers[259][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;
   // Bulls Power (26)
   double ind3buffer[]; CopyBuffer(indHandlers[259][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   // RSI (Close, 28)
   double ind4buffer[]; CopyBuffer(indHandlers[259][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;
   // Commodity Channel Index (Typical, 45)
   double ind5buffer[]; CopyBuffer(indHandlers[259][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;

   return CreateExitSignal(259, ind2long || ind3long || ind4long || ind5long, ind2short || ind3short || ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_260()
  {
   // ADX (27), Level: 41.0
   double ind0buffer[]; CopyBuffer(indHandlers[260][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 41.0 + sigma && ind0val2 < 41.0 - sigma;
   bool   ind0short = ind0long;
   // Bulls Power (46)
   double ind1buffer[]; CopyBuffer(indHandlers[260][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;

   return CreateEntrySignal(260, ind0long && ind1long, ind0short && ind1short, 79, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_260()
  {
   // MACD (Close, 7, 50, 9)
   double ind2buffer[]; CopyBuffer(indHandlers[260][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > 0 + sigma && ind2val2 < 0 - sigma;
   bool   ind2short = ind2val1 < 0 - sigma && ind2val2 > 0 + sigma;

   return CreateExitSignal(260, ind2long, ind2short, 79, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_261()
  {
   // Average True Range (4), Level: 6.9000
   double ind0buffer[]; CopyBuffer(indHandlers[261][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 6.9000 + sigma && ind0val2 < 6.9000 - sigma;
   bool   ind0short = ind0long;
   // DeMarker (31)
   double ind1buffer[]; CopyBuffer(indHandlers[261][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Alligator (Smoothed, Median, 36, 16, 16, 13, 13, 4)
   double ind2buffer0[]; CopyBuffer(indHandlers[261][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[261][2][0], 1, 1, 2, ind2buffer1);
   double ind2buffer2[]; CopyBuffer(indHandlers[261][2][0], 2, 1, 2, ind2buffer2);
   double ind2val1  = ind2buffer1[1];
   double ind2val2  = ind2buffer1[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;

   return CreateEntrySignal(261, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 88, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_261()
  {
   // ADX (31), Level: 25.0
   double ind3buffer[]; CopyBuffer(indHandlers[261][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > 25.0 + sigma && ind3val2 < 25.0 - sigma;
   bool   ind3short = ind3long;

   return CreateExitSignal(261, ind3long, ind3short, 88, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_262()
  {
   // Bulls Power (22), Level: 0.0000
   double ind0buffer[]; CopyBuffer(indHandlers[262][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0.0000 + sigma && ind0val2 < 0.0000 - sigma;
   bool   ind0short = ind0val1 < 0.0000 - sigma && ind0val2 > 0.0000 + sigma;
   // Average True Range (2)
   double ind1buffer[]; CopyBuffer(indHandlers[262][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1long;
   // Moving Average (Simple, Close, 11, 0)
   double ind2buffer[]; CopyBuffer(indHandlers[262][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;

   return CreateEntrySignal(262, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 31, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_262()
  {
   // Alligator (Smoothed, Median, 20, 8, 8, 5, 5, 2)
   double ind3buffer0[]; CopyBuffer(indHandlers[262][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[262][3][0], 1, 1, 2, ind3buffer1);
   double ind3buffer2[]; CopyBuffer(indHandlers[262][3][0], 2, 1, 2, ind3buffer2);
   double ind3val1  = ind3buffer2[1];
   double ind3val2  = ind3buffer1[1];
   double ind3val3  = ind3buffer2[0];
   double ind3val4  = ind3buffer1[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val3 < ind3val4 - sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma && ind3val3 > ind3val4 + sigma;
   // Candle Color (28, 1)
   bool ind4long  = false;
   bool ind4short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 28;

      for (int b = 1 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind4long  = consecutiveBearish >= 1;
      ind4short = consecutiveBullish >= 1;
   }
   // Moving Average (Simple, Close, 6, 0)
   double ind5buffer[]; CopyBuffer(indHandlers[262][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   double ind5val3  = ind5buffer[0];
   bool   ind5long  = ind5val1 > ind5val2 + sigma && ind5val2 < ind5val3 - sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma && ind5val2 > ind5val3 + sigma;
   // Standard Deviation (Close, Simple, 17), Level: 31.2000
   double ind6buffer[]; CopyBuffer(indHandlers[262][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   double ind6val2  = ind6buffer[1];
   bool   ind6long  = ind6val1 < 31.2000 - sigma && ind6val2 > 31.2000 + sigma;
   bool   ind6short = ind6long;

   return CreateExitSignal(262, ind3long || ind4long || ind5long || ind6long, ind3short || ind4short || ind5short || ind6short, 31, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_263()
  {
   // ADX (27), Level: 41.0
   double ind0buffer[]; CopyBuffer(indHandlers[263][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 41.0 + sigma && ind0val2 < 41.0 - sigma;
   bool   ind0short = ind0long;
   // Commodity Channel Index (Typical, 18)
   double ind1buffer[]; CopyBuffer(indHandlers[263][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;

   return CreateEntrySignal(263, ind0long && ind1long, ind0short && ind1short, 79, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_263()
  {
   // MACD (Close, 7, 50, 9)
   double ind2buffer[]; CopyBuffer(indHandlers[263][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > 0 + sigma && ind2val2 < 0 - sigma;
   bool   ind2short = ind2val1 < 0 - sigma && ind2val2 > 0 + sigma;

   return CreateExitSignal(263, ind2long, ind2short, 79, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_264()
  {
   // Average True Range (7)
   double ind0buffer[]; CopyBuffer(indHandlers[264][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > ind0val2 + sigma;
   bool   ind0short = ind0long;
   // Envelopes (Close, Simple, 47, 0.38)
   double ind1buffer0[]; CopyBuffer(indHandlers[264][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[264][1][0], 1, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   double ind1upBand2 = ind1buffer0[0];
   double ind1dnBand2 = ind1buffer1[0];
   bool   ind1long    = Open(0) > ind1dnBand1 + sigma && Open(1) < ind1dnBand2 - sigma;
   bool   ind1short   = Open(0) < ind1upBand1 - sigma && Open(1) > ind1upBand2 + sigma;
   // Stochastic Signal (4, 2, 2)
   double ind2buffer0[]; CopyBuffer(indHandlers[264][2][0], MAIN_LINE,   1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[264][2][0], SIGNAL_LINE, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;
   // Moving Average of Oscillator (Close, 25, 43, 11)
   double ind3buffer[]; CopyBuffer(indHandlers[264][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;

   return CreateEntrySignal(264, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 72, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_264()
  {
   // DeMarker (33), Level: 0.78
   double ind4buffer[]; CopyBuffer(indHandlers[264][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > 0.78 + sigma && ind4val2 < 0.78 - sigma;
   bool   ind4short = ind4val1 < 1 - 0.78 - sigma && ind4val2 > 1 - 0.78 + sigma;
   // Momentum (Close, 31), Level: 103.0000
   double ind5buffer[]; CopyBuffer(indHandlers[264][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   bool   ind5long  = ind5val1 > 103.0000 + sigma;
   bool   ind5short = ind5val1 < 200 - 103.0000 - sigma;

   return CreateExitSignal(264, ind4long || ind5long, ind4short || ind5short, 72, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_265()
  {
   // Accelerator Oscillator, Level: 8.2000
   double ind0buffer[]; CopyBuffer(indHandlers[265][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 8.2000 - sigma && ind0val2 > 8.2000 + sigma;
   bool   ind0short = ind0val1 > -8.2000 + sigma && ind0val2 < -8.2000 - sigma;
   // Momentum (Close, 48)
   double ind1buffer[]; CopyBuffer(indHandlers[265][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;

   return CreateEntrySignal(265, ind0long && ind1long, ind0short && ind1short, 90, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_265()
  {
   // Stochastic (2, 2, 1)
   double ind2buffer[]; CopyBuffer(indHandlers[265][2][0], MAIN_LINE, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;
   // Stochastic Signal (11, 5, 8)
   double ind3buffer0[]; CopyBuffer(indHandlers[265][3][0], MAIN_LINE,   1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[265][3][0], SIGNAL_LINE, 1, 2, ind3buffer1);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer1[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateExitSignal(265, ind2long || ind3long, ind2short || ind3short, 90, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_266()
  {
   // Pin Bar (9, 40)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 40 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 40 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(266, ind0long, ind0short, 32, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_266()
  {
   // Moving Average (Simple, Close, 14, 0)
   double ind1buffer[]; CopyBuffer(indHandlers[266][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Bulls Power (8), Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[266][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > 0.0000 + sigma && ind2val2 < 0.0000 - sigma;
   bool   ind2short = ind2val1 < 0.0000 - sigma && ind2val2 > 0.0000 + sigma;
   // Bollinger Bands (Close, 31, 3.10)
   double ind3buffer0[]; CopyBuffer(indHandlers[266][3][0], 1, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[266][3][0], 2, 1, 2, ind3buffer1);
   double ind3upBand1 = ind3buffer0[1];
   double ind3dnBand1 = ind3buffer1[1];
   double ind3upBand2 = ind3buffer0[0];
   double ind3dnBand2 = ind3buffer1[0];
   bool   ind3long    = Open(0) < ind3upBand1 - sigma && Open(1) > ind3upBand2 + sigma;
   bool   ind3short   = Open(0) > ind3dnBand1 + sigma && Open(1) < ind3dnBand2 - sigma;
   // Moving Average (Simple, Close, 45, 0)
   double ind4buffer[]; CopyBuffer(indHandlers[266][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;

   return CreateExitSignal(266, ind1long || ind2long || ind3long || ind4long, ind1short || ind2short || ind3short || ind4short, 32, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_267()
  {
   // Pin Bar (8, 49)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 8 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 49 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 49 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(267, ind0long, ind0short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_267()
  {
   // Moving Average (Simple, Close, 9, 0)
   double ind1buffer[]; CopyBuffer(indHandlers[267][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = Open(0) < ind1val1 - sigma && Open(1) > ind1val2 + sigma;
   bool   ind1short = Open(0) > ind1val1 + sigma && Open(1) < ind1val2 - sigma;
   // Bollinger Bands (Close, 26, 1.61)
   double ind2buffer0[]; CopyBuffer(indHandlers[267][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[267][2][0], 2, 1, 2, ind2buffer1);
   double ind2upBand1 = ind2buffer0[1];
   double ind2dnBand1 = ind2buffer1[1];
   double ind2upBand2 = ind2buffer0[0];
   double ind2dnBand2 = ind2buffer1[0];
   bool   ind2long    = Open(0) > ind2upBand1 + sigma && Open(1) < ind2upBand2 - sigma;
   bool   ind2short   = Open(0) < ind2dnBand1 - sigma && Open(1) > ind2dnBand2 + sigma;
   // Moving Average (Simple, Close, 50, 0)
   double ind3buffer[]; CopyBuffer(indHandlers[267][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateExitSignal(267, ind1long || ind2long || ind3long, ind1short || ind2short || ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_268()
  {
   // Directional Indicators (23)
   double ind0buffer0[]; CopyBuffer(indHandlers[268][0][0], 1, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[268][0][0], 2, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer0[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   // Candle Color (25, 4)
   bool ind1long  = false;
   bool ind1short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 25;

      for (int b = 4 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind1long  = consecutiveBearish >= 4;
      ind1short = consecutiveBullish >= 4;
   }
   // Stochastic (4, 1, 3)
   double ind2buffer[]; CopyBuffer(indHandlers[268][2][0], MAIN_LINE, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;

   return CreateEntrySignal(268, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_268()
  {
   // Commodity Channel Index (Typical, 34)
   double ind3buffer[]; CopyBuffer(indHandlers[268][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // Stochastic (4, 1, 4)
   double ind4buffer[]; CopyBuffer(indHandlers[268][4][0], MAIN_LINE, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;
   // Average True Range (7)
   double ind5buffer[]; CopyBuffer(indHandlers[268][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 > ind5val2 + sigma;
   bool   ind5short = ind5long;

   return CreateExitSignal(268, ind3long || ind4long || ind5long, ind3short || ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_269()
  {
   // ADX (41), Level: 33.0
   double ind0buffer[]; CopyBuffer(indHandlers[269][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 33.0 + sigma && ind0val2 < 33.0 - sigma;
   bool   ind0short = ind0long;
   // Moving Average (Simple, Close, 10, 0)
   double ind1buffer[]; CopyBuffer(indHandlers[269][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;

   return CreateEntrySignal(269, ind0long && ind1long, ind0short && ind1short, 23, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_269()
  {
   // Moving Average (Simple, Close, 48, 0)
   double ind2buffer[]; CopyBuffer(indHandlers[269][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;

   return CreateExitSignal(269, ind2long, ind2short, 23, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_270()
  {
   // Stochastic Signal (17, 11, 10)
   double ind0buffer0[]; CopyBuffer(indHandlers[270][0][0], MAIN_LINE,   1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[270][0][0], SIGNAL_LINE, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   bool   ind0long  = ind0val1 > ind0val2 + sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma;
   // Envelopes (Close, Simple, 23, 0.68)
   double ind1buffer0[]; CopyBuffer(indHandlers[270][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[270][1][0], 1, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   bool   ind1long  = Open(0) > ind1upBand1 + sigma;
   bool   ind1short = Open(0) < ind1dnBand1 - sigma;
   // Stochastic Signal (10, 7, 4)
   double ind2buffer0[]; CopyBuffer(indHandlers[270][2][0], MAIN_LINE,   1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[270][2][0], SIGNAL_LINE, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   double ind2val3  = ind2buffer0[0];
   double ind2val4  = ind2buffer1[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;

   return CreateEntrySignal(270, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 66, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_270()
  {
   // Stochastic (5, 2, 4)
   double ind3buffer[]; CopyBuffer(indHandlers[270][3][0], MAIN_LINE, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateExitSignal(270, ind3long, ind3short, 66, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_271()
  {
   // Momentum (Close, 15)
   double ind0buffer[]; CopyBuffer(indHandlers[271][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   double ind0val3  = ind0buffer[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val2 < ind0val3 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val2 > ind0val3 + sigma;
   // Stochastic Signal (16, 10, 5)
   double ind1buffer0[]; CopyBuffer(indHandlers[271][1][0], MAIN_LINE,   1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[271][1][0], SIGNAL_LINE, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Alligator (Smoothed, Median, 23, 21, 21, 6, 6, 4)
   double ind2buffer0[]; CopyBuffer(indHandlers[271][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[271][2][0], 1, 1, 2, ind2buffer1);
   double ind2buffer2[]; CopyBuffer(indHandlers[271][2][0], 2, 1, 2, ind2buffer2);
   double ind2val1  = ind2buffer1[1];
   double ind2val2  = ind2buffer0[1];
   double ind2val3  = ind2buffer1[0];
   double ind2val4  = ind2buffer0[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;
   // RSI (Close, 31)
   double ind3buffer[]; CopyBuffer(indHandlers[271][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   double ind3val3  = ind3buffer[0];
   bool   ind3long  = ind3val1 > ind3val2 + sigma && ind3val2 < ind3val3 - sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma && ind3val2 > ind3val3 + sigma;

   return CreateEntrySignal(271, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 32, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_271()
  {
   // Bulls Power (39), Level: 0.0000
   double ind4buffer[]; CopyBuffer(indHandlers[271][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < 0.0000 - sigma && ind4val2 > 0.0000 + sigma;
   bool   ind4short = ind4val1 > 0.0000 + sigma && ind4val2 < 0.0000 - sigma;
   // Momentum (Close, 14), Level: 95.0000
   double ind5buffer[]; CopyBuffer(indHandlers[271][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   bool   ind5long  = ind5val1 < 95.0000 - sigma;
   bool   ind5short = ind5val1 > 200 - 95.0000 + sigma;
   // Pin Bar (8, 21)

   bool ind6long  = false;
   bool ind6short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 8 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 21 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 21 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind6long  = isBullishPinBar;
      ind6short = isBearishPinBar;
   }

   return CreateExitSignal(271, ind4long || ind5long || ind6long, ind4short || ind5short || ind6short, 32, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_272()
  {
   // MACD (Close, 16, 36, 9)
   double ind0buffer[]; CopyBuffer(indHandlers[272][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   bool   ind0long  = ind0val1 > 0 + sigma;
   bool   ind0short = ind0val1 < 0 - sigma;
   // Average True Range (15)
   double ind1buffer[]; CopyBuffer(indHandlers[272][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;
   bool   ind1short = ind1long;
   // Moving Average (Simple, Close, 18, 0)
   double ind2buffer[]; CopyBuffer(indHandlers[272][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = Open(0) > ind2val1 + sigma && Open(1) < ind2val2 - sigma;
   bool   ind2short = Open(0) < ind2val1 - sigma && Open(1) > ind2val2 + sigma;
   // MACD Signal (Close, 13, 17, 3)
   double ind3buffer0[]; CopyBuffer(indHandlers[272][3][0], 0, 1, 3, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[272][3][0], 1, 1, 3, ind3buffer1);
   double ind3val1  = ind3buffer0[2] - ind3buffer1[2];
   double ind3val2  = ind3buffer0[1] - ind3buffer1[1];
   bool   ind3long  = ind3val1 > 0 + sigma && ind3val2 < 0 - sigma;
   bool   ind3short = ind3val1 < 0 - sigma && ind3val2 > 0 + sigma;

   return CreateEntrySignal(272, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 79, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_272()
  {
   // Envelopes (Close, Simple, 41, 0.31)
   double ind4buffer0[]; CopyBuffer(indHandlers[272][4][0], 0, 1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[272][4][0], 1, 1, 2, ind4buffer1);
   double ind4upBand1 = ind4buffer0[1];
   double ind4dnBand1 = ind4buffer1[1];
   double ind4upBand2 = ind4buffer0[0];
   double ind4dnBand2 = ind4buffer1[0];
   bool   ind4long    = Open(0) < ind4dnBand1 - sigma && Open(1) > ind4dnBand2 + sigma;
   bool   ind4short   = Open(0) > ind4upBand1 + sigma && Open(1) < ind4upBand2 - sigma;
   // Momentum (Close, 45)
   double ind5buffer[]; CopyBuffer(indHandlers[272][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 > ind5val2 + sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma;

   return CreateExitSignal(272, ind4long || ind5long, ind4short || ind5short, 79, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_273()
  {
   // Pin Bar (9, 50)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 9 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 50 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 50 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(273, ind0long, ind0short, 31, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_273()
  {
   // Williams' Percent Range (20), Level: -67.0
   double ind1buffer[]; CopyBuffer(indHandlers[273][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > -67.0 + sigma && ind1val2 < -67.0 - sigma;
   bool   ind1short = ind1val1 < -100 - -67.0 - sigma && ind1val2 > -100 - -67.0 + sigma;

   return CreateExitSignal(273, ind1long, ind1short, 31, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_274()
  {
   // MACD Signal (Close, 21, 37, 8)
   double ind0buffer0[]; CopyBuffer(indHandlers[274][0][0], 0, 1, 3, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[274][0][0], 1, 1, 3, ind0buffer1);
   double ind0val1  = ind0buffer0[2] - ind0buffer1[2];
   double ind0val2  = ind0buffer0[1] - ind0buffer1[1];
   bool   ind0long  = ind0val1 > 0 + sigma && ind0val2 < 0 - sigma;
   bool   ind0short = ind0val1 < 0 - sigma && ind0val2 > 0 + sigma;
   // MACD (Close, 20, 27, 9)
   double ind1buffer[]; CopyBuffer(indHandlers[274][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > 0 + sigma && ind1val2 < 0 - sigma;
   bool   ind1short = ind1val1 < 0 - sigma && ind1val2 > 0 + sigma;
   // Moving Average (Simple, Close, 48, 0)
   double ind2buffer[]; CopyBuffer(indHandlers[274][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = Open(0) > ind2val1 + sigma;
   bool   ind2short = Open(0) < ind2val1 - sigma;

   return CreateEntrySignal(274, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_274()
  {
   // Commodity Channel Index (Typical, 6)
   double ind3buffer[]; CopyBuffer(indHandlers[274][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // Stochastic Signal (17, 3, 7)
   double ind4buffer0[]; CopyBuffer(indHandlers[274][4][0], MAIN_LINE,   1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[274][4][0], SIGNAL_LINE, 1, 2, ind4buffer1);
   double ind4val1  = ind4buffer0[1];
   double ind4val2  = ind4buffer1[1];
   bool   ind4long  = ind4val1 < ind4val2 - sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma;
   // Directional Indicators (32)
   double ind5buffer0[]; CopyBuffer(indHandlers[274][5][0], 1, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[274][5][0], 2, 1, 2, ind5buffer1);
   double ind5val1  = ind5buffer0[1];
   double ind5val2  = ind5buffer1[1];
   double ind5val3  = ind5buffer0[0];
   double ind5val4  = ind5buffer1[0];
   bool   ind5long  = ind5val1 > ind5val2 + sigma && ind5val3 < ind5val4 - sigma;
   bool   ind5short = ind5val1 < ind5val2 - sigma && ind5val3 > ind5val4 + sigma;

   return CreateExitSignal(274, ind3long || ind4long || ind5long, ind3short || ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_275()
  {
   // Moving Averages Crossover (Simple, Simple, 24, 45)
   double ind0buffer0[]; CopyBuffer(indHandlers[275][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[275][0][1], 0, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer0[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   // Williams' Percent Range (49)
   double ind1buffer[]; CopyBuffer(indHandlers[275][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   double ind1val3  = ind1buffer[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val2 < ind1val3 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val2 > ind1val3 + sigma;

   return CreateEntrySignal(275, ind0long && ind1long, ind0short && ind1short, 88, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_275()
  {
   // ADX (31), Level: 25.0
   double ind2buffer[]; CopyBuffer(indHandlers[275][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > 25.0 + sigma && ind2val2 < 25.0 - sigma;
   bool   ind2short = ind2long;

   return CreateExitSignal(275, ind2long, ind2short, 88, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_276()
  {
   // RSI (Close, 17), Level: 30
   double ind0buffer[]; CopyBuffer(indHandlers[276][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 < 30 - sigma && ind0val2 > 30 + sigma;
   bool   ind0short = ind0val1 > 100 - 30 + sigma && ind0val2 < 100 - 30 - sigma;
   // Alligator (Smoothed, Median, 25, 24, 24, 15, 15, 5)
   double ind1buffer0[]; CopyBuffer(indHandlers[276][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[276][1][0], 1, 1, 2, ind1buffer1);
   double ind1buffer2[]; CopyBuffer(indHandlers[276][1][0], 2, 1, 2, ind1buffer2);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer0[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Commodity Channel Index (Typical, 22)
   double ind2buffer[]; CopyBuffer(indHandlers[276][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   // Awesome Oscillator
   double ind3buffer[]; CopyBuffer(indHandlers[276][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateEntrySignal(276, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_276()
  {
   // DeMarker (38)
   double ind4buffer[]; CopyBuffer(indHandlers[276][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 > ind4val2 + sigma && ind4val2 < ind4val3 - sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;

   return CreateExitSignal(276, ind4long, ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_277()
  {
   // Pin Bar (10, 20)

   bool ind0long  = false;
   bool ind0short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 10 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 20 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 20 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind0long  = isBullishPinBar;
      ind0short = isBearishPinBar;
   }

   return CreateEntrySignal(277, ind0long, ind0short, 82, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_277()
  {
   // Moving Averages Crossover (Simple, Simple, 13, 19)
   double ind1buffer0[]; CopyBuffer(indHandlers[277][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[277][1][1], 0, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   double ind1val3  = ind1buffer0[0];
   double ind1val4  = ind1buffer1[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;
   // MACD Signal (Close, 23, 41, 12)
   double ind2buffer0[]; CopyBuffer(indHandlers[277][2][0], 0, 1, 3, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[277][2][0], 1, 1, 3, ind2buffer1);
   double ind2val1  = ind2buffer0[2] - ind2buffer1[2];
   bool   ind2long  = ind2val1 < 0 - sigma;
   bool   ind2short = ind2val1 > 0 + sigma;

   return CreateExitSignal(277, ind1long || ind2long, ind1short || ind2short, 82, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_278()
  {
   // Awesome Oscillator
   double ind0buffer[]; CopyBuffer(indHandlers[278][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   double ind0val3  = ind0buffer[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val2 > ind0val3 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val2 < ind0val3 - sigma;
   // Bulls Power (46), Level: 0.0000
   double ind1buffer[]; CopyBuffer(indHandlers[278][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < 0.0000 - sigma && ind1val2 > 0.0000 + sigma;
   bool   ind1short = ind1val1 > 0.0000 + sigma && ind1val2 < 0.0000 - sigma;
   // Momentum (Close, 36)
   double ind2buffer[]; CopyBuffer(indHandlers[278][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   double ind2val3  = ind2buffer[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val2 < ind2val3 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val2 > ind2val3 + sigma;
   // Alligator (Smoothed, Median, 45, 20, 20, 6, 6, 4)
   double ind3buffer0[]; CopyBuffer(indHandlers[278][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[278][3][0], 1, 1, 2, ind3buffer1);
   double ind3buffer2[]; CopyBuffer(indHandlers[278][3][0], 2, 1, 2, ind3buffer2);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer0[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateEntrySignal(278, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 79, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_278()
  {
   // Average True Range (7), Level: 11.8000
   double ind4buffer[]; CopyBuffer(indHandlers[278][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < 11.8000 - sigma && ind4val2 > 11.8000 + sigma;
   bool   ind4short = ind4long;

   return CreateExitSignal(278, ind4long, ind4short, 79, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_279()
  {
   // Stochastic (7, 7, 7), Level: 33.0
   double ind0buffer[]; CopyBuffer(indHandlers[279][0][0], MAIN_LINE, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 33.0 + sigma && ind0val2 < 33.0 - sigma;
   bool   ind0short = ind0val1 < 100 - 33.0 - sigma && ind0val2 > 100 - 33.0 + sigma;
   // Alligator (Smoothed, Median, 27, 12, 12, 10, 10, 4)
   double ind1buffer0[]; CopyBuffer(indHandlers[279][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[279][1][0], 1, 1, 2, ind1buffer1);
   double ind1buffer2[]; CopyBuffer(indHandlers[279][1][0], 2, 1, 2, ind1buffer2);
   double ind1val1  = ind1buffer2[1];
   double ind1val2  = ind1buffer1[1];
   double ind1val3  = ind1buffer2[0];
   double ind1val4  = ind1buffer1[0];
   bool   ind1long  = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;

   return CreateEntrySignal(279, ind0long && ind1long, ind0short && ind1short, 66, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_279()
  {
   // Bulls Power (26), Level: 0.0000
   double ind2buffer[]; CopyBuffer(indHandlers[279][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > 0.0000 + sigma && ind2val2 < 0.0000 - sigma;
   bool   ind2short = ind2val1 < 0.0000 - sigma && ind2val2 > 0.0000 + sigma;
   // Bears Power (17), Level: 3.9200
   double ind3buffer[]; CopyBuffer(indHandlers[279][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 > 3.9200 + sigma;
   bool   ind3short = ind3val1 < -3.9200 - sigma;

   return CreateExitSignal(279, ind2long || ind3long, ind2short || ind3short, 66, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_280()
  {
   // Candle Color (39, 3)
   bool ind0long  = false;
   bool ind0short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 39;

      for (int b = 3 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind0long  = consecutiveBullish >= 3;
      ind0short = consecutiveBearish >= 3;
   }
   // Alligator (Smoothed, Median, 26, 12, 12, 5, 5, 2)
   double ind1buffer0[]; CopyBuffer(indHandlers[280][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[280][1][0], 1, 1, 2, ind1buffer1);
   double ind1buffer2[]; CopyBuffer(indHandlers[280][1][0], 2, 1, 2, ind1buffer2);
   double ind1val1  = ind1buffer2[1];
   double ind1val2  = ind1buffer0[1];
   double ind1val3  = ind1buffer2[0];
   double ind1val4  = ind1buffer0[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;
   // DeMarker (6), Level: 0.82
   double ind2buffer[]; CopyBuffer(indHandlers[280][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 > 0.82 + sigma;
   bool   ind2short = ind2val1 < 1 - 0.82 - sigma;

   return CreateEntrySignal(280, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 47, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_280()
  {
   // Stochastic Signal (4, 3, 1)
   double ind3buffer0[]; CopyBuffer(indHandlers[280][3][0], MAIN_LINE,   1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[280][3][0], SIGNAL_LINE, 1, 2, ind3buffer1);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer1[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // Awesome Oscillator, Level: 0.0000
   double ind4buffer[]; CopyBuffer(indHandlers[280][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < 0.0000 - sigma && ind4val2 > 0.0000 + sigma;
   bool   ind4short = ind4val1 > 0.0000 + sigma && ind4val2 < 0.0000 - sigma;
   // Awesome Oscillator, Level: 8.5000
   double ind5buffer[]; CopyBuffer(indHandlers[280][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 > 8.5000 + sigma && ind5val2 < 8.5000 - sigma;
   bool   ind5short = ind5val1 < -8.5000 - sigma && ind5val2 > -8.5000 + sigma;
   // Pin Bar (8, 29)

   bool ind6long  = false;
   bool ind6short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 8 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 29 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 29 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind6long  = isBullishPinBar;
      ind6short = isBearishPinBar;
   }

   return CreateExitSignal(280, ind3long || ind4long || ind5long || ind6long, ind3short || ind4short || ind5short || ind6short, 47, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_281()
  {
   // Accelerator Oscillator
   double ind0buffer[]; CopyBuffer(indHandlers[281][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   double ind0val3  = ind0buffer[0];
   bool   ind0long  = ind0val1 < ind0val2 - sigma && ind0val2 > ind0val3 + sigma;
   bool   ind0short = ind0val1 > ind0val2 + sigma && ind0val2 < ind0val3 - sigma;
   // Momentum (Close, 30), Level: 101.0000
   double ind1buffer[]; CopyBuffer(indHandlers[281][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > 101.0000 + sigma && ind1val2 < 101.0000 - sigma;
   bool   ind1short = ind1val1 < 200 - 101.0000 - sigma && ind1val2 > 200 - 101.0000 + sigma;
   // Commodity Channel Index (Typical, 17)
   double ind2buffer[]; CopyBuffer(indHandlers[281][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;

   return CreateEntrySignal(281, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 49, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_281()
  {
   // DeMarker (20)
   double ind3buffer[]; CopyBuffer(indHandlers[281][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;
   // RSI (Close, 30)
   double ind4buffer[]; CopyBuffer(indHandlers[281][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < ind4val2 - sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma;

   return CreateExitSignal(281, ind3long || ind4long, ind3short || ind4short, 49, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_282()
  {
   // Bollinger Bands (Close, 47, 3.65)
   double ind0buffer0[]; CopyBuffer(indHandlers[282][0][0], 1, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[282][0][0], 2, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   double ind0upBand2 = ind0buffer0[0];
   double ind0dnBand2 = ind0buffer1[0];
   bool   ind0long    = Open(0) > ind0upBand1 + sigma && Open(1) < ind0upBand2 - sigma;
   bool   ind0short   = Open(0) < ind0dnBand1 - sigma && Open(1) > ind0dnBand2 + sigma;

   return CreateEntrySignal(282, ind0long, ind0short, 58, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_282()
  {
   // MACD Signal (Close, 20, 38, 8)
   double ind1buffer0[]; CopyBuffer(indHandlers[282][1][0], 0, 1, 3, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[282][1][0], 1, 1, 3, ind1buffer1);
   double ind1val1  = ind1buffer0[2] - ind1buffer1[2];
   bool   ind1long  = ind1val1 > 0 + sigma;
   bool   ind1short = ind1val1 < 0 - sigma;
   // Alligator (Smoothed, Median, 37, 18, 18, 4, 4, 3)
   double ind2buffer0[]; CopyBuffer(indHandlers[282][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[282][2][0], 1, 1, 2, ind2buffer1);
   double ind2buffer2[]; CopyBuffer(indHandlers[282][2][0], 2, 1, 2, ind2buffer2);
   double ind2val1  = ind2buffer2[1];
   double ind2val2  = ind2buffer0[1];
   double ind2val3  = ind2buffer2[0];
   double ind2val4  = ind2buffer0[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;

   return CreateExitSignal(282, ind1long || ind2long, ind1short || ind2short, 58, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_283()
  {
   // Momentum (Close, 16)
   double ind0buffer[]; CopyBuffer(indHandlers[283][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > ind0val2 + sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma;
   // Moving Averages Crossover (Simple, Simple, 10, 41)
   double ind1buffer0[]; CopyBuffer(indHandlers[283][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[283][1][1], 0, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   double ind1val3  = ind1buffer0[0];
   double ind1val4  = ind1buffer1[0];
   bool   ind1long  = ind1val1 > ind1val2 + sigma && ind1val3 < ind1val4 - sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma && ind1val3 > ind1val4 + sigma;
   // Williams' Percent Range (12), Level: -17.0
   double ind2buffer[]; CopyBuffer(indHandlers[283][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 > -17.0 + sigma;
   bool   ind2short = ind2val1 < -100 - -17.0 - sigma;
   // Moving Averages Crossover (Simple, Simple, 25, 41)
   double ind3buffer0[]; CopyBuffer(indHandlers[283][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[283][3][1], 0, 1, 2, ind3buffer1);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer1[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;

   return CreateEntrySignal(283, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 39, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_283()
  {
   // Stochastic Signal (9, 8, 6)
   double ind4buffer0[]; CopyBuffer(indHandlers[283][4][0], MAIN_LINE,   1, 2, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[283][4][0], SIGNAL_LINE, 1, 2, ind4buffer1);
   double ind4val1  = ind4buffer0[1];
   double ind4val2  = ind4buffer1[1];
   double ind4val3  = ind4buffer0[0];
   double ind4val4  = ind4buffer1[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val3 > ind4val4 + sigma;
   bool   ind4short = ind4val1 > ind4val2 + sigma && ind4val3 < ind4val4 - sigma;

   return CreateExitSignal(283, ind4long, ind4short, 39, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_284()
  {
   // MACD (Close, 21, 38, 9)
   double ind0buffer[]; CopyBuffer(indHandlers[284][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0 + sigma && ind0val2 < 0 - sigma;
   bool   ind0short = ind0val1 < 0 - sigma && ind0val2 > 0 + sigma;
   // Williams' Percent Range (21)
   double ind1buffer[]; CopyBuffer(indHandlers[284][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Candle Color (28, 2)
   bool ind2long  = false;
   bool ind2short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 28;

      for (int b = 2 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind2long  = consecutiveBullish >= 2;
      ind2short = consecutiveBearish >= 2;
   }

   return CreateEntrySignal(284, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 62, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_284()
  {
   // Standard Deviation (Close, Simple, 26)
   double ind3buffer[]; CopyBuffer(indHandlers[284][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3long;
   // Stochastic (5, 4, 2)
   double ind4buffer[]; CopyBuffer(indHandlers[284][4][0], MAIN_LINE, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > ind4val2 + sigma;
   bool   ind4short = ind4val1 < ind4val2 - sigma;
   // Moving Average (Simple, Close, 16, 0)
   double ind5buffer[]; CopyBuffer(indHandlers[284][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = Open(0) < ind5val1 - sigma && Open(1) > ind5val2 + sigma;
   bool   ind5short = Open(0) > ind5val1 + sigma && Open(1) < ind5val2 - sigma;
   // Awesome Oscillator, Level: -31.2000
   double ind6buffer[]; CopyBuffer(indHandlers[284][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   bool   ind6long  = ind6val1 < -31.2000 - sigma;
   bool   ind6short = ind6val1 > 31.2000 + sigma;

   return CreateExitSignal(284, ind3long || ind4long || ind5long || ind6long, ind3short || ind4short || ind5short || ind6short, 62, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_285()
  {
   // Momentum (Close, 1)
   double ind0buffer[]; CopyBuffer(indHandlers[285][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > ind0val2 + sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma;
   // Momentum (Close, 11)
   double ind1buffer[]; CopyBuffer(indHandlers[285][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Alligator (Smoothed, Median, 48, 27, 27, 12, 12, 3)
   double ind2buffer0[]; CopyBuffer(indHandlers[285][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[285][2][0], 1, 1, 2, ind2buffer1);
   double ind2buffer2[]; CopyBuffer(indHandlers[285][2][0], 2, 1, 2, ind2buffer2);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer0[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;
   // MACD Signal (Close, 21, 25, 5)
   double ind3buffer0[]; CopyBuffer(indHandlers[285][3][0], 0, 1, 3, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[285][3][0], 1, 1, 3, ind3buffer1);
   double ind3val1  = ind3buffer0[2] - ind3buffer1[2];
   double ind3val2  = ind3buffer0[1] - ind3buffer1[1];
   bool   ind3long  = ind3val1 > 0 + sigma && ind3val2 < 0 - sigma;
   bool   ind3short = ind3val1 < 0 - sigma && ind3val2 > 0 + sigma;
   // Moving Average (Simple, Close, 34, 0)
   double ind4buffer[]; CopyBuffer(indHandlers[285][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = Open(0) < ind4val1 - sigma;
   bool   ind4short = Open(0) > ind4val1 + sigma;

   return CreateEntrySignal(285, ind0long && ind1long && ind2long && ind3long && ind4long, ind0short && ind1short && ind2short && ind3short && ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_285()
  {
   // Directional Indicators (18)
   double ind5buffer0[]; CopyBuffer(indHandlers[285][5][0], 1, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[285][5][0], 2, 1, 2, ind5buffer1);
   double ind5val1  = ind5buffer0[1];
   double ind5val2  = ind5buffer1[1];
   double ind5val3  = ind5buffer0[0];
   double ind5val4  = ind5buffer1[0];
   bool   ind5long  = ind5val1 < ind5val2 - sigma && ind5val3 > ind5val4 + sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma && ind5val3 < ind5val4 - sigma;
   // Bears Power (36), Level: 0.0000
   double ind6buffer[]; CopyBuffer(indHandlers[285][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   bool   ind6long  = ind6val1 < 0.0000 - sigma;
   bool   ind6short = ind6val1 > 0.0000 + sigma;

   return CreateExitSignal(285, ind5long || ind6long, ind5short || ind6short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_286()
  {
   // Alligator (Smoothed, Median, 27, 13, 13, 9, 9, 1)
   double ind0buffer0[]; CopyBuffer(indHandlers[286][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[286][0][0], 1, 1, 2, ind0buffer1);
   double ind0buffer2[]; CopyBuffer(indHandlers[286][0][0], 2, 1, 2, ind0buffer2);
   double ind0val1  = ind0buffer2[1];
   double ind0val2  = ind0buffer0[1];
   double ind0val3  = ind0buffer2[0];
   double ind0val4  = ind0buffer0[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   // Bears Power (3), Level: 0.0000
   double ind1buffer[]; CopyBuffer(indHandlers[286][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   bool   ind1long  = ind1val1 < 0.0000 - sigma;
   bool   ind1short = ind1val1 > 0.0000 + sigma;
   // Moving Average (Simple, Close, 45, 0)
   double ind2buffer[]; CopyBuffer(indHandlers[286][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;
   // Williams' Percent Range (33)
   double ind3buffer[]; CopyBuffer(indHandlers[286][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateEntrySignal(286, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_286()
  {
   // DeMarker (9), Level: 0.05
   double ind4buffer[]; CopyBuffer(indHandlers[286][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 < 0.05 - sigma;
   bool   ind4short = ind4val1 > 1 - 0.05 + sigma;
   // Commodity Channel Index (Typical, 34)
   double ind5buffer[]; CopyBuffer(indHandlers[286][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   double ind5val3  = ind5buffer[0];
   bool   ind5long  = ind5val1 < ind5val2 - sigma && ind5val2 > ind5val3 + sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma && ind5val2 < ind5val3 - sigma;
   // Standard Deviation (Close, Simple, 9), Level: 8.7000
   double ind6buffer[]; CopyBuffer(indHandlers[286][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   bool   ind6long  = ind6val1 > 8.7000 + sigma;
   bool   ind6short = ind6long;
   // Momentum (Close, 50), Level: 98.0000
   double ind7buffer[]; CopyBuffer(indHandlers[286][7][0], 0, 1, 3, ind7buffer);
   double ind7val1  = ind7buffer[2];
   bool   ind7long  = ind7val1 < 98.0000 - sigma;
   bool   ind7short = ind7val1 > 200 - 98.0000 + sigma;

   return CreateExitSignal(286, ind4long || ind5long || ind6long || ind7long, ind4short || ind5short || ind6short || ind7short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_287()
  {
   // Alligator (Smoothed, Median, 28, 23, 23, 9, 9, 5)
   double ind0buffer0[]; CopyBuffer(indHandlers[287][0][0], 0, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[287][0][0], 1, 1, 2, ind0buffer1);
   double ind0buffer2[]; CopyBuffer(indHandlers[287][0][0], 2, 1, 2, ind0buffer2);
   double ind0val1  = ind0buffer2[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer2[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   // Average True Range (22)
   double ind1buffer[]; CopyBuffer(indHandlers[287][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1long;
   // ADX (46)
   double ind2buffer[]; CopyBuffer(indHandlers[287][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2long;

   return CreateEntrySignal(287, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_287()
  {
   // Accelerator Oscillator, Level: 0.0000
   double ind3buffer[]; CopyBuffer(indHandlers[287][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 < 0.0000 - sigma;
   bool   ind3short = ind3val1 > 0.0000 + sigma;

   return CreateExitSignal(287, ind3long, ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_288()
  {
   // Directional Indicators (18)
   double ind0buffer0[]; CopyBuffer(indHandlers[288][0][0], 1, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[288][0][0], 2, 1, 2, ind0buffer1);
   double ind0val1  = ind0buffer0[1];
   double ind0val2  = ind0buffer1[1];
   double ind0val3  = ind0buffer0[0];
   double ind0val4  = ind0buffer1[0];
   bool   ind0long  = ind0val1 > ind0val2 + sigma && ind0val3 < ind0val4 - sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma && ind0val3 > ind0val4 + sigma;
   // Williams' Percent Range (8)
   double ind1buffer[]; CopyBuffer(indHandlers[288][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 < ind1val2 - sigma;
   bool   ind1short = ind1val1 > ind1val2 + sigma;
   // Accelerator Oscillator
   double ind2buffer[]; CopyBuffer(indHandlers[288][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > ind2val2 + sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma;
   // Commodity Channel Index (Typical, 49), Level: -4
   double ind3buffer[]; CopyBuffer(indHandlers[288][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   bool   ind3long  = ind3val1 < -4 - sigma;
   bool   ind3short = ind3val1 > 4 + sigma;
   // Bears Power (49), Level: -7.0100
   double ind4buffer[]; CopyBuffer(indHandlers[288][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 < -7.0100 - sigma;
   bool   ind4short = ind4val1 > 7.0100 + sigma;

   return CreateEntrySignal(288, ind0long && ind1long && ind2long && ind3long && ind4long, ind0short && ind1short && ind2short && ind3short && ind4short, 41, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_288()
  {
   // Average True Range (5), Level: 17.4000
   double ind5buffer[]; CopyBuffer(indHandlers[288][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   bool   ind5long  = ind5val1 > 17.4000 + sigma;
   bool   ind5short = ind5long;

   return CreateExitSignal(288, ind5long, ind5short, 41, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_289()
  {
   // Stochastic (3, 2, 2), Level: 20.0
   double ind0buffer[]; CopyBuffer(indHandlers[289][0][0], MAIN_LINE, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   bool   ind0long  = ind0val1 < 20.0 - sigma;
   bool   ind0short = ind0val1 > 100 - 20.0 + sigma;
   // Williams' Percent Range (31), Level: -98.0
   double ind1buffer[]; CopyBuffer(indHandlers[289][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > -98.0 + sigma && ind1val2 < -98.0 - sigma;
   bool   ind1short = ind1val1 < -100 - -98.0 - sigma && ind1val2 > -100 - -98.0 + sigma;
   // Stochastic (8, 4, 2), Level: 2.0
   double ind2buffer[]; CopyBuffer(indHandlers[289][2][0], MAIN_LINE, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > 2.0 + sigma && ind2val2 < 2.0 - sigma;
   bool   ind2short = ind2val1 < 100 - 2.0 - sigma && ind2val2 > 100 - 2.0 + sigma;

   return CreateEntrySignal(289, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 42, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_289()
  {
   // Pin Bar (10, 34)

   bool ind3long  = false;
   bool ind3short = false;

   {
      double closeOpen = MathAbs(Close(1) - Open(1));
      bool isPinBar = closeOpen < 10 * 0.01 * (High(1) - Low(1));
      bool upWick   = High(1) - MathMax(Close(1), Open(1)) > 34 * 0.01 * closeOpen;
      bool downWick = MathMin(Close(1), Open(1)) - Low(1)  > 34 * 0.01 * closeOpen;
      bool isBearishPinBar = isPinBar && upWick && !downWick;
      bool isBullishPinBar = isPinBar && downWick && !upWick;

      ind3long  = isBullishPinBar;
      ind3short = isBearishPinBar;
   }
   // ADX (10)
   double ind4buffer[]; CopyBuffer(indHandlers[289][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   double ind4val3  = ind4buffer[0];
   bool   ind4long  = ind4val1 < ind4val2 - sigma && ind4val2 > ind4val3 + sigma;
   bool   ind4short = ind4long;
   // Momentum (Close, 21), Level: 95.0000
   double ind5buffer[]; CopyBuffer(indHandlers[289][5][0], 0, 1, 3, ind5buffer);
   double ind5val1  = ind5buffer[2];
   double ind5val2  = ind5buffer[1];
   bool   ind5long  = ind5val1 < 95.0000 - sigma && ind5val2 > 95.0000 + sigma;
   bool   ind5short = ind5val1 > 200 - 95.0000 + sigma && ind5val2 < 200 - 95.0000 - sigma;
   // Accelerator Oscillator, Level: 0.0000
   double ind6buffer[]; CopyBuffer(indHandlers[289][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   bool   ind6long  = ind6val1 > 0.0000 + sigma;
   bool   ind6short = ind6val1 < 0.0000 - sigma;

   return CreateExitSignal(289, ind3long || ind4long || ind5long || ind6long, ind3short || ind4short || ind5short || ind6short, 42, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_290()
  {
   // Accelerator Oscillator, Level: 2.1000
   double ind0buffer[]; CopyBuffer(indHandlers[290][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 2.1000 + sigma && ind0val2 < 2.1000 - sigma;
   bool   ind0short = ind0val1 < -2.1000 - sigma && ind0val2 > -2.1000 + sigma;
   // Bollinger Bands (Close, 50, 2.13)
   double ind1buffer0[]; CopyBuffer(indHandlers[290][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[290][1][0], 2, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   double ind1upBand2 = ind1buffer0[0];
   double ind1dnBand2 = ind1buffer1[0];
   bool   ind1long    = Open(0) > ind1upBand1 + sigma && Open(1) < ind1upBand2 - sigma;
   bool   ind1short   = Open(0) < ind1dnBand1 - sigma && Open(1) > ind1dnBand2 + sigma;

   return CreateEntrySignal(290, ind0long && ind1long, ind0short && ind1short, 83, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_290()
  {
   // Average True Range (40), Level: 9.0000
   double ind2buffer[]; CopyBuffer(indHandlers[290][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   bool   ind2long  = ind2val1 > 9.0000 + sigma;
   bool   ind2short = ind2long;
   // Awesome Oscillator
   double ind3buffer[]; CopyBuffer(indHandlers[290][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;
   // MACD Signal (Close, 9, 29, 13)
   double ind4buffer0[]; CopyBuffer(indHandlers[290][4][0], 0, 1, 3, ind4buffer0);
   double ind4buffer1[]; CopyBuffer(indHandlers[290][4][0], 1, 1, 3, ind4buffer1);
   double ind4val1  = ind4buffer0[2] - ind4buffer1[2];
   bool   ind4long  = ind4val1 < 0 - sigma;
   bool   ind4short = ind4val1 > 0 + sigma;

   return CreateExitSignal(290, ind2long || ind3long || ind4long, ind2short || ind3short || ind4short, 83, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_291()
  {
   // MACD (Close, 15, 50, 9)
   double ind0buffer[]; CopyBuffer(indHandlers[291][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 0 + sigma && ind0val2 < 0 - sigma;
   bool   ind0short = ind0val1 < 0 - sigma && ind0val2 > 0 + sigma;
   // Momentum (Close, 30)
   double ind1buffer[]; CopyBuffer(indHandlers[291][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Directional Indicators (21)
   double ind2buffer0[]; CopyBuffer(indHandlers[291][2][0], 1, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[291][2][0], 2, 1, 2, ind2buffer1);
   double ind2val1  = ind2buffer0[1];
   double ind2val2  = ind2buffer1[1];
   double ind2val3  = ind2buffer0[0];
   double ind2val4  = ind2buffer1[0];
   bool   ind2long  = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;
   bool   ind2short = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;

   return CreateEntrySignal(291, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 74, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_291()
  {
   // Williams' Percent Range (40)
   double ind3buffer[]; CopyBuffer(indHandlers[291][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma;

   return CreateExitSignal(291, ind3long, ind3short, 74, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_292()
  {
   // Williams' Percent Range (1), Level: -20.0
   double ind0buffer[]; CopyBuffer(indHandlers[292][0][0], 0, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > -20.0 + sigma && ind0val2 < -20.0 - sigma;
   bool   ind0short = ind0val1 < -100 - -20.0 - sigma && ind0val2 > -100 - -20.0 + sigma;
   // Directional Indicators (23)
   double ind1buffer0[]; CopyBuffer(indHandlers[292][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[292][1][0], 2, 1, 2, ind1buffer1);
   double ind1val1  = ind1buffer0[1];
   double ind1val2  = ind1buffer1[1];
   bool   ind1long  = ind1val1 > ind1val2 + sigma;
   bool   ind1short = ind1val1 < ind1val2 - sigma;
   // Alligator (Smoothed, Median, 21, 20, 20, 9, 9, 3)
   double ind2buffer0[]; CopyBuffer(indHandlers[292][2][0], 0, 1, 2, ind2buffer0);
   double ind2buffer1[]; CopyBuffer(indHandlers[292][2][0], 1, 1, 2, ind2buffer1);
   double ind2buffer2[]; CopyBuffer(indHandlers[292][2][0], 2, 1, 2, ind2buffer2);
   double ind2val1  = ind2buffer1[1];
   double ind2val2  = ind2buffer0[1];
   double ind2val3  = ind2buffer1[0];
   double ind2val4  = ind2buffer0[0];
   bool   ind2long  = ind2val1 < ind2val2 - sigma && ind2val3 > ind2val4 + sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma && ind2val3 < ind2val4 - sigma;
   // Stochastic (5, 4, 1)
   double ind3buffer[]; CopyBuffer(indHandlers[292][3][0], MAIN_LINE, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;

   return CreateEntrySignal(292, ind0long && ind1long && ind2long && ind3long, ind0short && ind1short && ind2short && ind3short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_292()
  {
   // Commodity Channel Index (Typical, 32), Level: 0
   double ind4buffer[]; CopyBuffer(indHandlers[292][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 > 0 + sigma && ind4val2 < 0 - sigma;
   bool   ind4short = ind4val1 < 0 - sigma && ind4val2 > 0 + sigma;
   // MACD Signal (Close, 15, 27, 10)
   double ind5buffer0[]; CopyBuffer(indHandlers[292][5][0], 0, 1, 3, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[292][5][0], 1, 1, 3, ind5buffer1);
   double ind5val1  = ind5buffer0[2] - ind5buffer1[2];
   double ind5val2  = ind5buffer0[1] - ind5buffer1[1];
   bool   ind5long  = ind5val1 < 0 - sigma && ind5val2 > 0 + sigma;
   bool   ind5short = ind5val1 > 0 + sigma && ind5val2 < 0 - sigma;

   return CreateExitSignal(292, ind4long || ind5long, ind4short || ind5short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_293()
  {
   // Stochastic (2, 1, 1)
   double ind0buffer[]; CopyBuffer(indHandlers[293][0][0], MAIN_LINE, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > ind0val2 + sigma;
   bool   ind0short = ind0val1 < ind0val2 - sigma;
   // Envelopes (Close, Simple, 16, 0.88)
   double ind1buffer0[]; CopyBuffer(indHandlers[293][1][0], 0, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[293][1][0], 1, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   double ind1upBand2 = ind1buffer0[0];
   double ind1dnBand2 = ind1buffer1[0];
   bool   ind1long    = Open(0) < ind1dnBand1 - sigma && Open(1) > ind1dnBand2 + sigma;
   bool   ind1short   = Open(0) > ind1upBand1 + sigma && Open(1) < ind1upBand2 - sigma;
   // Accelerator Oscillator
   double ind2buffer[]; CopyBuffer(indHandlers[293][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 < ind2val2 - sigma;
   bool   ind2short = ind2val1 > ind2val2 + sigma;

   return CreateEntrySignal(293, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 69, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_293()
  {
   // Moving Average (Simple, Close, 14, 0)
   double ind3buffer[]; CopyBuffer(indHandlers[293][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 > ind3val2 + sigma;
   bool   ind3short = ind3val1 < ind3val2 - sigma;
   // Momentum (Close, 36), Level: 96.0000
   double ind4buffer[]; CopyBuffer(indHandlers[293][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   double ind4val2  = ind4buffer[1];
   bool   ind4long  = ind4val1 < 96.0000 - sigma && ind4val2 > 96.0000 + sigma;
   bool   ind4short = ind4val1 > 200 - 96.0000 + sigma && ind4val2 < 200 - 96.0000 - sigma;
   // Envelopes (Close, Simple, 50, 0.33)
   double ind5buffer0[]; CopyBuffer(indHandlers[293][5][0], 0, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[293][5][0], 1, 1, 2, ind5buffer1);
   double ind5upBand1 = ind5buffer0[1];
   double ind5dnBand1 = ind5buffer1[1];
   bool   ind5long  = Open(0) < ind5dnBand1 - sigma;
   bool   ind5short = Open(0) > ind5upBand1 + sigma;
   // Moving Average of Oscillator (Close, 24, 50, 8), Level: 0.0000
   double ind6buffer[]; CopyBuffer(indHandlers[293][6][0], 0, 1, 3, ind6buffer);
   double ind6val1  = ind6buffer[2];
   bool   ind6long  = ind6val1 < 0.0000 - sigma;
   bool   ind6short = ind6val1 > 0.0000 + sigma;

   return CreateExitSignal(293, ind3long || ind4long || ind5long || ind6long, ind3short || ind4short || ind5short || ind6short, 69, 0, true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_294()
  {
   // Bollinger Bands (Close, 8, 1.90)
   double ind0buffer0[]; CopyBuffer(indHandlers[294][0][0], 1, 1, 2, ind0buffer0);
   double ind0buffer1[]; CopyBuffer(indHandlers[294][0][0], 2, 1, 2, ind0buffer1);
   double ind0upBand1 = ind0buffer0[1];
   double ind0dnBand1 = ind0buffer1[1];
   bool   ind0long  = Open(0) > ind0upBand1 + sigma;
   bool   ind0short = Open(0) < ind0dnBand1 - sigma;
   // Accelerator Oscillator, Level: 0.0000
   double ind1buffer[]; CopyBuffer(indHandlers[294][1][0], 0, 1, 3, ind1buffer);
   double ind1val1  = ind1buffer[2];
   double ind1val2  = ind1buffer[1];
   bool   ind1long  = ind1val1 > 0.0000 + sigma && ind1val2 < 0.0000 - sigma;
   bool   ind1short = ind1val1 < 0.0000 - sigma && ind1val2 > 0.0000 + sigma;
   // Candle Color (30, 4)
   bool ind2long  = false;
   bool ind2short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 30;

      for (int b = 4 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind2long  = consecutiveBullish >= 4;
      ind2short = consecutiveBearish >= 4;
   }

   return CreateEntrySignal(294, ind0long && ind1long && ind2long, ind0short && ind1short && ind2short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_294()
  {
   // ADX (18)
   double ind3buffer[]; CopyBuffer(indHandlers[294][3][0], 0, 1, 3, ind3buffer);
   double ind3val1  = ind3buffer[2];
   double ind3val2  = ind3buffer[1];
   bool   ind3long  = ind3val1 < ind3val2 - sigma;
   bool   ind3short = ind3long;
   // Momentum (Close, 24), Level: 101.0000
   double ind4buffer[]; CopyBuffer(indHandlers[294][4][0], 0, 1, 3, ind4buffer);
   double ind4val1  = ind4buffer[2];
   bool   ind4long  = ind4val1 > 101.0000 + sigma;
   bool   ind4short = ind4val1 < 200 - 101.0000 - sigma;

   return CreateExitSignal(294, ind3long || ind4long, ind3short || ind4short, 0, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetEntrySignal_295()
  {
   // Stochastic (9, 3, 8), Level: 20.0
   double ind0buffer[]; CopyBuffer(indHandlers[295][0][0], MAIN_LINE, 1, 3, ind0buffer);
   double ind0val1  = ind0buffer[2];
   double ind0val2  = ind0buffer[1];
   bool   ind0long  = ind0val1 > 20.0 + sigma && ind0val2 < 20.0 - sigma;
   bool   ind0short = ind0val1 < 100 - 20.0 - sigma && ind0val2 > 100 - 20.0 + sigma;
   // Bollinger Bands (Close, 12, 1.54)
   double ind1buffer0[]; CopyBuffer(indHandlers[295][1][0], 1, 1, 2, ind1buffer0);
   double ind1buffer1[]; CopyBuffer(indHandlers[295][1][0], 2, 1, 2, ind1buffer1);
   double ind1upBand1 = ind1buffer0[1];
   double ind1dnBand1 = ind1buffer1[1];
   bool   ind1long  = Open(0) > ind1upBand1 + sigma;
   bool   ind1short = Open(0) < ind1dnBand1 - sigma;

   return CreateEntrySignal(295, ind0long && ind1long, ind0short && ind1short, 43, 0, false);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Signal GetExitSignal_295()
  {
   // MACD (Close, 23, 26, 9)
   double ind2buffer[]; CopyBuffer(indHandlers[295][2][0], 0, 1, 3, ind2buffer);
   double ind2val1  = ind2buffer[2];
   double ind2val2  = ind2buffer[1];
   bool   ind2long  = ind2val1 > 0 + sigma && ind2val2 < 0 - sigma;
   bool   ind2short = ind2val1 < 0 - sigma && ind2val2 > 0 + sigma;
   // Moving Averages Crossover (Simple, Simple, 6, 41)
   double ind3buffer0[]; CopyBuffer(indHandlers[295][3][0], 0, 1, 2, ind3buffer0);
   double ind3buffer1[]; CopyBuffer(indHandlers[295][3][1], 0, 1, 2, ind3buffer1);
   double ind3val1  = ind3buffer0[1];
   double ind3val2  = ind3buffer1[1];
   double ind3val3  = ind3buffer0[0];
   double ind3val4  = ind3buffer1[0];
   bool   ind3long  = ind3val1 < ind3val2 - sigma && ind3val3 > ind3val4 + sigma;
   bool   ind3short = ind3val1 > ind3val2 + sigma && ind3val3 < ind3val4 - sigma;
   // Candle Color (44, 5)
   bool ind4long  = false;
   bool ind4short = false;
   {
      int consecutiveBullish = 0;
      int consecutiveBearish = 0;
      double pipVal = pip * 44;

      for (int b = 5 + 2; b > 0; b--)
        {
         consecutiveBullish = Close(b) - Open(b) >= pipVal ? consecutiveBullish + 1 : 0;
         consecutiveBearish = Open(b) - Close(b) >= pipVal ? consecutiveBearish + 1 : 0;
        }

      ind4long  = consecutiveBullish >= 5;
      ind4short = consecutiveBearish >= 5;
   }
   // Directional Indicators (48)
   double ind5buffer0[]; CopyBuffer(indHandlers[295][5][0], 1, 1, 2, ind5buffer0);
   double ind5buffer1[]; CopyBuffer(indHandlers[295][5][0], 2, 1, 2, ind5buffer1);
   double ind5val1  = ind5buffer0[1];
   double ind5val2  = ind5buffer1[1];
   bool   ind5long  = ind5val1 < ind5val2 - sigma;
   bool   ind5short = ind5val1 > ind5val2 + sigma;

   return CreateExitSignal(295, ind2long || ind3long || ind4long || ind5long, ind2short || ind3short || ind4short || ind5short, 43, 0, false);
  }
//+------------------------------------------------------------------+
/*STRATEGY MARKET MetaTrader-Demo; XAUUSD; M30 */
